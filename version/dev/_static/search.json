[
    {
        "objectID": "api/ansys/mechanical/core/embedding/enum_importer/index",
        "href": "api/ansys/mechanical/core/embedding/enum_importer/index.html#the-enum_importerpy-module",
        "title": "The enum_importer.py module",
        "section": "The enum_importer.py module",
        "text": "The enum_importer.py module\nenum_importer.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/enum_importer/index",
        "href": "api/ansys/mechanical/core/embedding/enum_importer/index.html#summary",
        "title": "The enum_importer.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/enum_importer/index",
        "href": "api/ansys/mechanical/core/embedding/enum_importer/index.html#description",
        "title": "The enum_importer.py module > Description",
        "section": "Description",
        "text": "Library to import Mechanical enums.\nA useful subset of what is imported by\nAnsys Inc/v{NNN}/ACT/apis/Mechanical.py\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#addinconfiguration",
        "title": "AddinConfiguration",
        "section": "AddinConfiguration",
        "text": "Configuration class for Mechanical.\nAddinConfiguration\nAddinConfiguration"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#ansys.mechanical.core.embedding.addins.AddinConfiguration",
        "title": "AddinConfiguration > AddinConfiguration > AddinConfiguration",
        "section": "AddinConfiguration > AddinConfiguration",
        "text": "class ansys.mechanical.core.embedding.addins.AddinConfiguration(addin_configuration: str = 'Mechanical', **kwargs)\n\nConfiguration class for Mechanical.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#overview",
        "title": "AddinConfiguration > Overview",
        "section": "Overview",
        "text": "no_act_addins\nProperty to disable all ACT Addins.\naddin_configuration\nWB1 Addin configuration name.\nOverview\nno_act_addins\naddin_configuration"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#import-detail",
        "title": "AddinConfiguration > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.addins import AddinConfiguration\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#property-detail",
        "title": "AddinConfiguration > Property detail",
        "section": "Property detail",
        "text": "Property to disable all ACT Addins.\nWB1 Addin configuration name.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#AddinConfiguration.no_act_addins",
        "title": "AddinConfiguration > Property detail > no_act_addins",
        "section": "Property detail > no_act_addins",
        "text": "property AddinConfiguration.no_act_addins: bool\n\nProperty to disable all ACT Addins.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration",
        "href": "api/ansys/mechanical/core/embedding/addins/AddinConfiguration.html#AddinConfiguration.addin_configuration",
        "title": "AddinConfiguration > Property detail > addin_configuration",
        "section": "Property detail > addin_configuration",
        "text": "property AddinConfiguration.addin_configuration: str\n\nWB1 Addin configuration name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#the-loggingpy-module",
        "title": "The logging.py module",
        "section": "The logging.py module",
        "text": "The logging.py module\nlogging.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#summary",
        "title": "The logging.py module > Summary",
        "section": "Summary",
        "text": "PyMechanicalCustomAdapter\nKeeps the reference to the name of the Mechanical instance dynamic.\nPyMechanicalPercentStyle\nControls the way PyMechanical formats the percent style.\nPyMechanicalFormatter\nProvides for overwriting default format styles with custom format styles.\nInstanceFilter\nEnsures that the instance name record always exists.\nLogger\nProvides for adding handlers to the logger for each Mechanical session.\naddfile_handler\nAdd a file handler to the input.\nadd_stdout_handler\nAdd a file handler to the stand output handler.\nstring_to_loglevel\nLOG_LEVEL\nDefault log level configuration.\nFILE_NAME\nDefault file name.\nDEBUG\nConstant for logging.DEBUG.\nINFO\nConstant for logging.INFO.\nWARN\nConstant for logging.WARN.\nERROR\nConstant for logging.ERROR.\nCRITICAL\nConstant for logging.CRITICAL.\nSTDOUT_MSG_FORMAT\nStandard output message format.\nFILE_MSG_FORMAT\nFile message format.\nDEFAULT_STDOUT_HEADER\nDefault standard output header.\nDEFAULT_FILE_HEADER\nDefault file header.\nNEW_SESSION_HEADER\nDefault new session header containing date and time.\nSummary\nPyMechanicalCustomAdapter\nPyMechanicalPercentStyle\nPyMechanicalFormatter\nInstanceFilter\nLogger\naddfile_handler\nadd_stdout_handler\nstring_to_loglevel\nLOG_LEVEL\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#description",
        "title": "The logging.py module > Description",
        "section": "Description",
        "text": "Logging module.\nThis module supplies the general framework for logging in PyMechanical. This module is\nbuilt upon the logging package.\nThe intent is not for this module to replace the logging package but rather to provide\na way for the logging package and PyMechancial to interact.\nThe loggers used in the module include the name of the instance, which\nis intended to be unique.  This name is printed in all the active\noutputs and is used to track the different Mechanical instances.\nDescription\nlogging\nlogging"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#usage",
        "title": "The logging.py module > Usage",
        "section": "Usage",
        "text": "Usage"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#global-logger",
        "title": "The logging.py module > Global logger",
        "section": "Global logger",
        "text": "There is a global logger named pymechanical_global, which is created at\nansys.mechanical.core.__init__.  If you want to use this global logger,\nyou must call it at the top of your module:\nYou can rename this logger to avoid conflicts with other loggers (if any):\nThe default logging level of LOG is ERROR. To change this and output\nlower-level messages, you can use this code:\nAlternatively, you can use this code:\nThis alternative code ensures that all the handlers are set to the\ninput log level.\nBy default, this logger does not log to a file. If you want,\nyou can add a file handler:\nThe preceding code sets the logger to also be redirected to this file. If you\nwant to change the characteristics of this global logger from the beginning\nof the execution, you must edit the file __init__ in the\nansys.mechanical.core directory.\nTo log using this logger, call the desired method as a normal logger:\nGlobal logger\npymechanical_global\nansys.mechanical.core.__init__\nLOG\nERROR\n__init__\nansys.mechanical.core"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#instance-logger",
        "title": "The logging.py module > Instance Logger",
        "section": "Instance Logger",
        "text": "Every time an instance of the Mechanical\nckass is created, a logger is created and stored here:\nLOG._instances. This field is a dict where the key is the name of the\ncreated logger.\nThese logger instances inherit the pymechanical_global output handlers and\nlogging level unless otherwise specified. The way this logger works is very\nsimilar to the global logger. You can add a file handler if you want using the\nlog_to_file() method or change\nthe log level using the logger.Logging.setLevel() method.\nYou can use this logger like this:\nInstance Logger\nMechanical\nLOG._instances\ndict\npymechanical_global\nlog_to_file()\nlogger.Logging.setLevel()"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#other-loggers",
        "title": "The logging.py module > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using the Python logging package as\nyou would do in any other script. There are no conflicts between these loggers.\nOther loggers\nlogging"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#module-detail",
        "title": "The logging.py module > Module detail",
        "section": "Module detail",
        "text": "Add a file handler to the input.\nLogger to add the file handler to.\nName of the output file. The default is FILE_NAME.\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\nWhether to write headers to the file. The default is False.\nLogger object.\nAdd a file handler to the stand output handler.\nLogger to add the file handler to.\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\nWhether to write headers to the file. The default is False.\nLogger object.\nDefault log level configuration.\nDefault file name.\nConstant for logging.DEBUG.\nConstant for logging.INFO.\nConstant for logging.WARN.\nConstant for logging.ERROR.\nConstant for logging.CRITICAL.\nStandard output message format.\nFile message format.\nDefault standard output header.\nDefault file header.\nDefault new session header containing date and time.\nModule detail\nlogging.Logger\nlogging.Logger\npython:str\noptional\nFILE_NAME\npython:str\noptional\nNone\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\noptional\nFalse\nlogger\nlogging.Logger\nlogging.Logger\npython:str\noptional\nNone\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\noptional\nFalse\nlogger"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.addfile_handler",
        "title": "The logging.py module > Module detail > addfile_handler",
        "section": "Module detail > addfile_handler",
        "text": "logging.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, optional\n\nName of the output file. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.add_stdout_handler",
        "title": "The logging.py module > Module detail > add_stdout_handler",
        "section": "Module detail > add_stdout_handler",
        "text": "logging.add_stdout_handler(logger, level=LOG_LEVEL, write_headers=False)\n\nAdd a file handler to the stand output handler.\n\nParameters\n\nlogger\n\nlogging.Logger or logging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nwrite_headers\n\nbool, optional\n\nWhether to write headers to the file. The default is False.\n\nReturns\n\nlogger\n\nLogger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.LOG_LEVEL",
        "title": "The logging.py module > Module detail > LOG_LEVEL",
        "section": "Module detail > LOG_LEVEL",
        "text": "logging.LOG_LEVEL = 10\n\nDefault log level configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.FILE_NAME",
        "title": "The logging.py module > Module detail > FILE_NAME",
        "section": "Module detail > FILE_NAME",
        "text": "logging.FILE_NAME = 'pymechanical.log'\n\nDefault file name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.DEBUG",
        "title": "The logging.py module > Module detail > DEBUG",
        "section": "Module detail > DEBUG",
        "text": "logging.DEBUG = 10\n\nConstant for logging.DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.INFO",
        "title": "The logging.py module > Module detail > INFO",
        "section": "Module detail > INFO",
        "text": "logging.INFO = 20\n\nConstant for logging.INFO.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.WARN",
        "title": "The logging.py module > Module detail > WARN",
        "section": "Module detail > WARN",
        "text": "logging.WARN = 30\n\nConstant for logging.WARN.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.ERROR",
        "title": "The logging.py module > Module detail > ERROR",
        "section": "Module detail > ERROR",
        "text": "logging.ERROR = 40\n\nConstant for logging.ERROR.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.CRITICAL",
        "title": "The logging.py module > Module detail > CRITICAL",
        "section": "Module detail > CRITICAL",
        "text": "logging.CRITICAL = 50\n\nConstant for logging.CRITICAL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.STDOUT_MSG_FORMAT",
        "title": "The logging.py module > Module detail > STDOUT_MSG_FORMAT",
        "section": "Module detail > STDOUT_MSG_FORMAT",
        "text": "logging.STDOUT_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\nStandard output message format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.FILE_MSG_FORMAT",
        "title": "The logging.py module > Module detail > FILE_MSG_FORMAT",
        "section": "Module detail > FILE_MSG_FORMAT",
        "text": "logging.FILE_MSG_FORMAT = '%(levelname)s - %(instance_name)s -  %(module)s - %(funcName)s - %(message)s'\n\nFile message format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.DEFAULT_STDOUT_HEADER",
        "title": "The logging.py module > Module detail > DEFAULT_STDOUT_HEADER",
        "section": "Module detail > DEFAULT_STDOUT_HEADER",
        "text": "logging.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>\n\nDefault standard output header.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.DEFAULT_FILE_HEADER",
        "title": "The logging.py module > Module detail > DEFAULT_FILE_HEADER",
        "section": "Module detail > DEFAULT_FILE_HEADER",
        "text": "logging.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>\n\nDefault file header.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.NEW_SESSION_HEADER",
        "title": "The logging.py module > Module detail > NEW_SESSION_HEADER",
        "section": "Module detail > NEW_SESSION_HEADER",
        "text": "logging.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>\n\nDefault new session header containing date and time.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/index",
        "href": "api/ansys/mechanical/core/logging/index.html#logging.string_to_loglevel",
        "title": "The logging.py module > Module detail > string_to_loglevel",
        "section": "Module detail > string_to_loglevel",
        "text": "logging.string_to_loglevel\n\n"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#installation-guide",
        "title": "Installation guide",
        "section": "Installation guide",
        "text": "To use PyMechanical, a licensed copy of Ansys Mechanical must be installed locally.\nThe installed version determines the available interface and features.\nPyMechanical is compatible with Mechanical 2023 R2 and later on Windows\nand Linux. If you face any issues while setting up or using PyMechanical,\nplease go though FAQs and known issues and limitations sections.\nInstallation guide"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-the-package",
        "title": "Installation guide > Install the package",
        "section": "Install the package",
        "text": "The latest ansys.mechanical.core package supports Python 3.10 through\nPython 3.13 on Windows, Linux, and Mac.\nYou should consider installing PyMechanical in a virtual environment.\nFor more information, see Python’s\nvenv – Creation of virtual environments.\nInstall the latest package from PyPi with this command:\nInstall the package\nansys.mechanical.core"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-offline",
        "title": "Installation guide > Install offline",
        "section": "Install offline",
        "text": "If you want to install PyMechanical on a computer without access to the internet,\nyou can download a wheelhouse archive that corresponds to your\nmachine architecture from the Releases page\nof the PyMechanical repository.\nEach wheelhouse archive contains all the Python wheels necessary to install\nPyMechanical from scratch on Windows and Linux for Python 3.10 through Python 3.13. You can install\na wheelhouse archive on an isolated system with a fresh Python installation or on a\nvirtual environment.\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install it with\nthis code:\nIf you are on Windows with Python 3.10, unzip the ansys-mechanical-core-v0.12.dev0-wheelhouse-Windows-3.10\nwheelhouse archive to a wheelhouse directory and then install it using pip as\nin the preceding example.\nInstall offline\nansys-mechanical-core-v0.12.dev0-wheelhouse-Windows-3.10\nwheelhouse\npip"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#verify-your-installation",
        "title": "Installation guide > Verify your installation",
        "section": "Verify your installation",
        "text": "The way that you verify your installation depends on whether you want to run\nMechanical using a remote session or an embedded instance.\nBefore running either, you must first verify that you can find\nthe installed version of Mechanical using the ansys.tools.path package.\nThis package is required to use PyMechanical.\nIf you install Ansys in a directory other than the default or typical location,\nyou can save this directory path using the\nsave_mechanical_path\nfunction. Then use\nget_mechanical_path\nand version_from_path functions to verify the path and version.\nVerify your installation\nansys.tools.path\nversion_from_path"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#verify-a-remote-session",
        "title": "Installation guide > Verify a remote session",
        "section": "Verify a remote session",
        "text": "Verify your installation by starting a remote session of Mechanical from Python:\nIf you see a response from the server, you can begin using Mechanical\nas a service.\nVerify a remote session"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#verify-an-embedded-instance",
        "title": "Installation guide > Verify an embedded instance",
        "section": "Verify an embedded instance",
        "text": "Verify your installation by loading an embedded instance of Mechanical in Python.\nIf you are running on Linux, you must set some environment variables for\nembedding of Mechanical in Python to work. A script that sets these variables is\nshipped with ansys-mechanical-env which is part of PyMechanical\nTo use the script, prepend it to any invocation of Python:\nInside of Python, use the following commands to load an embedded instance:\nVerify an embedded instance\nansys-mechanical-env"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#the-logger-package",
        "title": "The logger package",
        "section": "The logger package",
        "text": "The logger package\nlogger"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#summary",
        "title": "The logger package > Summary",
        "section": "Summary",
        "text": "environ\nEnvironment variables for mechanical logging.\nlinux_api\nInternal Mechanical logging Linux API.\nsinks\nMechanical application logging sinks.\nwindows_api\nWindows API for internal Mechanical logging.\nConfiguration\nConfigures logger for Mechanical embedding.\nLogger\nProvides the Logger class for embedding.\nLOGGING_SINKS\nConstant for logging sinks.\nLOGGING_CONTEXT\nConstant for logging context.\nSummary\nenviron\nlinux_api\nsinks\nwindows_api\nConfiguration\nLogger\nLogger\nLOGGING_SINKS\nLOGGING_CONTEXT"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#description",
        "title": "The logger package > Description",
        "section": "Description",
        "text": "Embedding logger.\nModule to interact with the built-in logging system of Mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#module-detail",
        "title": "The logger package > Module detail",
        "section": "Module detail",
        "text": "Constant for logging sinks.\nConstant for logging context.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#logger.LOGGING_SINKS",
        "title": "The logger package > Module detail > LOGGING_SINKS",
        "section": "Module detail > LOGGING_SINKS",
        "text": "logger.LOGGING_SINKS: Set[int]\n\nConstant for logging sinks.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/index",
        "href": "api/ansys/mechanical/core/embedding/logger/index.html#logger.LOGGING_CONTEXT",
        "title": "The logger package > Module detail > LOGGING_CONTEXT",
        "section": "Module detail > LOGGING_CONTEXT",
        "text": "logger.LOGGING_CONTEXT: str = 'PYMECHANICAL'\n\nConstant for logging context.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#windows-subsystem-for-linux-wsl",
        "title": "Windows Subsystem for Linux (WSL)",
        "section": "Windows Subsystem for Linux (WSL)",
        "text": "This page explains how you use a PyAnsys library, more specifically PyMechanical,\nin the Windows Subsystem for Linux (WSL). WSL is a compatibility layer for\nrunning Linux binary executables natively on Windows 10, Windows 11, and\nWindows Server 2019. For more information, see:\nWikipedia’s Windows Subsystem for Linux\nMicrosoft’s What is the Windows Subsystem for Linux?\nThis page walks you through the installation of WSL on Windows and then\nshows how to use it together with Mechanical, PyMechanical, and\nDocker.\nThese instructions have not been fully tested with a VPN connection. If you\nexperience any problems connecting WSL to the internet, try to disconnect from the VPN.\nWindows Subsystem for Linux (WSL)"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#run-pymechanical-on-wsl",
        "title": "Windows Subsystem for Linux (WSL) > Run PyMechanical on WSL",
        "section": "Run PyMechanical on WSL",
        "text": "There are two versions of WSL: WSL1 and WSL2. Because WSL2 provides many improvements\nover WSL1, you should upgrade to and use WSL2.\nRun PyMechanical on WSL"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#install-wsl",
        "title": "Windows Subsystem for Linux (WSL) > Install WSL",
        "section": "Install WSL",
        "text": "Install WSL by following the instructions in Microsoft’s Install Linux on Windows with WSL.\nInstall WSL"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#install-the-centos7-wsl-distribution",
        "title": "Windows Subsystem for Linux (WSL) > Install the CentOS7 WSL distribution",
        "section": "Install the CentOS7 WSL distribution",
        "text": "You can install the CentOS7 WSL using an unofficial distribution from the\nhttps://github.com/wsldl-pg/CentWSL/ package or the\nhttps://github.com/mishamosher/CentOS-WSL/ package.\nOptionally, you can try Ubuntu, but it has not been tested yet in the context of WSL.\nInstall the CentOS7 WSL distribution"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#install-ansys-products-in-wsl-centos7",
        "title": "Windows Subsystem for Linux (WSL) > Install Ansys products in WSL CentOS7",
        "section": "Install Ansys products in WSL CentOS7",
        "text": "If you are using CentOS 7, before installing Mechanical, you must install some\nrequired libraries:\nInstall Ansys products in WSL CentOS7"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#install-ansys-products",
        "title": "Windows Subsystem for Linux (WSL) > Install Ansys products",
        "section": "Install Ansys products",
        "text": "To install Ansys products in WSL, perform these steps:\nDownload the Ansys Structures image for the current Ansys release from the Ansys Customer Portal.\nIf you are  downloading the image on a Windows machine, you should later copy the image to\nWSL.\nExtract the compressed source code file (tar.gz) with this command:\nTo install Mechanical, go into the folder where the files have been extracted\nand run this command:\nwhere:\n-silent : Initiates a silent installation, which means no GUI is shown.\n-install_dir /path/ : Specifies the directory to install the product or\nlicense manager to. If you want to install to the default location, you can\nomit the -install_dir argument. The default location is /ansys_inc\nif the symbolic link is set. Otherwise, it defaults to /usr/ansys_inc.\n-<product_flag> : Specifies the one or more products to install.\nIf you omit this argument, all products are installed. The Ansys, Inc.\nInstallation Guides in the Ansys Help provides a list of valid\nvalues for the product_flags argument in Chapter 6\nof the Linux Installation Guide and Chapter 7\nof the Windows Installation Guide.\nIn the preceding example for Mechanical, you only need to specify the -mechapdl flag.\nAfter installing Mechanical directly in /ansys_inc or /usr/ansys_inc,\nyou create a symbolic link with this command:\nBy default, PyMechanical expects the Mechanical executable to be in\n/usr/ansys_inc. Whether you install it there or not, you should\nuse a symbolic link to associate that directory with your Ansys installation\ndirectory (/*/ansys_inc).\nInstall Ansys products\ntar.gz\n-silent\n-install_dir /path/\n-install_dir\n/ansys_inc\n/usr/ansys_inc\n-<product_flag>\nproduct_flags\n-mechapdl\n/ansys_inc\n/usr/ansys_inc\n/usr/ansys_inc\n/*/ansys_inc"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#post-installation-setup",
        "title": "Windows Subsystem for Linux (WSL) > Post-installation setup",
        "section": "Post-installation setup",
        "text": "Post-installation setup"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#open-ports-for-license-server-communication",
        "title": "Windows Subsystem for Linux (WSL) > Open ports for license server communication",
        "section": "Open ports for license server communication",
        "text": "Theory: You should open the ports 1055 and 2325 for license server\ncommunication in the Windows Control Panel. For the steps to set advanced\nWindows firewall options, see Microsoft’s How to open port in Windows 10 Firewall?\nReality: This works if you want to run a Docker image using a WSL Linux image\nto host this Docker image. The Docker image successfully communicates with the Windows\nlicense server using these ports if you use the '-p' flag when running the\nDocker image with these ports open. For more information, see\nRun Mechanical on a local Docker image.\nIf you want to run Mechanical in the CentOS7 image and use the Windows license\nserver, opening the ports might not work properly because the Windows firewall\nseems to block all traffic coming from WSL.  For security purposes, you should\nstill try to open ports 1055 and 2325 in the Windows firewall and check if your\nMechanical installation can communicate with the Windows hosts. If you are having\nproblems after setting the firewall rules, you might have to disable the Windows\nfirewall for the WSL ethernet’s virtual interface. Because this might pose some\nunknown side effects and security risks, do so with caution. For more information,\nsee Disable the firewall on the WSL ethernet.\nOpen ports for license server communication\n1055\n2325\n'-p'\n1055\n2325"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#create-an-environmental-variable-in-wsl-that-points-to-the-license-server-on-the-windows-host",
        "title": "Windows Subsystem for Linux (WSL) > Create an environmental variable in WSL that points to the license server on the Windows host",
        "section": "Create an environmental variable in WSL that points to the license server on the Windows host",
        "text": "The IP address for the Windows host is given in the WSL /etc/hosts file before the name\nhost.docker.internal.\nThis host.docker.internal definition might not be available if Docker is\nnot installed.\nHere is an example of the WSL /etc/hosts file:\nYou can add the next lines to your WSL ~/.bashrc file to create an\nenvironment variable with the IP address:\nCreate an environmental variable in WSL that points to the license server on the Windows host\n/etc/hosts\nhost.docker.internal\nhost.docker.internal\n/etc/hosts\n~/.bashrc"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#run-mechanical-on-a-local-docker-image",
        "title": "Windows Subsystem for Linux (WSL) > Run Mechanical on a local Docker image",
        "section": "Run Mechanical on a local Docker image",
        "text": "To run a Docker image, you must follow all steps in Run PyMechanical on WSL.\nAdditionally, run a Docker image of PyMechanical with this command:\nSuccessive runs should restart the container. Or, delete the container and rerun it with\nthis code:\nRunning a Docker image creates a log.txt file in your current directory location.\nEnsure that your port 10001 is open in your firewall.\nYou should use a script file (batch .bat or PowerShell .ps)\nto run the preceding commands all at once.\nNotice that the WSL internal gRPC port (10000) is being mapped to a\ndifferent Windows host port (10001) to avoid ports conflicts.\nThis image is ready to be connected to from WSL or the Windows host. However,\nyou should specify the IP address and port using one of the following methods.\nMethod 1\nMethod 2\nMethod 3\nThis method specifies the IP address and port using environment variables that are read when\nthe Mechanical instance is launched.\nRun Mechanical on a local Docker image\nlog.txt\n10001\n.bat\n.ps\n10000\n10001"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#additional-information",
        "title": "Windows Subsystem for Linux (WSL) > Additional information",
        "section": "Additional information",
        "text": "Additional information"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#ip-addresses",
        "title": "Windows Subsystem for Linux (WSL) > IP addresses",
        "section": "IP addresses",
        "text": "The IP address 127.0.0.1 specified in Run Mechanical on a local Docker image is\nthe IP address of WSL CentOS from the WSL perspective, whereas the IP address for the Windows\nhost is typically 127.0.1.1.\nDocker builds the PyMechanical images using the WSL distribution as the base. Hence, PyMechanical\nis running on a Linux WSL distribution, which is running on a Windows host. Because the Docker image\nshares resources with WSL, it also shares the internal IP address with the WSL distribution.\nIP addresses\n127.0.0.1\n127.0.1.1"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#ansys-installation-flags",
        "title": "Windows Subsystem for Linux (WSL) > Ansys installation flags",
        "section": "Ansys installation flags",
        "text": "To obtain license server information, use one of the following methods to access the INSTALL file\nand then inspect the last few lines.\nMethod 1\nMethod 2\nAnsys installation flags\nINSTALL"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#license-server-information-for-the-client",
        "title": "Windows Subsystem for Linux (WSL) > License server information for the client",
        "section": "License server information for the client",
        "text": "The -licserverinfo argument specifies information that the client for the license server uses.\nThis argument is valid only in conjunction with a silent installation (INSTALL).\nSingle license server\nThe format for a single license server is:\nHere is an example:\nThree license servers\nThe format for three license servers is:\nHere is an example:\nLicense server information for the client\n-licserverinfo"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#language-for-the-installation",
        "title": "Windows Subsystem for Linux (WSL) > Language for the installation",
        "section": "Language for the installation",
        "text": "The -lang argument specifies the language that the installation uses.\nLanguage for the installation\n-lang"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#file-specifying-the-products-to-install",
        "title": "Windows Subsystem for Linux (WSL) > File specifying the products to install",
        "section": "File specifying the products to install",
        "text": "You can specify an options file that lists the products that you want to\ninstall. When you do so, you must use the -productfile argument to specify the\nfull path to the options file.\nFile specifying the products to install\noptions\n-productfile\noptions"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#ip-addresses-in-wsl-and-the-windows-host",
        "title": "Windows Subsystem for Linux (WSL) > IP addresses in WSL and the Windows host",
        "section": "IP addresses in WSL and the Windows host",
        "text": "Theory: You should be able to access the Windows host using the IP address\nspecified in the WSL /etc/hosts file. This IP address is typically 127.0.1.1.\nThis means that the local WSL IP address is 127.0.0.1.\nReality: It is almost impossible to use the IP address 127.0.1.1 to\nconnect to the Windows host. However, it is possible to use the host.docker.internal\nhostname in the same WSL /etc/hosts file. This is an IP address that is\nrandomly allocated, which is an issue when you define the license server. However,\nupdating the .bashrc file as mentioned earlier resolves this issue.\nIP addresses in WSL and the Windows host\n/etc/hosts\n127.0.1.1\n127.0.0.1\n127.0.1.1\nhost.docker.internal\n/etc/hosts\n.bashrc"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#disable-the-firewall-on-the-wsl-ethernet",
        "title": "Windows Subsystem for Linux (WSL) > Disable the firewall on the WSL ethernet",
        "section": "Disable the firewall on the WSL ethernet",
        "text": "There are two methods for disabling the firewall on the WSL ethernet.\nMethod 1\nThis method shows a notification:\nMethod 2\nThis method does not show a notification:\nOn Windows 10, you can use the wsl-windows-toolbar-launcher\npackage to launch Linux native apps directly from Windows with the standard\nWindows toolbar. Because the toolbar in Windows 11 differs, the README\nfile for this package explains how to run Microsoft’s PowerToys\npackage instead.\nDisable the firewall on the WSL ethernet"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#port-forwarding-on-windows-10",
        "title": "Windows Subsystem for Linux (WSL) > Port forwarding on Windows 10",
        "section": "Port forwarding on Windows 10",
        "text": "You can use Windows PowerShell commands for port forwarding on Windows 10.\nPort forwarding on Windows 10"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#link-ports-between-wsl-and-windows",
        "title": "Windows Subsystem for Linux (WSL) > Link ports between WSL and Windows",
        "section": "Link ports between WSL and Windows",
        "text": "This command links ports between WSL and Windows:\nLink ports between WSL and Windows"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#view-all-forwards",
        "title": "Windows Subsystem for Linux (WSL) > View all forwards",
        "section": "View all forwards",
        "text": "This command allows you to view all forwards:\nView all forwards"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#delete-port-forwarding",
        "title": "Windows Subsystem for Linux (WSL) > Delete port forwarding",
        "section": "Delete port forwarding",
        "text": "This command allows you to delete port forwarding:\nDelete port forwarding"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#reset-windows-network-adapters",
        "title": "Windows Subsystem for Linux (WSL) > Reset Windows network adapters",
        "section": "Reset Windows network adapters",
        "text": "You can reset Windows network adapters with this code:\nReset Windows network adapters"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#restart-the-wsl-service",
        "title": "Windows Subsystem for Linux (WSL) > Restart the WSL service",
        "section": "Restart the WSL service",
        "text": "You can restart the WSL service with this command:\nRestart the WSL service"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#stop-all-processes-with-a-given-name",
        "title": "Windows Subsystem for Linux (WSL) > Stop all processes with a given name",
        "section": "Stop all processes with a given name",
        "text": "You can stop all processes with a given name with this command.\nStop all processes with a given name"
    },
    {
        "objectID": "getting_started/wsl",
        "href": "getting_started/wsl.html#install-xvfb-in-centos7",
        "title": "Windows Subsystem for Linux (WSL) > Install xvfb in CentOS7",
        "section": "Install xvfb in CentOS7",
        "text": "If you want to replicate the CI/CD behavior, you must install the xvfb package\nas shown in the following command. For more information, see the .ci folder.\nInstall xvfb in CentOS7\nxvfb\nxvfb\n.ci"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.save_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.save_mechanical_path.html#save_mechanical_path",
        "title": "save_mechanical_path",
        "section": "save_mechanical_path",
        "text": "Find the Mechanical path or query user.\nPath for the Mechanical executable file (AnsysWBU.exe).\nThe default is None, in which case an attempt is made to\nobtain the path from the following sources in this order:\nThe default Mechanical paths (for example,\nC:/Program Files/Ansys Inc/vXXX/aiso/bin/AnsysWBU.exe)\nThe configuration file\nUser input\nIf a path is supplied, this method performs some checks. If the\nchecks are successful, it writes this path to the configuration\nfile.\nPath for the Mechanical executable file.\nstr\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\nYou can change the default for the exe_loc parameter either by modifying the\nconfig.txt file or by running this code:\nsave_mechanical_path\npython:str\noptional\nAnsysWBU.exe\nNone\nC:/Program Files/Ansys Inc/vXXX/aiso/bin/AnsysWBU.exe\npython:str\nstr\nconfig.txt\nansys.tools.path.SETTINGS_DIR\nexe_loc\nconfig.txt"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.save_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.save_mechanical_path.html#ansys.tools.path.save_mechanical_path",
        "title": "save_mechanical_path > save_mechanical_path > save_mechanical_path",
        "section": "save_mechanical_path > save_mechanical_path",
        "text": "ansys.tools.path.save_mechanical_path(exe_loc=None, allow_prompt=True)\n\nFind the Mechanical path or query user.\n\nParameters\n\nexe_loc\n\npython:str, optional\n\nPath for the Mechanical executable file (AnsysWBU.exe).\nThe default is None, in which case an attempt is made to\nobtain the path from the following sources in this order:\n\nThe default Mechanical paths (for example,\nC:/Program Files/Ansys Inc/vXXX/aiso/bin/AnsysWBU.exe)\n\nThe configuration file\n\nUser input\n\nIf a path is supplied, this method performs some checks. If the\nchecks are successful, it writes this path to the configuration\nfile.\n\nReturns\n\npython:str\n\nPath for the Mechanical executable file.\n\nReturn type\n\nstr\n\nNotes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\n\n>>> from ansys.tools.path import SETTINGS_DIR\n>>> import os\n>>> print(os.path.join(SETTINGS_DIR, \"config.txt\"))\nC:/Users/[username]]/AppData/Local/Ansys/ansys_tools_path/config.txt\n\nYou can change the default for the exe_loc parameter either by modifying the\nconfig.txt file or by running this code:\n\n>>> from ansys.tools.path import save_mechanical_path\n>>> save_mechanical_path(\"/new/path/to/executable\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#postererror",
        "title": "PosterError",
        "section": "PosterError",
        "text": "Bases: Exception\nClass which holds errors from the background thread posting system.\nPosterError\nPosterError\nException"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#ansys.mechanical.core.embedding.poster.PosterError",
        "title": "PosterError > PosterError > PosterError",
        "section": "PosterError > PosterError",
        "text": "exception ansys.mechanical.core.embedding.poster.PosterError(error: Exception)\n\nBases: Exception\n\nClass which holds errors from the background thread posting system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#overview",
        "title": "PosterError > Overview",
        "section": "Overview",
        "text": "error\nGet the underlying exception.\nOverview\nerror"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#import-detail",
        "title": "PosterError > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.poster import PosterError\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#property-detail",
        "title": "PosterError > Property detail",
        "section": "Property detail",
        "text": "Get the underlying exception.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/PosterError",
        "href": "api/ansys/mechanical/core/embedding/poster/PosterError.html#PosterError.error",
        "title": "PosterError > Property detail > error",
        "section": "Property detail > error",
        "text": "property PosterError.error: Exception\n\nGet the underlying exception.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#launching-pymechanical",
        "title": "Launching PyMechanical",
        "section": "Launching PyMechanical",
        "text": "The ansys-mechanical-core package requires either a local or\nremote instance of Mechanical to communicate with. This page describes\nhow Mechanical is installed from the Ansys standard installer and\ndescribes how you launch and interface with Mechanical from Python.\nLaunching PyMechanical\nansys-mechanical-core"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#install-mechanical",
        "title": "Launching PyMechanical > Install Mechanical",
        "section": "Install Mechanical",
        "text": "Mechanical is installed by default from the Ansys standard installer.\nWhen you run the standard installer, look under the Structural Mechanics\nheading to verify that the Mechanical Products checkbox is selected.\nAlthough options in the standard installer might change, this image provides\na reference:\nInstall Mechanical"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#launch-a-remote-mechanical-session",
        "title": "Launching PyMechanical > Launch a remote Mechanical session",
        "section": "Launch a remote Mechanical session",
        "text": "You can use PyMechanical to launch a Mechanical session on the local machine\nPython is running on. Alternatively, you can run Mechanical’s command line\ndirectly on any machine to start Mechanical in server mode and then use its\nIP address to manually connect to it from Python.\nLaunch a remote Mechanical session"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#launch-mechanical-on-the-local-machine-using-python",
        "title": "Launching PyMechanical > Launch Mechanical on the local machine using Python",
        "section": "Launch Mechanical on the local machine using Python",
        "text": "When Mechanical is installed locally on your machine, you can use the\nlaunch_mechanical()\nmethod to launch and automatically connect to Mechanical. While this method provides the\neasiest and fastest way to launch Mechanical, it only works with a local Mechanical installation.\nLaunch Mechanical locally with this code:\nLaunch Mechanical on the local machine using Python"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#launch-mechanical-from-the-command-line",
        "title": "Launching PyMechanical > Launch Mechanical from the command line",
        "section": "Launch Mechanical from the command line",
        "text": "The ansys-mechanical utility is installed automatically with PyMechanical,\nand can be used to run Mechanical from the command line. To obtain help on\nusage, type the following command:\nYou can launch Mechanical in server mode from the command line and then\nmanually connect to the server. Use the port argument to select the port.\nLaunch Mechanical from the command line"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#connect-to-a-mechanical-session",
        "title": "Launching PyMechanical > Connect to a Mechanical session",
        "section": "Connect to a Mechanical session",
        "text": "You can connect to a Mechanical session from the same host or from an external host.\nAssuming that Mechanical is running locally at the default IP address (127.0.0.1) on the\ndefault port (10000), you would use this code to connect to it with this code:\nAlternatively, you can use the\nconnect_to_mechanical()\nfor same functionality.\nNow assume that a remote instance of Mechanical has been started in server mode. To connect to\nthe computer on your local area network that is running Mechanical, you can use either\nan IP address and port or a hostname and port.\nIP address and port\nAssume that Mechanical is running remotely at IP address 192.168.0.1 on port 10000.\nYou would connect to it with this code:\nor\nHostname and port\nAssume that Mechanical is running remotely at hostname myremotemachine on port 10000.\nYou would connect to it with this code:\nor\nConnect to a Mechanical session\n127.0.0.1\n10000\n192.168.0.1\n10000\nmyremotemachine\n10000"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#launching-issues",
        "title": "Launching PyMechanical > Launching issues",
        "section": "Launching issues",
        "text": "For any number of reasons, launching Mechanical can fail. Some approaches\nfollow for debugging launch failures.\nLaunching issues"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#manually-set-the-location-of-the-executable-file",
        "title": "Launching PyMechanical > Manually set the location of the executable file",
        "section": "Manually set the location of the executable file",
        "text": "If you have a non-standard installation of Mechanical, PyMechanical might\nnot be able to find your installation. In this case, you should manually\nset the location of your Mechanical executable file as the first parameter\nfor the launch_mechanical() method.\nOn Windows\nOn Linux\nIf, when using the launch_mechanical()\nmethod, Mechanical still fails to launch or hangs while launching, pass the\nverbose_mechanical=True parameter. This prints the output of Mechanical in the Python console.\nYou can then use this output to debug why Mechanical isn’t launching.\nOn Windows, output is limited because of the way Mechanical launches.\nManually set the location of the executable file\nverbose_mechanical=True"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#debug-from-the-command-line",
        "title": "Launching PyMechanical > Debug from the command line",
        "section": "Debug from the command line",
        "text": "You may need to run the launch command from the command line to debug why Mechanical is not launching.\nrunning the launch command from the command line.\nOpen a terminal and run the following command:\nIf the preceding command for your operating system doesn’t launch Mechanical, you might have\na variety of issues, including:\nLicense server setup\nRunning behind a VPN\nMissing dependencies\nDebug from the command line\nlaunch"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#embed-a-mechanical-instance",
        "title": "Launching PyMechanical > Embed a Mechanical instance",
        "section": "Embed a Mechanical instance",
        "text": "The instructions for embedding a Mechanical instance are different on\nWindows and Linux. While the Python code is the same in both cases,\nLinux requires some additional environment variables.\nEmbed a Mechanical instance"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#python-code",
        "title": "Launching PyMechanical > Python code",
        "section": "Python code",
        "text": "Python code"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#additional-information-for-linux",
        "title": "Launching PyMechanical > Additional information for Linux",
        "section": "Additional information for Linux",
        "text": "Starting with 2023 R2, it is possible to embed an instance of Mechanical on Linux.\nHowever, because of differences in how Mechanical works on Linux, you cannot simply\nrun Python as usual. On Linux, certain environment variables must be set for the Python\nprocess before it starts. You can set up these environment variables using the mechanical-env\nscript which is part of PyMechanical\nAdditional information for Linux\nmechanical-env"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#licensing-issues",
        "title": "Launching PyMechanical > Licensing issues",
        "section": "Licensing issues",
        "text": "PADT has an Ansys\nproduct section. Posts about licensing are common.\nIf you are responsible for maintaining an Ansys license or have a personal installation\nof Ansys, you likely can access the\nLicensing\nsection of the Ansys Help, where you can view or download the Ansys, Inc. Licensing Guide for\ncomprehensive licensing information.\nLicensing issues"
    },
    {
        "objectID": "getting_started/running_mechanical",
        "href": "getting_started/running_mechanical.html#vpn-issues",
        "title": "Launching PyMechanical > VPN issues",
        "section": "VPN issues",
        "text": "Sometimes, Mechanical has issues starting when VPN software is running. For more information,\naccess the Mechanical Users Guide\nin the Ansys Help.\nVPN issues"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#configuration",
        "title": "Configuration",
        "section": "Configuration",
        "text": "Configures logger for Mechanical embedding.\nConfiguration\nConfiguration"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#ansys.mechanical.core.embedding.logger.Configuration",
        "title": "Configuration > Configuration > Configuration",
        "section": "Configuration > Configuration",
        "text": "class ansys.mechanical.core.embedding.logger.Configuration\n\nConfigures logger for Mechanical embedding.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#overview",
        "title": "Configuration > Overview",
        "section": "Overview",
        "text": "configure\nConfigure the logger for PyMechanical embedding.\nset_log_to_stdout\nConfigure logging to write to the standard output.\nset_log_to_file\nConfigure logging to write to a file.\nset_log_level\nSet the log level for all configured sinks.\nset_log_directory\nConfigure logging to write to a directory.\nset_log_base_directory\nConfigure logging to write in a time-stamped subfolder in this directory.\nOverview\nconfigure\nset_log_to_stdout\nset_log_to_file\nset_log_level\nset_log_directory\nset_log_base_directory"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#import-detail",
        "title": "Configuration > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger import Configuration\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#method-detail",
        "title": "Configuration > Method detail",
        "section": "Method detail",
        "text": "Configure the logger for PyMechanical embedding.\nLevel of logging that is defined in the logging package. The default is ‘DEBUG’.\nOptions are \"DEBUG\", \"INFO\", \"WARNING\", and \"ERROR\".\nDirectory to write log file to. The default is None, but by default the log\nwill appear somewhere in the system temp folder.\nBase directory to write log files to. Each instance of Mechanical will write its\nlog to a time-stamped subfolder within this directory. This is only possible to set\nbefore Mechanical is initialized.\nWhether to write log messages to the standard output, which is the\ncommand line. The default is True.\nConfigure logging to write to the standard output.\nConfigure logging to write to a file.\nSet the log level for all configured sinks.\nConfigure logging to write to a directory.\nConfigure logging to write in a time-stamped subfolder in this directory.\nMethod detail\npython:int\noptional\nlogging\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\npython:str\noptional\nNone\noptional\nTrue"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.configure",
        "title": "Configuration > Method detail > configure",
        "section": "Method detail > configure",
        "text": "classmethod Configuration.configure(level=logging.WARNING, directory=None, base_directory=None, to_stdout=True)\n\nConfigure the logger for PyMechanical embedding.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLevel of logging that is defined in the logging package. The default is ‘DEBUG’.\nOptions are \"DEBUG\", \"INFO\", \"WARNING\", and \"ERROR\".\n\ndirectory\n\npython:str, optional\n\nDirectory to write log file to. The default is None, but by default the log\nwill appear somewhere in the system temp folder.\n\nbase_directory: str, optional\n\nBase directory to write log files to. Each instance of Mechanical will write its\nlog to a time-stamped subfolder within this directory. This is only possible to set\nbefore Mechanical is initialized.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output, which is the\ncommand line. The default is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.set_log_to_stdout",
        "title": "Configuration > Method detail > set_log_to_stdout",
        "section": "Method detail > set_log_to_stdout",
        "text": "classmethod Configuration.set_log_to_stdout(value: bool) -> None\n\nConfigure logging to write to the standard output.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.set_log_to_file",
        "title": "Configuration > Method detail > set_log_to_file",
        "section": "Method detail > set_log_to_file",
        "text": "classmethod Configuration.set_log_to_file(value: bool) -> None\n\nConfigure logging to write to a file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.set_log_level",
        "title": "Configuration > Method detail > set_log_level",
        "section": "Method detail > set_log_level",
        "text": "classmethod Configuration.set_log_level(level: int) -> None\n\nSet the log level for all configured sinks.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.set_log_directory",
        "title": "Configuration > Method detail > set_log_directory",
        "section": "Method detail > set_log_directory",
        "text": "classmethod Configuration.set_log_directory(value: str) -> None\n\nConfigure logging to write to a directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Configuration",
        "href": "api/ansys/mechanical/core/embedding/logger/Configuration.html#Configuration.set_log_base_directory",
        "title": "Configuration > Method detail > set_log_base_directory",
        "section": "Method detail > set_log_base_directory",
        "text": "classmethod Configuration.set_log_base_directory(directory: str) -> None\n\nConfigure logging to write in a time-stamped subfolder in this directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index.html#the-embedding_plotterpy-module",
        "title": "The embedding_plotter.py module",
        "section": "The embedding_plotter.py module",
        "text": "The embedding_plotter.py module\nembedding_plotter.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index.html#summary",
        "title": "The embedding_plotter.py module > Summary",
        "section": "Summary",
        "text": "to_plotter\nConvert the app’s geometry to an ansys.tools.visualization_interface.Plotter instance.\nSummary\nto_plotter\nansys.tools.visualization_interface.Plotter"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index.html#description",
        "title": "The embedding_plotter.py module > Description",
        "section": "Description",
        "text": "PyVista plotter.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index.html#module-detail",
        "title": "The embedding_plotter.py module > Module detail",
        "section": "Module detail",
        "text": "Convert the app’s geometry to an ansys.tools.visualization_interface.Plotter instance.\nModule detail\nansys.tools.visualization_interface.Plotter"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/embedding_plotter/index.html#embedding_plotter.to_plotter",
        "title": "The embedding_plotter.py module > Module detail > to_plotter",
        "section": "Module detail > to_plotter",
        "text": "embedding_plotter.to_plotter(app: ansys.mechanical.core.embedding.App)\n\nConvert the app’s geometry to an ansys.tools.visualization_interface.Plotter instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/index",
        "href": "api/ansys/mechanical/core/launcher/index.html#the-launcherpy-module",
        "title": "The launcher.py module",
        "section": "The launcher.py module",
        "text": "The launcher.py module\nlauncher.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/index",
        "href": "api/ansys/mechanical/core/launcher/index.html#summary",
        "title": "The launcher.py module > Summary",
        "section": "Summary",
        "text": "MechanicalLauncher\nLaunches Mechanical in batch or UI mode.\nSummary\nMechanicalLauncher"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/index",
        "href": "api/ansys/mechanical/core/launcher/index.html#description",
        "title": "The launcher.py module > Description",
        "section": "Description",
        "text": "Launch Mechanical in batch or UI mode.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#the-runpy-module",
        "title": "The run.py module",
        "section": "The run.py module",
        "text": "The run.py module\nrun.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#summary",
        "title": "The run.py module > Summary",
        "section": "Summary",
        "text": "cli\nCLI tool to run mechanical.\nDRY_RUN\nDry run constant.\nSummary\ncli\nDRY_RUN"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#description",
        "title": "The run.py module > Description",
        "section": "Description",
        "text": "Convenience CLI to run mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#module-detail",
        "title": "The run.py module > Module detail",
        "section": "Module detail",
        "text": "CLI tool to run mechanical.\nUSAGE:\nThe following example demonstrates the main use of this tool:\n$ ansys-mechanical -r 251 -g\nStarting Ansys Mechanical version 2025R1 in graphical mode…\nDry run constant.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#run.cli",
        "title": "The run.py module > Module detail > cli",
        "section": "Module detail > cli",
        "text": "run.cli(project_file: str, port: int, debug: bool, input_script: str, script_args: str, revision: int, graphical: bool, show_welcome_screen: bool, private_appdata: bool, exit: bool, features: str)\n\nCLI tool to run mechanical.\n\nUSAGE:\n\nThe following example demonstrates the main use of this tool:\n\n$ ansys-mechanical -r 251 -g\n\nStarting Ansys Mechanical version 2025R1 in graphical mode…\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/run/index",
        "href": "api/ansys/mechanical/core/run/index.html#run.DRY_RUN",
        "title": "The run.py module > Module detail > DRY_RUN",
        "section": "Module detail > DRY_RUN",
        "text": "run.DRY_RUN = False\n\nDry run constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#uilauncher",
        "title": "UILauncher",
        "section": "UILauncher",
        "text": "Launch the GUI using a temporary mechdb file.\nUILauncher\nUILauncher"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#ansys.mechanical.core.embedding.ui.UILauncher",
        "title": "UILauncher > UILauncher > UILauncher",
        "section": "UILauncher > UILauncher",
        "text": "class ansys.mechanical.core.embedding.ui.UILauncher(dry_run: bool = False)\n\nLaunch the GUI using a temporary mechdb file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#overview",
        "title": "UILauncher > Overview",
        "section": "Overview",
        "text": "save_original\nSave the active mechdb file.\nsave_temp_copy\nSave a new mechdb file with a temporary name.\nopen_original\nOpen the original mechdb file from save_original().\ngraphically_launch_temp\nLaunch the GUI for the mechdb file with a temporary name from save_temp_copy().\nOverview\nsave_original\nsave_temp_copy\nopen_original\ngraphically_launch_temp"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#import-detail",
        "title": "UILauncher > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.ui import UILauncher\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#method-detail",
        "title": "UILauncher > Method detail",
        "section": "Method detail",
        "text": "Save the active mechdb file.\nA Mechanical embedding application.\nSave a new mechdb file with a temporary name.\nA Mechanical embedding application.\nOpen the original mechdb file from save_original().\nA Mechanical embedding application.\nThe full path to the active mechdb file.\nLaunch the GUI for the mechdb file with a temporary name from save_temp_copy().\nA Mechanical embedding application.\nThe full path to the temporary mechdb file.\nThe subprocess that launches the GUI for the temporary mechdb file.\nMethod detail\nsubprocess.Popen"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#UILauncher.save_original",
        "title": "UILauncher > Method detail > save_original",
        "section": "Method detail > save_original",
        "text": "UILauncher.save_original(app: ansys.mechanical.core.embedding.App) -> None\n\nSave the active mechdb file.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#UILauncher.save_temp_copy",
        "title": "UILauncher > Method detail > save_temp_copy",
        "section": "Method detail > save_temp_copy",
        "text": "UILauncher.save_temp_copy(app: ansys.mechanical.core.embedding.App) -> pathlib.Path | pathlib.Path\n\nSave a new mechdb file with a temporary name.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#UILauncher.open_original",
        "title": "UILauncher > Method detail > open_original",
        "section": "Method detail > open_original",
        "text": "UILauncher.open_original(app: ansys.mechanical.core.embedding.App, mechdb_file: str) -> None\n\nOpen the original mechdb file from save_original().\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\nmechdb_file: str\n\nThe full path to the active mechdb file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/UILauncher",
        "href": "api/ansys/mechanical/core/embedding/ui/UILauncher.html#UILauncher.graphically_launch_temp",
        "title": "UILauncher > Method detail > graphically_launch_temp",
        "section": "Method detail > graphically_launch_temp",
        "text": "UILauncher.graphically_launch_temp(app: ansys.mechanical.core.embedding.App, temp_file: pathlib.Path) -> subprocess.Popen | str\n\nLaunch the GUI for the mechdb file with a temporary name from save_temp_copy().\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\ntemp_file: pathlib.Path\n\nThe full path to the temporary mechdb file.\n\nReturns\n\nsubprocess.Popen\n\nThe subprocess that launches the GUI for the temporary mechdb file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#the-utilspy-module",
        "title": "The utils.py module",
        "section": "The utils.py module",
        "text": "The utils.py module\nutils.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#summary",
        "title": "The utils.py module > Summary",
        "section": "Summary",
        "text": "bgr_to_rgb_tuple\nConvert bgr integer to rgb tuple.\nget_nodes_and_coords\nExtract the nodes and coordinates from the TriTessellationNode.\nget_scene\nGet the scene of the model.\nSummary\nbgr_to_rgb_tuple\nget_nodes_and_coords\nget_scene"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#description",
        "title": "The utils.py module > Description",
        "section": "Description",
        "text": "Common plotting utilities.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#module-detail",
        "title": "The utils.py module > Module detail",
        "section": "Module detail",
        "text": "Convert bgr integer to rgb tuple.\nExtract the nodes and coordinates from the TriTessellationNode.\nThe TriTessellationNode contains “Coordinates” and “Indices”\nthat are flat arrays. This function converts them to numpy arrays\nGet the scene of the model.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#utils.bgr_to_rgb_tuple",
        "title": "The utils.py module > Module detail > bgr_to_rgb_tuple",
        "section": "Module detail > bgr_to_rgb_tuple",
        "text": "utils.bgr_to_rgb_tuple(bgr_int: int) -> Tuple[int, int, int]\n\nConvert bgr integer to rgb tuple.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#utils.get_nodes_and_coords",
        "title": "The utils.py module > Module detail > get_nodes_and_coords",
        "section": "Module detail > get_nodes_and_coords",
        "text": "utils.get_nodes_and_coords(tri_tessellation: Ansys.Mechanical.Scenegraph.TriTessellationNode)\n\nExtract the nodes and coordinates from the TriTessellationNode.\n\nThe TriTessellationNode contains “Coordinates” and “Indices”\nthat are flat arrays. This function converts them to numpy arrays\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/utils/index",
        "href": "api/ansys/mechanical/core/embedding/viz/utils/index.html#utils.get_scene",
        "title": "The utils.py module > Module detail > get_scene",
        "section": "Module detail > get_scene",
        "text": "utils.get_scene(app: ansys.mechanical.core.embedding.App) -> Ansys.Mechanical.Scenegraph.GroupNode\n\nGet the scene of the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/index",
        "href": "api/ansys/mechanical/core/embedding/viz/index.html#the-viz-package",
        "title": "The viz package",
        "section": "The viz package",
        "text": "The viz package\nviz"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/index",
        "href": "api/ansys/mechanical/core/embedding/viz/index.html#summary",
        "title": "The viz package > Summary",
        "section": "Summary",
        "text": "embedding_plotter\nPyVista plotter.\nusd_converter\nConverter to OpenUSD.\nutils\nCommon plotting utilities.\nSummary\nembedding_plotter\nusd_converter\nutils"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/index",
        "href": "api/ansys/mechanical/core/embedding/viz/index.html#description",
        "title": "The viz package > Description",
        "section": "Description",
        "text": "Namespace module for embedding visualization.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#the-errorspy-module",
        "title": "The errors.py module",
        "section": "The errors.py module",
        "text": "The errors.py module\nerrors.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#summary",
        "title": "The errors.py module > Summary",
        "section": "Summary",
        "text": "VersionError\nRaises an error when the version of Mechanical is invalid.\nMechanicalRuntimeError\nRaises an error when Mechanical passes a runtime error.\nMechanicalExitedError\nRaises an error when Mechanical has exited.\nhandler\nPass signal to custom interrupt handler.\nprotect_grpc\nCapture gRPC exceptions and return a more succinct error message.\nSIGINT_TRACKER\nList of SIGINT keyboard interrupts.\nSummary\nVersionError\nMechanicalRuntimeError\nMechanicalExitedError\nhandler\nprotect_grpc\nSIGINT_TRACKER"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#description",
        "title": "The errors.py module > Description",
        "section": "Description",
        "text": "PyMechanical-specific errors.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#module-detail",
        "title": "The errors.py module > Module detail",
        "section": "Module detail",
        "text": "Pass signal to custom interrupt handler.\nCapture gRPC exceptions and return a more succinct error message.\nCapture KeyboardInterrupt to avoid segfaulting Mechanical.\nThis works some of the time, but not all the time. For some\nreason gRPC still captures SIGINT.\nList of SIGINT keyboard interrupts.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#errors.handler",
        "title": "The errors.py module > Module detail > handler",
        "section": "Module detail > handler",
        "text": "errors.handler(sig, frame)\n\nPass signal to custom interrupt handler.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#errors.protect_grpc",
        "title": "The errors.py module > Module detail > protect_grpc",
        "section": "Module detail > protect_grpc",
        "text": "errors.protect_grpc(func)\n\nCapture gRPC exceptions and return a more succinct error message.\n\nCapture KeyboardInterrupt to avoid segfaulting Mechanical.\n\nThis works some of the time, but not all the time. For some\nreason gRPC still captures SIGINT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/index",
        "href": "api/ansys/mechanical/core/errors/index.html#errors.SIGINT_TRACKER",
        "title": "The errors.py module > Module detail > SIGINT_TRACKER",
        "section": "Module detail > SIGINT_TRACKER",
        "text": "errors.SIGINT_TRACKER = []\n\nList of SIGINT keyboard interrupts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#defaultservicemethods",
        "title": "DefaultServiceMethods",
        "section": "DefaultServiceMethods",
        "text": "Default service methods for MechanicalEmbeddedServer.\nDefaultServiceMethods\nDefaultServiceMethods"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#ansys.mechanical.core.embedding.rpc.server.DefaultServiceMethods",
        "title": "DefaultServiceMethods > DefaultServiceMethods > DefaultServiceMethods",
        "section": "DefaultServiceMethods > DefaultServiceMethods",
        "text": "class ansys.mechanical.core.embedding.rpc.server.DefaultServiceMethods(app)\n\nDefault service methods for MechanicalEmbeddedServer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#overview",
        "title": "DefaultServiceMethods > Overview",
        "section": "Overview",
        "text": "run_python_script\nRun scripts using Internal python engine.\nrun_python_script_from_file\nRun scripts using Internal python engine.\nclear\nClear the current project.\nlist_files\nList all files in the project directory.\nproject_directory\nGet the project directory.\n__repr__\nReturn the representation of the instance.\nOverview\nrun_python_script\nrun_python_script_from_file\nclear\nlist_files\nproject_directory\n__repr__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#import-detail",
        "title": "DefaultServiceMethods > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.server import DefaultServiceMethods\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#property-detail",
        "title": "DefaultServiceMethods > Property detail",
        "section": "Property detail",
        "text": "Get the project directory.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.project_directory",
        "title": "DefaultServiceMethods > Property detail > project_directory",
        "section": "Property detail > project_directory",
        "text": "property DefaultServiceMethods.project_directory\n\nGet the project directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#method-detail",
        "title": "DefaultServiceMethods > Method detail",
        "section": "Method detail",
        "text": "Return the representation of the instance.\nRun scripts using Internal python engine.\nRun scripts using Internal python engine.\nClear the current project.\nList all files in the project directory.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.__repr__",
        "title": "DefaultServiceMethods > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DefaultServiceMethods.__repr__()\n\nReturn the representation of the instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.run_python_script",
        "title": "DefaultServiceMethods > Method detail > run_python_script",
        "section": "Method detail > run_python_script",
        "text": "DefaultServiceMethods.run_python_script(script: str, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun scripts using Internal python engine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.run_python_script_from_file",
        "title": "DefaultServiceMethods > Method detail > run_python_script_from_file",
        "section": "Method detail > run_python_script_from_file",
        "text": "DefaultServiceMethods.run_python_script_from_file(file_path: str, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun scripts using Internal python engine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.clear",
        "title": "DefaultServiceMethods > Method detail > clear",
        "section": "Method detail > clear",
        "text": "DefaultServiceMethods.clear()\n\nClear the current project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/DefaultServiceMethods.html#DefaultServiceMethods.list_files",
        "title": "DefaultServiceMethods > Method detail > list_files",
        "section": "Method detail > list_files",
        "text": "DefaultServiceMethods.list_files()\n\nList all files in the project directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#uniqueuserprofile",
        "title": "UniqueUserProfile",
        "section": "UniqueUserProfile",
        "text": "Create Unique User Profile (for AppData).\nUniqueUserProfile\nUniqueUserProfile"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#ansys.mechanical.core.embedding.appdata.UniqueUserProfile",
        "title": "UniqueUserProfile > UniqueUserProfile > UniqueUserProfile",
        "section": "UniqueUserProfile > UniqueUserProfile",
        "text": "class ansys.mechanical.core.embedding.appdata.UniqueUserProfile(profile_name: str, copy_profile: bool = True, dry_run: bool = False)\n\nCreate Unique User Profile (for AppData).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#overview",
        "title": "UniqueUserProfile > Overview",
        "section": "Overview",
        "text": "initialize\nInitialize the new profile location.\ncleanup\nCleanup unique user profile.\nupdate_environment\nSet environment variables for new user profile.\nexists\nCheck if unique profile name already exists.\nmkdirs\nCreate a unique user profile & set up the directory tree.\ncopy_profiles\nCopy current user directories into a new user profile.\nlocation\nReturn the profile name.\ncopy_profile\nOverview\ninitialize\ncleanup\nupdate_environment\nexists\nmkdirs\ncopy_profiles\nlocation\ncopy_profile"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#import-detail",
        "title": "UniqueUserProfile > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.appdata import UniqueUserProfile\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#property-detail",
        "title": "UniqueUserProfile > Property detail",
        "section": "Property detail",
        "text": "Return the profile name.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.location",
        "title": "UniqueUserProfile > Property detail > location",
        "section": "Property detail > location",
        "text": "property UniqueUserProfile.location: str\n\nReturn the profile name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#attribute-detail",
        "title": "UniqueUserProfile > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.copy_profile",
        "title": "UniqueUserProfile > Attribute detail > copy_profile",
        "section": "Attribute detail > copy_profile",
        "text": "UniqueUserProfile.copy_profile = True\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#method-detail",
        "title": "UniqueUserProfile > Method detail",
        "section": "Method detail",
        "text": "Initialize the new profile location.\ncopy_profile (bool): If False, the copy_profile method will be skipped.\nCleanup unique user profile.\nSet environment variables for new user profile.\nCheck if unique profile name already exists.\nCreate a unique user profile & set up the directory tree.\nCopy current user directories into a new user profile.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.initialize",
        "title": "UniqueUserProfile > Method detail > initialize",
        "section": "Method detail > initialize",
        "text": "UniqueUserProfile.initialize() -> None\n\nInitialize the new profile location.\n\nArgs:\n\ncopy_profile (bool): If False, the copy_profile method will be skipped.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.cleanup",
        "title": "UniqueUserProfile > Method detail > cleanup",
        "section": "Method detail > cleanup",
        "text": "UniqueUserProfile.cleanup() -> None\n\nCleanup unique user profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.update_environment",
        "title": "UniqueUserProfile > Method detail > update_environment",
        "section": "Method detail > update_environment",
        "text": "UniqueUserProfile.update_environment(env) -> None\n\nSet environment variables for new user profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.exists",
        "title": "UniqueUserProfile > Method detail > exists",
        "section": "Method detail > exists",
        "text": "UniqueUserProfile.exists() -> bool\n\nCheck if unique profile name already exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.mkdirs",
        "title": "UniqueUserProfile > Method detail > mkdirs",
        "section": "Method detail > mkdirs",
        "text": "UniqueUserProfile.mkdirs() -> None\n\nCreate a unique user profile & set up the directory tree.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile",
        "href": "api/ansys/mechanical/core/embedding/appdata/UniqueUserProfile.html#UniqueUserProfile.copy_profiles",
        "title": "UniqueUserProfile > Method detail > copy_profiles",
        "section": "Method detail > copy_profiles",
        "text": "UniqueUserProfile.copy_profiles() -> None\n\nCopy current user directories into a new user profile.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#mechanical",
        "title": "Mechanical",
        "section": "Mechanical",
        "text": "Bases: object\nConnects to a gRPC Mechanical server and allows commands to be passed.\nMechanical\nMechanical\nobject"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#ansys.mechanical.core.mechanical.Mechanical",
        "title": "Mechanical > Mechanical > Mechanical",
        "section": "Mechanical > Mechanical",
        "text": "class ansys.mechanical.core.mechanical.Mechanical(ip=None, port=None, timeout=60.0, loglevel='WARNING', log_file=False, log_mechanical=None, cleanup_on_exit=False, channel=None, remote_instance=None, keep_connection_alive=True, **kwargs)\n\nBases: object\n\nConnects to a gRPC Mechanical server and allows commands to be passed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#overview",
        "title": "Mechanical > Overview",
        "section": "Overview",
        "text": "get_product_info\nGet product information by running a script on the Mechanical gRPC server.\nlaunch\nLaunch Mechanical in batch or UI mode.\nwait_till_mechanical_is_ready\nWait until Mechanical is ready.\nrun_python_script\nRun a Python script block inside Mechanical.\nrun_python_script_from_file\nRun the contents a python file inside Mechanical.\nexit\nExit Mechanical.\nupload\nUpload a file to the Mechanical instance.\nget_file_chunks\nConstruct the file upload request for the server.\nlist_files\nList the files in the working directory of Mechanical.\ndownload\nDownload files from the working directory of the Mechanical instance.\nsave_chunks_to_file\nSave chunks to a local file.\ndownload_project\nDownload all project files in the working directory of the Mechanical instance.\nclear\nClear the database.\nlog_message\nLog the message using the given log level.\nlog_debug\nLog the debug message.\nlog_info\nLog the info message.\nlog_warning\nLog the warning message.\nlog_error\nLog the error message.\nverify_valid_connection\nVerify whether the connection to Mechanical is valid.\nlog\nLog associated with the current Mechanical instance.\nversion\nGet the Mechanical version based on the instance.\nname\nName (unique identifier) of the Mechanical instance.\nbusy\nReturn True when the Mechanical gRPC server is executing a command.\nlocked\nInstance is in use within a pool.\nis_alive\nWhether there is an active connection to the Mechanical gRPC server.\nproject_directory\nGet the project directory for the currently connected Mechanical instance.\nexited\nWhether Mechanical already exited.\nset_log_level\nSet the log level.\nconvert_to_server_log_level\nConvert the log level to the server log level.\n__del__\nClean up on exit.\n__repr__\nGet the user-readable string form of the Mechanical instance.\nOverview\nget_product_info\nlaunch\nwait_till_mechanical_is_ready\nrun_python_script\nrun_python_script_from_file\nexit\nupload\nget_file_chunks\nlist_files\ndownload\nsave_chunks_to_file\ndownload_project\nclear\nlog_message\nlog_debug\nlog_info\nlog_warning\nlog_error\nverify_valid_connection\nlog\nversion\nname\nbusy\nlocked\nis_alive\nproject_directory\nexited\nset_log_level\nconvert_to_server_log_level\n__del__\n__repr__"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#import-detail",
        "title": "Mechanical > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.mechanical import Mechanical\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#property-detail",
        "title": "Mechanical > Property detail",
        "section": "Property detail",
        "text": "Log associated with the current Mechanical instance.\nGet the Mechanical version based on the instance.\nGet the version of the connected Mechanical instance.\nName (unique identifier) of the Mechanical instance.\nReturn True when the Mechanical gRPC server is executing a command.\nInstance is in use within a pool.\nWhether there is an active connection to the Mechanical gRPC server.\nGet the project directory for the currently connected Mechanical instance.\nGet the project directory of the connected Mechanical instance.\nWhether Mechanical already exited.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log",
        "title": "Mechanical > Property detail > log",
        "section": "Property detail > log",
        "text": "property Mechanical.log\n\nLog associated with the current Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.version",
        "title": "Mechanical > Property detail > version",
        "section": "Property detail > version",
        "text": "property Mechanical.version: str\n\nGet the Mechanical version based on the instance.\n\nExamples\n\nGet the version of the connected Mechanical instance.\n\n>>> mechanical.version\n'251'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.name",
        "title": "Mechanical > Property detail > name",
        "section": "Property detail > name",
        "text": "property Mechanical.name\n\nName (unique identifier) of the Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.busy",
        "title": "Mechanical > Property detail > busy",
        "section": "Property detail > busy",
        "text": "property Mechanical.busy\n\nReturn True when the Mechanical gRPC server is executing a command.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.locked",
        "title": "Mechanical > Property detail > locked",
        "section": "Property detail > locked",
        "text": "property Mechanical.locked\n\nInstance is in use within a pool.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.is_alive",
        "title": "Mechanical > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property Mechanical.is_alive: bool\n\nWhether there is an active connection to the Mechanical gRPC server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.project_directory",
        "title": "Mechanical > Property detail > project_directory",
        "section": "Property detail > project_directory",
        "text": "property Mechanical.project_directory\n\nGet the project directory for the currently connected Mechanical instance.\n\nExamples\n\nGet the project directory of the connected Mechanical instance.\n\n>>> mechanical.project_directory\n'/tmp/ANSYS.username.1/AnsysMech3F97/Project_Mech_Files/'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.exited",
        "title": "Mechanical > Property detail > exited",
        "section": "Property detail > exited",
        "text": "property Mechanical.exited\n\nWhether Mechanical already exited.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#method-detail",
        "title": "Mechanical > Method detail",
        "section": "Method detail",
        "text": "Clean up on exit.\nSet the log level.\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\"\nand \"ERROR\".\nSet the log level to the \"DEBUG\" level.\n# >>> mechanical.set_log_level(‘DEBUG’)\n#\n# Set the log level to info\n#\n# >>> mechanical.set_log_level(‘INFO’)\n#\n# Set the log level to warning\n#\n# >>> mechanical.set_log_level(‘WARNING’)\n#\n# Set the log level to error\n#\n# >>> mechanical.set_log_level(‘ERROR’)\nGet product information by running a script on the Mechanical gRPC server.\nGet the user-readable string form of the Mechanical instance.\nLaunch Mechanical in batch or UI mode.\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this\nMechanical instance is collected.\nWait until Mechanical is ready.\nMaximum allowable time in seconds for connecting to the Mechanical gRPC server.\nConvert the log level to the server log level.\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\n\"ERROR\", and \"CRITICAL\".\nRun a Python script block inside Mechanical.\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\nScript block (one or more lines) to run.\nWhether to enable logging. The default is False.\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\nScript result.\nReturn a value from a simple calculation.\nReturn a string value from Project object.\nReturn an empty string, when you try to return the Project object.\nReturn an empty string for assignments.\nReturn value from the last executed statement from a variable.\nReturn value from last executed statement from a function call.\nHandle an error scenario.\nRun the contents a python file inside Mechanical.\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\nPath for the Python file.\nWhether to enable logging. The default is False.\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\nScript result.\nReturn a value from a simple calculation.\nContents of simple.py file\n2+3\nReturn a value from a simple function call.\nContents of  test.py file\nimport math\nmath.pow(2,3)\nExit Mechanical.\nWhether to force Mechanical to exit. The default is False, in which case\nonly Mechanical in UI mode asks for confirmation. This parameter overrides\nany environment variables that may inhibit exiting Mechanical.\nExit Mechanical.\nUpload a file to the Mechanical instance.\nLocal file to upload. Only the file name is needed if the file\nis relative to the current working directory. Otherwise, the full path\nis needed.\nFile location on the Mechanical server to upload the file to. The default is\nNone, in which case the project directory is used.\nChunk size in bytes. The default is 1048576.\nWhether to show a progress bar using tqdm. The default is True.\nA progress bar is helpful for viewing upload progress.\nBase name of the uploaded file.\nUpload the hsec.x_t file  with the progress bar not shown.\nConstruct the file upload request for the server.\nDirectory where the file to upload to the server is located.\nName of the file to upload.\nChunk size in bytes.\nWhether to show a progress bar using tqdm.\nList the files in the working directory of Mechanical.\nList of files in the working directory of Mechanical.\nList the files in the working directory.\nDownload files from the working directory of the Mechanical instance.\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\nOne or more files on the Mechanical server to download. The files must be\nin the same directory as the Mechanical instance. You can use the\nMechanical.list_files\nfunction to list current files. Alternatively, you can specify glob expressions to\nmatch file names. For example, you could use file* to match every file whose\nname starts with file.\nDefault directory to copy the downloaded files to. The default is None and\ncurrent working directory will be used as target directory.\nChunk size in bytes. The default is 262144. The value must be less than 4 MB.\nWhether to show a progress bar using  tqdm. The default is None, in\nwhich case a progress bar is shown. A progress bar is helpful for viewing download\nprogress.\nWhether to use recursion when using a glob pattern search. The default is False.\nList of local file paths.\nThere are some considerations to keep in mind when using the download() method:\nThe glob pattern search does not search recursively in remote instances.\nIn a remote instance, it is not possible to list or download files in a\nlocation other than the Mechanical working directory.\nIf you are connected to a local instance and provide a file path, downloading files\nfrom a different folder is allowed but is not recommended.\nDownload a single file.\nDownload all files starting with file.\nDownload every file in the Mechanical working directory.\nAlternatively, the recommended method is to use the\ndownload_project()\nmethod to download all files.\nSave chunks to a local file.\nName of the local file to save chunks to.\nWhether to show a progress bar using  tqdm. The default is False.\nName of the target file on the server. The default is \"\". The file\nmust be in the same directory as the Mechanical instance. You can use the\nmechanical.list_files() function to list current files.\nFile size saved in bytes.  If 0 is returned, no file was written.\nDownload all project files in the working directory of the Mechanical instance.\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\nList of extensions for filtering files before downloading them. The\ndefault is None.\nPath for downloading the files to. The default is None.\nWhether to show a progress bar using tqdm. The default is False.\nA progress bar is helpful for viewing download progress.\nList of local file paths.\nDownload all the files in the project.\nClear the database.\nClear the database.\nLog the message using the given log level.\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\nMessage to log.\nLog a debug message.\nLog an info message.\nLog the debug message.\nLog the info message.\nLog the warning message.\nLog the error message.\nVerify whether the connection to Mechanical is valid.\nMethod detail\npython:str\npython:int\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\n\"DEBUG\"\noptional\nTrue\nFalse\npython:float\noptional\npython:str\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\n\"CRITICAL\"\nConverted\nlog\nlevel\nfor\nthe\npython:str\nFalse\n\"WARNING\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\n2000\npython:str\nFalse\n\"WARNING\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\n2000\npython:str\noptional\nFalse\npython:str\npython:str\noptional\nNone\npython:int\noptional\n1048576\noptional\ntqdm\nTrue\npython:str\nhsec.x_t\npython:str\noptional\npython:str\npython:int\ntqdm\npython:list\npython:str\npython:list\npython:str\npython:tuple\npython:str\nMechanical.list_files\nfile*\nfile\nNone\npython:int\noptional\n262144\noptional\ntqdm\nNone\noptional\nFalse\nList\npython:str\ndownload()\nfile\ndownload_project()\npython:str\noptional\ntqdm\nFalse\npython:str\noptional\n\"\"\nmechanical.list_files()\npython:int\n0\npython:list\npython:str\npython:tuple\npython:str\noptional\nNone\npython:str\noptional\nNone\noptional\ntqdm\nFalse\nList\npython:str\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\npython:str"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.__del__",
        "title": "Mechanical > Method detail > __del__",
        "section": "Method detail > __del__",
        "text": "Mechanical.__del__()\n\nClean up on exit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.set_log_level",
        "title": "Mechanical > Method detail > set_log_level",
        "section": "Method detail > set_log_level",
        "text": "static Mechanical.set_log_level(loglevel)\n\nSet the log level.\n\nParameters\n\nloglevel\n\npython:str, python:int\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\"\nand \"ERROR\".\n\nExamples\n\nSet the log level to the \"DEBUG\" level.\n\n# >>> mechanical.set_log_level(‘DEBUG’)\n#\n# Set the log level to info\n#\n# >>> mechanical.set_log_level(‘INFO’)\n#\n# Set the log level to warning\n#\n# >>> mechanical.set_log_level(‘WARNING’)\n#\n# Set the log level to error\n#\n# >>> mechanical.set_log_level(‘ERROR’)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.get_product_info",
        "title": "Mechanical > Method detail > get_product_info",
        "section": "Method detail > get_product_info",
        "text": "Mechanical.get_product_info()\n\nGet product information by running a script on the Mechanical gRPC server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.__repr__",
        "title": "Mechanical > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Mechanical.__repr__()\n\nGet the user-readable string form of the Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.launch",
        "title": "Mechanical > Method detail > launch",
        "section": "Method detail > launch",
        "text": "Mechanical.launch(cleanup_on_exit=True)\n\nLaunch Mechanical in batch or UI mode.\n\nParameters\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this\nMechanical instance is collected.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.wait_till_mechanical_is_ready",
        "title": "Mechanical > Method detail > wait_till_mechanical_is_ready",
        "section": "Method detail > wait_till_mechanical_is_ready",
        "text": "Mechanical.wait_till_mechanical_is_ready(wait_time=-1)\n\nWait until Mechanical is ready.\n\nParameters\n\nwait_time\n\npython:float, optional\n\nMaximum allowable time in seconds for connecting to the Mechanical gRPC server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.convert_to_server_log_level",
        "title": "Mechanical > Method detail > convert_to_server_log_level",
        "section": "Method detail > convert_to_server_log_level",
        "text": "static Mechanical.convert_to_server_log_level(log_level)\n\nConvert the log level to the server log level.\n\nParameters\n\nlog_level\n\npython:str\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\n\"ERROR\", and \"CRITICAL\".\n\nReturns\n\nConverted log level for the server.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.run_python_script",
        "title": "Mechanical > Method detail > run_python_script",
        "section": "Method detail > run_python_script",
        "text": "Mechanical.run_python_script(script_block: str, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun a Python script block inside Mechanical.\n\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\n\nParameters\n\nscript_block\n\npython:str\n\nScript block (one or more lines) to run.\n\nenable_logging: bool, optional\n\nWhether to enable logging. The default is False.\n\nlog_level: str\n\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\nprogress_interval: int, optional\n\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\n\nReturns\n\npython:str\n\nScript result.\n\nExamples\n\nReturn a value from a simple calculation.\n\n>>> mechanical.run_python_script('2+3')\n'5'\n\nReturn a string value from Project object.\n\n>>> mechanical.run_python_script('ExtAPI.DataModel.Project.ProductVersion')\n'2025 R1'\n\nReturn an empty string, when you try to return the Project object.\n\n>>> mechanical.run_python_script('ExtAPI.DataModel.Project')\n''\n\nReturn an empty string for assignments.\n\n>>> mechanical.run_python_script('version = ExtAPI.DataModel.Project.ProductVersion')\n''\n\nReturn value from the last executed statement from a variable.\n\n>>> script='''\n    addition = 2 + 3\n    multiplication = 3 * 4\n    multiplication\n    '''\n>>> mechanical.run_python_script(script)\n'12'\n\nReturn value from last executed statement from a function call.\n\n>>> script='''\n    import math\n    math.pow(2,3)\n    '''\n>>> mechanical.run_python_script(script)\n'8'\n\nHandle an error scenario.\n\n>>> script = 'hello_world()'\n>>> import grpc\n>>> try:\n        mechanical.run_python_script(script)\n    except grpc.RpcError as error:\n        print(error.details())\nname 'hello_world' is not defined\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.run_python_script_from_file",
        "title": "Mechanical > Method detail > run_python_script_from_file",
        "section": "Method detail > run_python_script_from_file",
        "text": "Mechanical.run_python_script_from_file(file_path, enable_logging=False, log_level='WARNING', progress_interval=2000)\n\nRun the contents a python file inside Mechanical.\n\nIt returns the string value of the last executed statement. If the value cannot be\nreturned as a string, it will return an empty string.\n\nParameters\n\nfile_path\n\nPath for the Python file.\n\nenable_logging: bool, optional\n\nWhether to enable logging. The default is False.\n\nlog_level: str\n\nLevel of logging. The default is \"WARNING\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\nprogress_interval: int, optional\n\nFrequency in milliseconds for getting log messages from the server.\nThe default is 2000.\n\nReturns\n\npython:str\n\nScript result.\n\nExamples\n\nReturn a value from a simple calculation.\n\nContents of simple.py file\n\n2+3\n\n>>> mechanical.run_python_script_from_file('simple.py')\n'5'\n\nReturn a value from a simple function call.\n\nContents of  test.py file\n\nimport math\n\nmath.pow(2,3)\n\n>>> mechanical.run_python_script_from_file('test.py')\n'8'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.exit",
        "title": "Mechanical > Method detail > exit",
        "section": "Method detail > exit",
        "text": "Mechanical.exit(force=False)\n\nExit Mechanical.\n\nParameters\n\nforce\n\nbool, optional\n\nWhether to force Mechanical to exit. The default is False, in which case\nonly Mechanical in UI mode asks for confirmation. This parameter overrides\nany environment variables that may inhibit exiting Mechanical.\n\nExamples\n\nExit Mechanical.\n\n>>> mechanical.Exit(force=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.upload",
        "title": "Mechanical > Method detail > upload",
        "section": "Method detail > upload",
        "text": "Mechanical.upload(file_name, file_location_destination=None, chunk_size=DEFAULT_FILE_CHUNK_SIZE, progress_bar=True)\n\nUpload a file to the Mechanical instance.\n\nParameters\n\nfile_name\n\npython:str\n\nLocal file to upload. Only the file name is needed if the file\nis relative to the current working directory. Otherwise, the full path\nis needed.\n\nfile_location_destination\n\npython:str, optional\n\nFile location on the Mechanical server to upload the file to. The default is\nNone, in which case the project directory is used.\n\nchunk_size\n\npython:int, optional\n\nChunk size in bytes. The default is 1048576.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using tqdm. The default is True.\nA progress bar is helpful for viewing upload progress.\n\nReturns\n\npython:str\n\nBase name of the uploaded file.\n\nExamples\n\nUpload the hsec.x_t file  with the progress bar not shown.\n\n>>> mechanical.upload('hsec.x_t', progress_bar=False)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.get_file_chunks",
        "title": "Mechanical > Method detail > get_file_chunks",
        "section": "Method detail > get_file_chunks",
        "text": "Mechanical.get_file_chunks(file_location, file_name, chunk_size, progress_bar)\n\nConstruct the file upload request for the server.\n\nParameters\n\nfile_location_destination\n\npython:str, optional\n\nDirectory where the file to upload to the server is located.\n\nfile_name\n\npython:str\n\nName of the file to upload.\n\nchunk_size\n\npython:int\n\nChunk size in bytes.\n\nprogress_bar\n\nbool\n\nWhether to show a progress bar using tqdm.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.list_files",
        "title": "Mechanical > Method detail > list_files",
        "section": "Method detail > list_files",
        "text": "Mechanical.list_files()\n\nList the files in the working directory of Mechanical.\n\nReturns\n\npython:list\n\nList of files in the working directory of Mechanical.\n\nExamples\n\nList the files in the working directory.\n\n>>> files = mechanical.list_files()\n>>> for file in files: print(file)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.download",
        "title": "Mechanical > Method detail > download",
        "section": "Method detail > download",
        "text": "Mechanical.download(files, target_dir=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=None, recursive=False)\n\nDownload files from the working directory of the Mechanical instance.\n\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\n\nParameters\n\nfiles\n\npython:str, python:list[python:str], python:tuple(python:str)\n\nOne or more files on the Mechanical server to download. The files must be\nin the same directory as the Mechanical instance. You can use the\nMechanical.list_files\nfunction to list current files. Alternatively, you can specify glob expressions to\nmatch file names. For example, you could use file* to match every file whose\nname starts with file.\n\ntarget_dir: str\n\nDefault directory to copy the downloaded files to. The default is None and\ncurrent working directory will be used as target directory.\n\nchunk_size\n\npython:int, optional\n\nChunk size in bytes. The default is 262144. The value must be less than 4 MB.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using  tqdm. The default is None, in\nwhich case a progress bar is shown. A progress bar is helpful for viewing download\nprogress.\n\nrecursive\n\nbool, optional\n\nWhether to use recursion when using a glob pattern search. The default is False.\n\nReturns\n\nList[python:str]\n\nList of local file paths.\n\nNotes\n\nThere are some considerations to keep in mind when using the download() method:\n\nThe glob pattern search does not search recursively in remote instances.\n\nIn a remote instance, it is not possible to list or download files in a\nlocation other than the Mechanical working directory.\n\nIf you are connected to a local instance and provide a file path, downloading files\nfrom a different folder is allowed but is not recommended.\n\nExamples\n\nDownload a single file.\n\n>>> local_file_path_list = mechanical.download('file.out')\n\nDownload all files starting with file.\n\n>>> local_file_path_list = mechanical.download('file*')\n\nDownload every file in the Mechanical working directory.\n\n>>> local_file_path_list = mechanical.download('*.*')\n\nAlternatively, the recommended method is to use the\ndownload_project()\nmethod to download all files.\n\n>>> local_file_path_list = mechanical.download_project()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.save_chunks_to_file",
        "title": "Mechanical > Method detail > save_chunks_to_file",
        "section": "Method detail > save_chunks_to_file",
        "text": "Mechanical.save_chunks_to_file(responses, filename, progress_bar=False, target_name='')\n\nSave chunks to a local file.\n\nParameters\n\nresponses\n\n\n\nfilename\n\npython:str\n\nName of the local file to save chunks to.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using  tqdm. The default is False.\n\ntarget_name\n\npython:str, optional\n\nName of the target file on the server. The default is \"\". The file\nmust be in the same directory as the Mechanical instance. You can use the\nmechanical.list_files() function to list current files.\n\nReturns\n\nfile_size\n\npython:int\n\nFile size saved in bytes.  If 0 is returned, no file was written.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.download_project",
        "title": "Mechanical > Method detail > download_project",
        "section": "Method detail > download_project",
        "text": "Mechanical.download_project(extensions=None, target_dir=None, progress_bar=False)\n\nDownload all project files in the working directory of the Mechanical instance.\n\nIt downloads them from the working directory to the target directory. It returns the list\nof local file paths for the downloaded files.\n\nParameters\n\nextensions\n\npython:list[python:str], python:tuple[python:str], optional\n\nList of extensions for filtering files before downloading them. The\ndefault is None.\n\ntarget_dir\n\npython:str, optional\n\nPath for downloading the files to. The default is None.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar using tqdm. The default is False.\nA progress bar is helpful for viewing download progress.\n\nReturns\n\nList[python:str]\n\nList of local file paths.\n\nExamples\n\nDownload all the files in the project.\n\n>>> local_file_path_list = mechanical.download_project()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.clear",
        "title": "Mechanical > Method detail > clear",
        "section": "Method detail > clear",
        "text": "Mechanical.clear()\n\nClear the database.\n\nExamples\n\nClear the database.\n\n>>> mechanical.clear()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log_message",
        "title": "Mechanical > Method detail > log_message",
        "section": "Method detail > log_message",
        "text": "Mechanical.log_message(log_level, message)\n\nLog the message using the given log level.\n\nParameters\n\nlog_level: str\n\nLevel of logging. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nmessage\n\npython:str\n\nMessage to log.\n\nExamples\n\nLog a debug message.\n\n>>> mechanical.log_message('DEBUG', 'debug message')\n\nLog an info message.\n\n>>> mechanical.log_message('INFO', 'info message')\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log_debug",
        "title": "Mechanical > Method detail > log_debug",
        "section": "Method detail > log_debug",
        "text": "Mechanical.log_debug(message)\n\nLog the debug message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log_info",
        "title": "Mechanical > Method detail > log_info",
        "section": "Method detail > log_info",
        "text": "Mechanical.log_info(message)\n\nLog the info message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log_warning",
        "title": "Mechanical > Method detail > log_warning",
        "section": "Method detail > log_warning",
        "text": "Mechanical.log_warning(message)\n\nLog the warning message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.log_error",
        "title": "Mechanical > Method detail > log_error",
        "section": "Method detail > log_error",
        "text": "Mechanical.log_error(message)\n\nLog the error message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/Mechanical",
        "href": "api/ansys/mechanical/core/mechanical/Mechanical.html#Mechanical.verify_valid_connection",
        "title": "Mechanical > Method detail > verify_valid_connection",
        "section": "Method detail > verify_valid_connection",
        "text": "Mechanical.verify_valid_connection()\n\nVerify whether the connection to Mechanical is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalRuntimeError",
        "href": "api/ansys/mechanical/core/errors/MechanicalRuntimeError.html#mechanicalruntimeerror",
        "title": "MechanicalRuntimeError",
        "section": "MechanicalRuntimeError",
        "text": "Bases: RuntimeError\nRaises an error when Mechanical passes a runtime error.\nMechanicalRuntimeError\nMechanicalRuntimeError\nRuntimeError"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalRuntimeError",
        "href": "api/ansys/mechanical/core/errors/MechanicalRuntimeError.html#ansys.mechanical.core.errors.MechanicalRuntimeError",
        "title": "MechanicalRuntimeError > MechanicalRuntimeError > MechanicalRuntimeError",
        "section": "MechanicalRuntimeError > MechanicalRuntimeError",
        "text": "exception ansys.mechanical.core.errors.MechanicalRuntimeError\n\nBases: RuntimeError\n\nRaises an error when Mechanical passes a runtime error.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalRuntimeError",
        "href": "api/ansys/mechanical/core/errors/MechanicalRuntimeError.html#import-detail",
        "title": "MechanicalRuntimeError > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.errors import MechanicalRuntimeError\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/index",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/index.html#the-sinkspy-module",
        "title": "The sinks.py module",
        "section": "The sinks.py module",
        "text": "The sinks.py module\nsinks.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/index",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/index.html#summary",
        "title": "The sinks.py module > Summary",
        "section": "Summary",
        "text": "StandardSinks\nProvides built-in sinks.\nSummary\nStandardSinks"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/index",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/index.html#description",
        "title": "The sinks.py module > Description",
        "section": "Description",
        "text": "Mechanical application logging sinks.\nDescription"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#pymechanical-architecture",
        "title": "PyMechanical architecture",
        "section": "PyMechanical architecture",
        "text": "PyMechanical provides a Python interface to Ansys Mechanical. Mechanical is a\npolyglot 1 desktop app whose graphical user interface (GUI) runs on either\nthe Windows or Linux operating system. Mechanical’s APIs are implemented in C#\nusing .NET Framework 4.x. They are exposed to both C# and two implementations\n2 of Python, namely IronPython 3 and CPython.\nWithin Mechanical, Python scripting enables you to automate repetitive GUI\nactions. This is not unlike other apps developed either by Ansys or other\nsoftware companies. Python scripting leverages the Mechanical API.\nMechanical, like some other apps, is customizable. Using the same API that you\nwould use for scripting, you can implement extensions that add to the\ncapabilities of Mechanical. For example, buttons can be added to the GUI and\ncustom objects can be added to the data model. Even third-party or in-house\nsolvers can be integrated into Mechanical and can take advantage of the\npowerful meshing, generic CAD reader, and the intuitive pre- and post-\nprocessing experience of Mechanical.\nBefore discussing how Mechanical’s API is implemented, let’s first look at the software design\npattern known as the command pattern. You can use this pattern with many programming languages.\nFor a general description (using the Java programming language) of the command pattern, see\nCommand Design Pattern\nin the HowToDoInJava newsletter.\nPyMechanical architecture"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#command-pattern",
        "title": "PyMechanical architecture > Command pattern",
        "section": "Command pattern",
        "text": "Many interactive apps use the command pattern. It turns anything that the user\ndoes within the app into a command object, which is immediately executed. This\napproach carries some additional benefits 4.\nMore relevant to this discussion is how command patterns can be used to\nimplement automation APIs. If every action is a command, then that Command can\nserve as the API. So long as the Commands can be encoded in text, a scripting\nlanguage can be used to execute them. In fact, this approach is roughly how the\nAnsys Electronics Desktop, Ansys Mechanical APDL, and the Ansys Workbench apps\nimplement automation APIs for scripting.\nUsing the command pattern as a scripting API has disadvantages. Most\nimportantly, command APIs are not symmetric. The four fundamental operations on\ndata within a software app are Create, Read, Update, and\nDelete. These are often abbreviated as CRUD. While you can conceptually\nupdate, create, and delete using commands, you can not read using a command.\nThis makes it difficult to “visit” the app’s data model.\nCommand pattern\nCreate\nRead\nUpdate\nDelete"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#mechanical-api-implementation",
        "title": "PyMechanical architecture > Mechanical API implementation",
        "section": "Mechanical API implementation",
        "text": "Mechanical’s API serves the needs of both automation and customization. For\ncustomization, it is necessary to read the data model. For example, when\nintegrating a third-party solver, you must access boundary conditions,\ngeometry, material properties, mesh, and connections to properly input them to\nthe solver. As discussed earlier, the command pattern does not allow this kind\nof access. Due to this fact, the Mechanical API exposes its data model directly\nto the user. This is how a hypothetical command-based API would look for\nrenaming an object.\nInstead, an API based on a data model, like Mechanical’s API, looks like this:\nNotice that you could print the name by Reading a property of the object. A\ncommand-based API can not provide the same experience.\nMechanical API implementation"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#pymechanical-remote-interface",
        "title": "PyMechanical architecture > PyMechanical remote interface",
        "section": "PyMechanical remote interface",
        "text": "One way to interact with the Mechanical API from Python is as a remote session.\nYou can run Mechanical as a server and send a Remote Procedure Call (RPC).\nThe server handles the RPC and returns the response to the client. Currently,\nsending commands as a string and getting the result as a string is the only\noption.\nPyMechanical remote interface"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#pymechanical-embedded-instance",
        "title": "PyMechanical architecture > PyMechanical embedded instance",
        "section": "PyMechanical embedded instance",
        "text": "The embedded instance used by PyMechanical embeds an entire instance of the\nMechanical app in-memory inside of a Python program. There is no additional\nrunning process associated with it. Mechanical’s data model is directly\navailable within Python, which means that the fully CRUD data model of the\nMechanical API can be used.\nPyMechanical embedded instance"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#distributed-systems",
        "title": "PyMechanical architecture > Distributed systems",
        "section": "Distributed systems",
        "text": "This section contains a very basic explanation of distributed systems. It is\nnot meant be exhaustive and rigorous, but it instead introduces just the topics\nnecessary as simply as possible to help you understand the choices made by the\ndesigners of PyMechanical.\nA distributed system is a software system that uses a network to distribute\nsoftware across physical machines. With a distributed system, the individual\npieces of that system do not share an address space and therefore cannot call\nfunctions of each other directly. Instead, they communicate with each other by\nsending messages to each other. Examples include email, multiplayer games, web\napps, and high-performance computing, among other things.\nDistributed systems have unique characteristics when compared to classical\nsoftware systems that share an address space. For instance, in a distributed\nsystem, any call can fail because of a problem with the network, and the caller\ncan not always know whether a call has failed. For this reason, features of\ninterest to distributed system designers, such as fault tolerance, redundancy,\nand idempotency, are not emphasized by classical software systems.\nIn a distributed system, any computer can theoretically talk to any other\ncomputer. However, it is useful to divide them conceptually into clients and\nservers. Clients send requests to servers. Servers are expected return a\nresponse to the client.\nThere are protocols 5 that describe how information moves between\ncomputers. The next section begins with an explanation of remote procedure calls.\nDistributed systems"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#remote-procedure-calls",
        "title": "PyMechanical architecture > Remote procedure calls",
        "section": "Remote procedure calls",
        "text": "When one computer invokes a procedure on another computer using a network, it\nis said to have done an RPC. Unlike a normal procedure call, it can be\nunreliable and orders of magnitude slower. There also needs to be a handshake\nso that both sides understand how to interpret the bytes that move between\ncomputers 6. This handshake can be negotiated byte-per-byte, but in\npractice, the internet protocols provide useful conventions and standards that\nhave been tried and tested.\nWhile standards are useful, it is not practical for every developer to craft\npackets to send over the wire by hand. In many programming languages, libraries,\nand tools wrap around the most popular conventions of internet protocols. These\nlibraries and tools can be opinionated in how RPCs can and should be written.\nSome offer low-level method invocation facilities, like gRPC and zeroMQ. Others\ntake a view on how RPCs should be done. Two such views are Representational\nState Transfer (REST) and Remote Method Invocation (RMI).\nRemote procedure calls"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#rest",
        "title": "PyMechanical architecture > REST",
        "section": "REST",
        "text": "The design principles of REST are often credited as being responsible for the\ninfinite scalability of the internet. It can be thought of as a set of styles\nor constraints that most web apps comply with or at least try to. Since REST\nis not an official standard, it can be implemented on any protocol. Since it\nwas designed for HTTP, it is usually associated with it and its direct\ndescendants 7. However, the principles of REST can be applied on any\nprotocol.\nApplications that conform to REST are said to provide RESTful APIs. For a more\ndetailed description, see What is a REST API on the Red Hat\nTechnology Topics page.\nREST"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#remote-method-invocation",
        "title": "PyMechanical architecture > Remote method invocation",
        "section": "Remote method invocation",
        "text": "In the nineties, Object Oriented Programming (OOP) exploded in popularity.\nAmong other things, OOP allows programmers to add abstractions on top of data\nin their code using objects. When done well, objects can reduce code complexity\nand makes large scale software easier to reason about. It was thought that even\nthe difference between RPCs and calls made in a program’s address space could\nbe abstracted. In effect, the user of an object does not need to know whether\nan object exists remotely or locally. Operations on that object could be done\nin the same way, regardless.\nThis approach is known as Remote Method Invocation (RMI). RMI was widely\nimplemented using CORBA, DCOM, Remoting (.NET), and Java RMI. However, this\napproach has fallen out of favor with the rise of the internet, as it was\nobserved that it does not scale in the same way that something like REST does.\nAs it became less popular, tools, and library support fell away. For instance,\nrecent versions of .NET do not implement the Remoting library, and COM/DCOM are\nno longer taken seriously by web apps.\nFor an illuminating discussion of the problems with RMI, see Microservices and\nthe First Law of Distributed Objects on\nMartin Fowler’s website.\nRemote method invocation"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#remote-mechanical",
        "title": "PyMechanical architecture > Remote mechanical",
        "section": "Remote mechanical",
        "text": "Mechanical’s official API is that of an object model, and PyMechanical provides\nexactly that API to Python. Because object models are not suitable as remote\nAPIs, PyMechanical does not provide that API in a remote fashion. This is why\nthe remote session API is based on strings, while the embedded instance API can\nprovide the Mechanical API directly to Python.\nRemote mechanical"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#a-different-remote-interface",
        "title": "PyMechanical architecture > A different remote interface",
        "section": "A different remote interface",
        "text": "An alternative remote API for Mechanical is practical so long as it is not\nusing RMI. In fact, Mechanical uses a REST API internally as part of its GUI.\nThis is not the official Mechanical API and is not currently documented. A new\nremote interface for Mechanical is not an immediate goal of PyMechanical.\nA different remote interface"
    },
    {
        "objectID": "architecture",
        "href": "architecture.html#using-pymechanical-in-a-distributed-system",
        "title": "PyMechanical architecture > Using PyMechanical in a distributed system",
        "section": "Using PyMechanical in a distributed system",
        "text": "You can still build a distributed system where Mechanical is run remotely using\nthe embedded instance of Mechanical in PyMechanical. For this to work, Python\nitself would run remotely, and therefore the embedded instance would run\nremotely. The communication across the network in that system would be done in\nPython.\nThis means that it is implemented using more than one programming language.\nThe Python programming language is in fact only a specification of a language. CPython is the reference implementation developed by the creator of Python. There are others, including IronPython, PyPy, Cinder, and GraalPy.\nIronPython is an implementation of the Python programming language using the DLR from .NET. It does not implement the Python/C API, which is why many Python packages cannot run within IronPython. It also currently only implements Python2.7.\nUndo and redo are often implemented using a command pattern. They store all executed commands in a stack. Each command not only has the ability to execute, it also has the ability to undo itself. Undo and redo are then implemented by walking up and down the stack and executing the Command or its inverse function.\nThe Internet Protocol (IP) model is a layered description and specification that describes how information moves on the internet.\nActually, for normal procedure calls within an address space, there needs to be a similar handshake about how the inputs and arguments are passed. This is called a calling convention, and describes what to do with CPU registers.\nHTTPS, HTTP/2, and HTTP/3.\nUsing PyMechanical in a distributed system"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalExitedError",
        "href": "api/ansys/mechanical/core/errors/MechanicalExitedError.html#mechanicalexitederror",
        "title": "MechanicalExitedError",
        "section": "MechanicalExitedError",
        "text": "Bases: RuntimeError\nRaises an error when Mechanical has exited.\nMechanicalExitedError\nMechanicalExitedError\nRuntimeError"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalExitedError",
        "href": "api/ansys/mechanical/core/errors/MechanicalExitedError.html#ansys.mechanical.core.errors.MechanicalExitedError",
        "title": "MechanicalExitedError > MechanicalExitedError > MechanicalExitedError",
        "section": "MechanicalExitedError > MechanicalExitedError",
        "text": "exception ansys.mechanical.core.errors.MechanicalExitedError(msg='Mechanical has exited.')\n\nBases: RuntimeError\n\nRaises an error when Mechanical has exited.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/MechanicalExitedError",
        "href": "api/ansys/mechanical/core/errors/MechanicalExitedError.html#import-detail",
        "title": "MechanicalExitedError > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.errors import MechanicalExitedError\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#transaction",
        "title": "Transaction",
        "section": "Transaction",
        "text": "A class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\nTransaction\nTransaction"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#ansys.mechanical.core.embedding.transaction.Transaction",
        "title": "Transaction > Transaction > Transaction",
        "section": "Transaction > Transaction",
        "text": "class ansys.mechanical.core.embedding.transaction.Transaction\n\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#overview",
        "title": "Transaction > Overview",
        "section": "Overview",
        "text": "__enter__\nEnter the context of the transaction.\n__exit__\nExit the context of the transaction and disposes of resources.\nOverview\n__enter__\n__exit__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#import-detail",
        "title": "Transaction > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.transaction import Transaction\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#method-detail",
        "title": "Transaction > Method detail",
        "section": "Method detail",
        "text": "Enter the context of the transaction.\nExit the context of the transaction and disposes of resources.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#Transaction.__enter__",
        "title": "Transaction > Method detail > __enter__",
        "section": "Method detail > __enter__",
        "text": "Transaction.__enter__()\n\nEnter the context of the transaction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/Transaction",
        "href": "api/ansys/mechanical/core/embedding/transaction/Transaction.html#Transaction.__exit__",
        "title": "Transaction > Method detail > __exit__",
        "section": "Method detail > __exit__",
        "text": "Transaction.__exit__(exc_type, exc_val, exc_tb)\n\nExit the context of the transaction and disposes of resources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/path",
        "href": "api/path.html#ansys-tools-path",
        "title": "Ansys tools path",
        "section": "Ansys tools path",
        "text": "These methods on the ansys-tools-path module provide helper functions for configuration and discovery\nof the installation path of the Mechanical application.\nfind_mechanical([version, supported_versions])\nSearch for the Mechanical path in the standard installation location.\nget_mechanical_path([allow_input, version, find])\nAcquires Ansys Mechanical Path\nchange_default_mechanical_path(exe_loc)\nChange your default Mechanical path.\nsave_mechanical_path([exe_loc, allow_prompt])\nFind the Mechanical path or query user.\nAnsys tools path\nansys-tools-path\nfind_mechanical\nget_mechanical_path\nchange_default_mechanical_path\nsave_mechanical_path"
    },
    {
        "objectID": "user_guide_session/index",
        "href": "user_guide_session/index.html#remote-session",
        "title": "Remote session",
        "section": "Remote session",
        "text": "This section  provides an overview of how you use PyMechanical as a client\nto a remote Mechanical session.\nRemote session"
    },
    {
        "objectID": "user_guide_session/index",
        "href": "user_guide_session/index.html#overview",
        "title": "Remote session > Overview",
        "section": "Overview",
        "text": "The launch_mechanical() method\ncreates an instance of the Mechanical\nclass in the background and sends commands to it as a service. Because errors and warnings\nare processed Pythonically, you can develop a script in real time without worrying about\nwhether the script runs correctly when deployed in batch mode.\nHere is how you use the launch_mechanical() method to launch Mechanical from Python in gRPC mode:\nIf multiple versions of product are installed, then you can use exec_file argument\nto select the version of the product to launch.\nIf batch option is set to True Mechanical is launched without GUI. The cleanup_on_exit\noption decides whether product exits at the end of the PyMechanical script or not.\nversion argument is used only if PyPIM is configured. For general cases, use exec_file\nYou can send genuine Python class commands to the application when Mechanical is active.\nFor example, you can send a Python script:\nMechanical interactively returns the result of each command that you send,\nsaving the result to the logging module.\nErrors are caught immediately. In the following code, an invalid command is sent,\nand an error is raised:\nBecause the error is caught immediately, you can write your Mechanical scripts in\nPython, run them interactively, and then run them in batch without worrying if the\nscripts run correctly. This would not be the case if you had instead outputted the\nscripts that you wrote to script files.\nThe Mechanical class supports\nmuch more than sending text to Mechanical. It includes higher-level wrapping\nthat provides for better scripting and interaction with Mechanical. For information\non advanced methods for interacting with Mechanical, see ref_examples.\nOverview\nexec_file\nbatch\nTrue\ncleanup_on_exit\nversion\nexec_file"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/index",
        "href": "api/ansys/mechanical/core/embedding/index.html#the-embedding-package",
        "title": "The embedding package",
        "section": "The embedding package",
        "text": "The embedding package\nembedding"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/index",
        "href": "api/ansys/mechanical/core/embedding/index.html#summary",
        "title": "The embedding package > Summary",
        "section": "Summary",
        "text": "logger\nEmbedding logger.\nrpc\nRPC and Mechanical service implementation.\nviz\nNamespace module for embedding visualization.\naddins\nConfiguration system for embedded mechanical.\napp\nMain application class for embedded Mechanical.\napp_libraries\nSystem to add python libraries shipped with mechanical to the path.\nappdata\nTemporary Appdata for Ansys Mechanical.\nbackground\nClass for running Mechanical on a background thread.\ncleanup_gui\nClean up temporary mechdb files after GUI is closed.\nenum_importer\nLibrary to import Mechanical enums.\nglobal_importer\nImport Mechanical globals.\nimports\nAdditional imports for embedded Mechanical.\ninitializer\nInitializer for Mechanical embedding. Sets up paths and resolvers.\nloader\nclr_loader for pymechanical embedding. This loads the CLR on both windows and linux.\nmessages\nMessage Manager for App.\nposter\nUse the Poster class to post functions to Mechanical’s main thread.\nresolver\nThis is the .NET assembly resolving for embedding Ansys Mechanical.\nruntime\nRuntime initialize for pythonnet in embedding.\nshims\nShims for embedded Mechanical.\ntransaction\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\nui\nRun Mechanical UI from Python.\nutils\nMiscellaneous utilities.\nwarnings\nHook to register obsolete warnings.\nSummary\nlogger\nrpc\nviz\naddins\napp\napp_libraries\nappdata\nbackground\ncleanup_gui\nenum_importer\nglobal_importer\nimports\ninitializer\nloader\nmessages\nposter\nresolver\nruntime\nshims\ntransaction\nui\nutils\nwarnings"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/index",
        "href": "api/ansys/mechanical/core/embedding/index.html#description",
        "title": "The embedding package > Description",
        "section": "Description",
        "text": "Imports for the embedding sub-package.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/index.html#the-linux_apipy-module",
        "title": "The linux_api.py module",
        "section": "The linux_api.py module",
        "text": "The linux_api.py module\nlinux_api.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/index.html#summary",
        "title": "The linux_api.py module > Summary",
        "section": "Summary",
        "text": "APIBackend\nProvides the API backend for the Mechanical logging system.\nSummary\nAPIBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/index.html#description",
        "title": "The linux_api.py module > Description",
        "section": "Description",
        "text": "Internal Mechanical logging Linux API.\nThe Linux API is needed for version 2023 R2, where the .NET backend is Windows-only.\nThis API does not support some options, namely the base directory and log filename.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/index.html#the-clientpy-module",
        "title": "The client.py module",
        "section": "The client.py module",
        "text": "The client.py module\nclient.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/index.html#summary",
        "title": "The client.py module > Summary",
        "section": "Summary",
        "text": "Client\nClient for connecting to Mechanical services.\nSummary\nClient"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/index.html#description",
        "title": "The client.py module > Description",
        "section": "Description",
        "text": "Client for Mechanical services.\nDescription"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyMechanical.\nThe following contribution information is specific to PyMechanical.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository-and-install-project-dependencies",
        "title": "Contribute > Clone the repository and install project dependencies",
        "section": "Clone the repository and install project dependencies",
        "text": "To clone and install the latest PyMechanical release in development mode, run\nthese commands:\nClone the repository and create a virtual environment:\nActivate the virtual environment:\nInstall tools and dependencies:\nClone the repository and install project dependencies"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#test-pymechanical",
        "title": "Contribute > Test PyMechanical",
        "section": "Test PyMechanical",
        "text": "PyMechanical uses PyTest and tox for unit testing. Prior to running the tests,\nensure Mechanical is installed on your system with a valid license and the test\ndependencies are installed. Run this command to install the test dependencies:\nTest PyMechanical"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#using-pytest",
        "title": "Contribute > Using pytest",
        "section": "Using pytest",
        "text": "To run the tests, navigate to the root directory of the repository and run this command:\nThe pytest command runs all of the tests in the tests folder. After pytest is\ndone running, it shows the test coverage of each of the files in the repository. To run\nspecific tests, run these commands:\nSee the pyproject.toml file for a full list of markers (-m) and their descriptions.\nTo run specific tests based on a keyword, use the -k argument:\nUsing pytest\npytest\npytest\ntests\npytest\npyproject.toml\n-k"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#using-tox",
        "title": "Contribute > Using tox",
        "section": "Using tox",
        "text": "This project takes advantage of tox. This tool automates common development\ntasks (similar to Makefile), but it is oriented towards Python development.\nWhile Makefile has rules, tox has environments. In fact, tox\ncreates its own virtual environment so that anything being tested is isolated\nfrom the project to guarantee the project’s integrity.\nThe following environment commands are provided:\ntox -e style: Checks for coding style quality.\ntox -e py: Checks for unit tests.\ntox -e py-coverage: Checks for unit testing and code coverage.\ntox -e doc: Checks for documentation-building process.\nUsing tox\ntox\nMakefile\nMakefile\ntox\ntox\ntox -e style\ntox -e py\ntox -e py-coverage\ntox -e doc"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#remote-testing",
        "title": "Contribute > Remote testing",
        "section": "Remote testing",
        "text": "If you do not have a licensed copy of Mechanical installed locally but want to\nrun PyMechanical unit tests on a remote instance, you must set up environment\nvariables.\nOn Linux\nOn Windows\nThe environment variables for your operating system tell PyMechanical\nto attempt to connect to the existing Mechanical service by default\nwhen you use the launch_mechanical()\nmethod.\nRemote testing\nlaunch_mechanical()"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-coding-style",
        "title": "Contribute > Adhere to coding style",
        "section": "Adhere to coding style",
        "text": "As indicated in Coding style\nin the PyAnsys Developer’s Guide, PyMechanical follows PEP8 guidelines. PyMechanical\nimplements pre-commit for style checking.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nAdhere to coding style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#documentation",
        "title": "Contribute > Documentation",
        "section": "Documentation",
        "text": "For building documentation, you can run the usual rules provided in the\nSphinx make file:\nHowever, the recommended way of checking documentation integrity is to use\ntox:\nDocumentation\nmake\ntox"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-documentation",
        "title": "Contribute > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PyMechanical is hosted at\nPyMechanical Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyMechanical Issues\npage to submit questions, report bugs, and request new features. When possible,\nuse these templates:\nFile a bug report\nFile a documentation issue\nRequest a feature\nAdd an example\nPost all other issues\nIf your issue does not fit into one of these template categories, create your own issue.\nPost issues"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/shims/index",
        "href": "api/ansys/mechanical/core/embedding/shims/index.html#the-shimspy-module",
        "title": "The shims.py module",
        "section": "The shims.py module",
        "text": "The shims.py module\nshims.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/shims/index",
        "href": "api/ansys/mechanical/core/embedding/shims/index.html#summary",
        "title": "The shims.py module > Summary",
        "section": "Summary",
        "text": "import_materials\nImport material from matml file.\nSummary\nimport_materials"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/shims/index",
        "href": "api/ansys/mechanical/core/embedding/shims/index.html#description",
        "title": "The shims.py module > Description",
        "section": "Description",
        "text": "Shims for embedded Mechanical.\nThese shims are used when APIs are released in newer versions of Mechanical,\nbut workarounds exist in an older release\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/shims/index",
        "href": "api/ansys/mechanical/core/embedding/shims/index.html#module-detail",
        "title": "The shims.py module > Module detail",
        "section": "Module detail",
        "text": "Import material from matml file.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/shims/index",
        "href": "api/ansys/mechanical/core/embedding/shims/index.html#shims.import_materials",
        "title": "The shims.py module > Module detail > import_materials",
        "section": "Module detail > import_materials",
        "text": "shims.import_materials(app: ansys.mechanical.core.embedding.Application, material_file: str) -> None\n\nImport material from matml file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/index",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/index.html#the-environpy-module",
        "title": "The environ.py module",
        "section": "The environ.py module",
        "text": "The environ.py module\nenviron.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/index",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/index.html#summary",
        "title": "The environ.py module > Summary",
        "section": "Summary",
        "text": "EnvironBackend\nProvides the environment variable backend for Mechanical logging.\nSummary\nEnvironBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/index",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/index.html#description",
        "title": "The environ.py module > Description",
        "section": "Description",
        "text": "Environment variables for mechanical logging.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Provides the Logger class for embedding.\nLogger\nLogger\nLogger"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#ansys.mechanical.core.embedding.logger.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.mechanical.core.embedding.logger.Logger\n\nProvides the Logger class for embedding.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "flush\nFlush the log.\ncan_log_message\nGet whether a message at this level is logged.\ndebug\nWrite a debug message to the log.\nerror\nWrite a error message to the log.\ninfo\nWrite an info message to the log.\nwarning\nWrite a warning message to the log.\nfatal\nWrite a fatal message to the log.\nOverview\nflush\ncan_log_message\ndebug\nerror\ninfo\nwarning\nfatal"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger import Logger\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Flush the log.\nGet whether a message at this level is logged.\nWrite a debug message to the log.\nWrite a error message to the log.\nWrite an info message to the log.\nWrite a warning message to the log.\nWrite a fatal message to the log.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.flush",
        "title": "Logger > Method detail > flush",
        "section": "Method detail > flush",
        "text": "classmethod Logger.flush()\n\nFlush the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.can_log_message",
        "title": "Logger > Method detail > can_log_message",
        "section": "Method detail > can_log_message",
        "text": "classmethod Logger.can_log_message(level: int) -> bool\n\nGet whether a message at this level is logged.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.debug",
        "title": "Logger > Method detail > debug",
        "section": "Method detail > debug",
        "text": "classmethod Logger.debug(msg: str)\n\nWrite a debug message to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.error",
        "title": "Logger > Method detail > error",
        "section": "Method detail > error",
        "text": "classmethod Logger.error(msg: str)\n\nWrite a error message to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.info",
        "title": "Logger > Method detail > info",
        "section": "Method detail > info",
        "text": "classmethod Logger.info(msg: str)\n\nWrite an info message to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.warning",
        "title": "Logger > Method detail > warning",
        "section": "Method detail > warning",
        "text": "classmethod Logger.warning(msg: str)\n\nWrite a warning message to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/Logger",
        "href": "api/ansys/mechanical/core/embedding/logger/Logger.html#Logger.fatal",
        "title": "Logger > Method detail > fatal",
        "section": "Method detail > fatal",
        "text": "classmethod Logger.fatal(msg: str)\n\nWrite a fatal message to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/index",
        "href": "api/ansys/mechanical/core/embedding/addins/index.html#the-addinspy-module",
        "title": "The addins.py module",
        "section": "The addins.py module",
        "text": "The addins.py module\naddins.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/index",
        "href": "api/ansys/mechanical/core/embedding/addins/index.html#summary",
        "title": "The addins.py module > Summary",
        "section": "Summary",
        "text": "AddinConfiguration\nConfiguration class for Mechanical.\nSummary\nAddinConfiguration"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/addins/index",
        "href": "api/ansys/mechanical/core/embedding/addins/index.html#description",
        "title": "The addins.py module > Description",
        "section": "Description",
        "text": "Configuration system for embedded mechanical.\nDescription"
    },
    {
        "objectID": "kil/index",
        "href": "kil/index.html#known-issues-and-limitations",
        "title": "Known issues and limitations",
        "section": "Known issues and limitations",
        "text": "Note the following known issues and limitations. Some features may not be fully compatible across different versions of Mechanical and PyMechanical.\nAnsys recommends that you always use the latest version of both to achieve the best results.\nKnown issues and limitations of Standalone Mechanical\nKnown issues and limitations of PyMechanical\nKnown issues and limitations"
    },
    {
        "objectID": "kil/index",
        "href": "kil/index.html#support",
        "title": "Known issues and limitations > Support",
        "section": "Support",
        "text": "If you encounter any issues or limitations with PyMechanical that hinder your work, please create\nan issue or discussion so our team can address them promptly:\nPyMechanical Issues: Report bugs and request new features.\nPyMechanical Discussions: Post questions, share ideas, and get community feedback.\nFor issues pertaining to Mechanical scripting,\nplease make a post on the Ansys Developer Forum for Mechanical.\nIf you have general questions about PyAnsys or are unsure which repository to place an issue in,\nemail pyansys.core@ansys.com.\nSupport"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Here are examples using Mechanical with the ansys-mechanical-core library through\nan embedded instance or remote session.\nUses PyMechanical to embed an instance of Mechanical directly within Python as a Python object.\nUses PyMechanical as a client to a remote Mechanical instance.\nDemonstrates the same model setup in both an embedded instance and remote session,\nas well as examples using a combination of embedded instances and remote sessions.\nExamples\nansys-mechanical-core"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#the-mechanicalpy-module",
        "title": "The mechanical.py module",
        "section": "The mechanical.py module",
        "text": "The mechanical.py module\nmechanical.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#summary",
        "title": "The mechanical.py module > Summary",
        "section": "Summary",
        "text": "Mechanical\nConnects to a gRPC Mechanical server and allows commands to be passed.\nsetup_logger\nInitialize the logger for the given mechanical instance.\nsuppress_logging\nDecorate a function to suppress the logging for a Mechanical instance.\nport_in_use\nCheck whether a port is in use at the given host.\ncheck_ports\nCheck the state of ports in a port range.\nclose_all_local_instances\nClose all Mechanical instances within a port range.\ncreate_ip_file\nCreate the mylocal.ip file needed to change the IP address of the gRPC server.\nget_mechanical_path\nGet path.\ncheck_valid_mechanical\nChange to see if the default Mechanical path is valid.\nchange_default_mechanical_path\nChange default path.\nsave_mechanical_path\nSave path.\nget_start_instance\nCheck if the PYMECHANICAL_START_INSTANCE environment variable exists and is valid.\nlaunch_grpc\nStart Mechanical locally in gRPC mode.\nlaunch_remote_mechanical\nStart Mechanical remotely using the Product Instance Management (PIM) API.\nlaunch_mechanical\nStart Mechanical locally.\nconnect_to_mechanical\nConnect to an existing Mechanical server instance.\nclient_to_server_loglevel\nMAX_MESSAGE_LENGTH\nDefault message length.\nDEFAULT_CHUNK_SIZE\nDefault chunk size.\nDEFAULT_FILE_CHUNK_SIZE\nDefault file chunk size.\nLOCALHOST\nLocalhost address.\nMECHANICAL_DEFAULT_PORT\nDefault Mechanical port.\nGALLERY_INSTANCE\nList of gallery instances.\nSummary\nMechanical\nsetup_logger\nsuppress_logging\nport_in_use\ncheck_ports\nclose_all_local_instances\ncreate_ip_file\nmylocal.ip\nget_mechanical_path\ncheck_valid_mechanical\nchange_default_mechanical_path\nsave_mechanical_path\nget_start_instance\nPYMECHANICAL_START_INSTANCE\nlaunch_grpc\nlaunch_remote_mechanical\nlaunch_mechanical\nconnect_to_mechanical\nclient_to_server_loglevel\nMAX_MESSAGE_LENGTH\nDEFAULT_CHUNK_SIZE\nDEFAULT_FILE_CHUNK_SIZE\nLOCALHOST\nMECHANICAL_DEFAULT_PORT\nGALLERY_INSTANCE"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#description",
        "title": "The mechanical.py module > Description",
        "section": "Description",
        "text": "Connect to Mechanical gRPC server and issues commands.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#module-detail",
        "title": "The mechanical.py module > Module detail",
        "section": "Module detail",
        "text": "Initialize the logger for the given mechanical instance.\nDecorate a function to suppress the logging for a Mechanical instance.\nCheck whether a port is in use at the given host.\nYou must actually bind the address. Just checking if you can create\na socket is insufficient because it is possible to run into permission\nerrors like:\nCheck the state of ports in a port range.\nClose all Mechanical instances within a port range.\nYou can use this method when cleaning up from a failed pool or\nbatch run.\nList of a range of ports to use when cleaning up Mechanical. The\ndefault is None, in which case the ports managed by\nPyMechanical are used.\nWhether to use threads to close the Mechanical instances.\nThe default is True. So this call will return immediately.\nClose all Mechanical instances connected on local ports.\nCreate the mylocal.ip file needed to change the IP address of the gRPC server.\nGet path.\nDeprecated - use ansys.tools.path.get_mechanical_path instead\nChange to see if the default Mechanical path is valid.\nChange default path.\nDeprecated - use ansys.tools.path.change_default_mechanical_path instead.\nSave path.\nDeprecated - use ansys.tools.path.save_mechanical_path instead.\nCheck if the PYMECHANICAL_START_INSTANCE environment variable exists and is valid.\nValue to return when PYMECHANICAL_START_INSTANCE is unset.\nTrue when the PYMECHANICAL_START_INSTANCE environment variable exists\nand is valid, False when this environment variable does not exist or is not valid.\nIf it is unset, start_instance_default is returned.\nRaised when PYMECHANICAL_START_INSTANCE is not either True or False\n(case independent).\nStart Mechanical locally in gRPC mode.\nPath for the Mechanical executable file.  The default is None, in which\ncase the cached location is used.\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical is launched in UI mode.\nPort to launch the Mechanical instance on. The default is\nMECHANICAL_DEFAULT_PORT. The final port is the first\nport available after (or including) this port.\nList of additional arguments to pass. The default is None.\nDictionary of additional environment variables to pass. The default\nis None.\nWhether to print all output when launching and running Mechanical. The\ndefault is False. Printing all output is not recommended unless\nyou are debugging the startup of Mechanical.\nPort number that the Mechanical instance started on.\nIf PYMECHANICAL_START_INSTANCE is set to FALSE, the launch_mechanical\nmethod looks for an existing instance of Mechanical at PYMECHANICAL_IP on port\nPYMECHANICAL_PORT, with default to 127.0.0.1 and 10000 if unset.\nThis is typically used for automated documentation and testing.\nLaunch Mechanical using the default configuration.\nLaunch Mechanical using a specified executable file.\nStart Mechanical remotely using the Product Instance Management (PIM) API.\nWhen calling this method, you must ensure that you are in an environment\nwhere PyPIM is configured. You can use the\npypim.is_configured\nmethod to verify that PyPIM is configured.\nMechanical version to run in the three-digit format. For example, \"251\" to\nrun 2025 R1. The default is None, in which case the server runs the latest\ninstalled version.\nStart Mechanical locally.\nWhether to allow user input when discovering the path to the Mechanical\nexecutable file.\nPath for the Mechanical executable file. The default is None,\nin which case the cached location is used. If PyPIM is configured\nand this parameter is set to None, PyPIM launches Mechanical\nusing its version parameter.\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical launches in UI mode.\nLevel of messages to print to the console.\nOptions are:\n\"WARNING\": Prints only Ansys warning messages.\n\"ERROR\": Prints only Ansys error messages.\n\"INFO\": Prints all Ansys messages.\nThe default is WARNING.\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\nAdditional switches for Mechanical. The default is None.\nDictionary of additional environment variables to pass. The default\nis None.\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\nPort to launch the Mechanical gRPC server on. The default is None,\nin which case 10000 is used. The final port is the first\nport available after (or including) this port. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\nIP address to use only when start_instance is False. The\ndefault is None, in which case \"127.0.0.1\" is used. If you\nprovide an IP address, start_instance is set to False.\nA host name can be provided as an alternative to an IP address.\nWhether to launch and connect to a new Mechanical instance. The default\nis None, in which case an attempt is made to connect to an existing\nMechanical instance at the given ip and port parameters, which have\ndefaults of \"127.0.0.1\" and 10000 respectively. When True,\na local instance of Mechanical is launched. You can override the default\nbehavior of this parameter with the PYMECHANICAL_START_INSTANCE=FALSE\nenvironment variable.\nWhether to enable printing of all output when launching and running\na Mechanical instance. The default is False. This parameter should be\nset to True for debugging only as output can be tracked within\nPyMechanical.\nWhen start_instance is False, whether to clear the environment\nwhen connecting to Mechanical. The default is False. When True,\na fresh environment is provided when you connect to Mechanical.\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\nMechanical version to run in the three-digit format. For example, \"251\"\nfor 2025 R1. The default is None, in which case the server runs the\nlatest installed version. If PyPIM is configured and exec_file=None,\nPyPIM launches Mechanical using its version parameter.\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\nInstance of Mechanical.\nIf the environment is configured to use PyPIM\nand start_instance=True, then starting the instance is delegated to PyPIM.\nIn this case, most of the preceding parameters are ignored because the server-side\nconfiguration is used.\nLaunch Mechanical.\nLaunch Mechanical using a specified executable file.\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001.\nConnect to an existing Mechanical server instance.\nIP address for connecting to an existing Mechanical instance. The\nIP address defaults to \"127.0.0.1\".\nPort to listen on for an existing Mechanical instance. The default is None,\nin which case 10000 is used. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\nLevel of messages to print to the console.\nOptions are:\n\"WARNING\": Prints only Ansys warning messages.\n\"ERROR\": Prints only Ansys error messages.\n\"INFO\": Prints all Ansys messages.\nThe default is WARNING.\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\nWhether to clear the Mechanical instance when connecting. The default is False.\nWhen True, a fresh environment is provided when you connect to Mechanical.\nWhether to exit Mechanical when Python exits. The default is False.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\nInstance of Mechanical.\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001..\nDefault message length.\nDefault chunk size.\nDefault file chunk size.\nLocalhost address.\nDefault Mechanical port.\nList of gallery instances.\nModule detail\npython:list\noptional\nNone\noptional\nTrue\nmylocal.ip\nPYMECHANICAL_START_INSTANCE\noptional\nPYMECHANICAL_START_INSTANCE\nTrue\nPYMECHANICAL_START_INSTANCE\nFalse\nstart_instance_default\nOSError\nPYMECHANICAL_START_INSTANCE\nTrue\nFalse\npython:str\noptional\nNone\noptional\nTrue\nFalse\npython:int\noptional\nMECHANICAL_DEFAULT_PORT\npython:list\noptional\nNone\ndictionary\noptional\nNone\noptional\nFalse\npython:int\nPYMECHANICAL_START_INSTANCE\nlaunch_mechanical\nPYMECHANICAL_IP\nPYMECHANICAL_PORT\n127.0.0.1\n10000\npypim.is_configured\npython:str\noptional\n\"251\"\nNone\nTuple\ncontaining\nchannel\npython:str\noptional\nNone\nNone\nversion\noptional\nTrue\nFalse\npython:str\noptional\n\"WARNING\"\n\"ERROR\"\n\"INFO\"\nWARNING\noptional\nlogs.log\nFalse\npython:str\noptional\nNone\n\"log_mechanical='pymechanical_log.txt'\"\npython:list\noptional\nNone\ndictionary\noptional\nNone\npython:float\noptional\n120\npython:int\noptional\nNone\n10000\nPYMECHANICAL_PORT=<VALID PORT>\npython:str\noptional\nstart_instance\nFalse\nNone\n\"127.0.0.1\"\nstart_instance\nFalse\noptional\nNone\nip\nport\n\"127.0.0.1\"\n10000\nTrue\nPYMECHANICAL_START_INSTANCE=FALSE\noptional\nFalse\nTrue\noptional\nstart_instance\nFalse\nFalse\nTrue\noptional\nTrue\nFalse\npython:str\noptional\n\"251\"\nNone\nexec_file=None\nversion\noptional\nTrue\nansys.mechanical.core.mechanical.Mechanical\nstart_instance=True\n192.168.1.30\n50001\npython:str\noptional\n\"127.0.0.1\"\npython:int\noptional\nNone\n10000\nPYMECHANICAL_PORT=<VALID PORT>\npython:str\noptional\n\"WARNING\"\n\"ERROR\"\n\"INFO\"\nWARNING\noptional\nlogs.log\nFalse\npython:str\noptional\nNone\n\"log_mechanical='pymechanical_log.txt'\"\npython:float\noptional\n120\noptional\nFalse\nTrue\noptional\nFalse\nFalse\noptional\nTrue\nansys.mechanical.core.mechanical.Mechanical\n192.168.1.30\n50001"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.setup_logger",
        "title": "The mechanical.py module > Module detail > setup_logger",
        "section": "Module detail > setup_logger",
        "text": "mechanical.setup_logger(loglevel='INFO', log_file=True, mechanical_instance=None)\n\nInitialize the logger for the given mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.suppress_logging",
        "title": "The mechanical.py module > Module detail > suppress_logging",
        "section": "Module detail > suppress_logging",
        "text": "mechanical.suppress_logging(func)\n\nDecorate a function to suppress the logging for a Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.port_in_use",
        "title": "The mechanical.py module > Module detail > port_in_use",
        "section": "Module detail > port_in_use",
        "text": "mechanical.port_in_use(port, host=LOCALHOST)\n\nCheck whether a port is in use at the given host.\n\nYou must actually bind the address. Just checking if you can create\na socket is insufficient because it is possible to run into permission\nerrors like:\n\nAn attempt was made to access a socket in a way forbidden by its\naccess permissions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.check_ports",
        "title": "The mechanical.py module > Module detail > check_ports",
        "section": "Module detail > check_ports",
        "text": "mechanical.check_ports(port_range, ip='localhost')\n\nCheck the state of ports in a port range.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.close_all_local_instances",
        "title": "The mechanical.py module > Module detail > close_all_local_instances",
        "section": "Module detail > close_all_local_instances",
        "text": "mechanical.close_all_local_instances(port_range=None, use_thread=True)\n\nClose all Mechanical instances within a port range.\n\nYou can use this method when cleaning up from a failed pool or\nbatch run.\n\nParameters\n\nport_range\n\npython:list, optional\n\nList of a range of ports to use when cleaning up Mechanical. The\ndefault is None, in which case the ports managed by\nPyMechanical are used.\n\nuse_thread\n\nbool, optional\n\nWhether to use threads to close the Mechanical instances.\nThe default is True. So this call will return immediately.\n\nExamples\n\nClose all Mechanical instances connected on local ports.\n\n>>> import ansys.mechanical.core as pymechanical\n>>> pymechanical.close_all_local_instances()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.create_ip_file",
        "title": "The mechanical.py module > Module detail > create_ip_file",
        "section": "Module detail > create_ip_file",
        "text": "mechanical.create_ip_file(ip, path)\n\nCreate the mylocal.ip file needed to change the IP address of the gRPC server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.get_mechanical_path",
        "title": "The mechanical.py module > Module detail > get_mechanical_path",
        "section": "Module detail > get_mechanical_path",
        "text": "mechanical.get_mechanical_path(allow_input=True)\n\nGet path.\n\nDeprecated - use ansys.tools.path.get_mechanical_path instead\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.check_valid_mechanical",
        "title": "The mechanical.py module > Module detail > check_valid_mechanical",
        "section": "Module detail > check_valid_mechanical",
        "text": "mechanical.check_valid_mechanical()\n\nChange to see if the default Mechanical path is valid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.change_default_mechanical_path",
        "title": "The mechanical.py module > Module detail > change_default_mechanical_path",
        "section": "Module detail > change_default_mechanical_path",
        "text": "mechanical.change_default_mechanical_path(exe_loc)\n\nChange default path.\n\nDeprecated - use ansys.tools.path.change_default_mechanical_path instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.save_mechanical_path",
        "title": "The mechanical.py module > Module detail > save_mechanical_path",
        "section": "Module detail > save_mechanical_path",
        "text": "mechanical.save_mechanical_path(exe_loc=None)\n\nSave path.\n\nDeprecated - use ansys.tools.path.save_mechanical_path instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.get_start_instance",
        "title": "The mechanical.py module > Module detail > get_start_instance",
        "section": "Module detail > get_start_instance",
        "text": "mechanical.get_start_instance(start_instance_default=True)\n\nCheck if the PYMECHANICAL_START_INSTANCE environment variable exists and is valid.\n\nParameters\n\nstart_instance_default\n\nbool, optional\n\nValue to return when PYMECHANICAL_START_INSTANCE is unset.\n\nReturns\n\nbool\n\nTrue when the PYMECHANICAL_START_INSTANCE environment variable exists\nand is valid, False when this environment variable does not exist or is not valid.\nIf it is unset, start_instance_default is returned.\n\nRaises\n\nOSError\n\nRaised when PYMECHANICAL_START_INSTANCE is not either True or False\n(case independent).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.launch_grpc",
        "title": "The mechanical.py module > Module detail > launch_grpc",
        "section": "Module detail > launch_grpc",
        "text": "mechanical.launch_grpc(exec_file='', batch=True, port=MECHANICAL_DEFAULT_PORT, additional_switches=None, additional_envs=None, verbose=False) -> int\n\nStart Mechanical locally in gRPC mode.\n\nParameters\n\nexec_file\n\npython:str, optional\n\nPath for the Mechanical executable file.  The default is None, in which\ncase the cached location is used.\n\nbatch\n\nbool, optional\n\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical is launched in UI mode.\n\nport\n\npython:int, optional\n\nPort to launch the Mechanical instance on. The default is\nMECHANICAL_DEFAULT_PORT. The final port is the first\nport available after (or including) this port.\n\nadditional_switches\n\npython:list, optional\n\nList of additional arguments to pass. The default is None.\n\nadditional_envs\n\ndictionary, optional\n\nDictionary of additional environment variables to pass. The default\nis None.\n\nverbose\n\nbool, optional\n\nWhether to print all output when launching and running Mechanical. The\ndefault is False. Printing all output is not recommended unless\nyou are debugging the startup of Mechanical.\n\nReturns\n\npython:int\n\nPort number that the Mechanical instance started on.\n\nNotes\n\nIf PYMECHANICAL_START_INSTANCE is set to FALSE, the launch_mechanical\nmethod looks for an existing instance of Mechanical at PYMECHANICAL_IP on port\nPYMECHANICAL_PORT, with default to 127.0.0.1 and 10000 if unset.\nThis is typically used for automated documentation and testing.\n\nExamples\n\nLaunch Mechanical using the default configuration.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mechanical = launch_mechanical()\n\nLaunch Mechanical using a specified executable file.\n\n>>> exec_file_path = 'C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe'\n>>> mechanical = launch_mechanical(exec_file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.launch_remote_mechanical",
        "title": "The mechanical.py module > Module detail > launch_remote_mechanical",
        "section": "Module detail > launch_remote_mechanical",
        "text": "mechanical.launch_remote_mechanical(version=None)\n\nStart Mechanical remotely using the Product Instance Management (PIM) API.\n\nWhen calling this method, you must ensure that you are in an environment\nwhere PyPIM is configured. You can use the\npypim.is_configured\nmethod to verify that PyPIM is configured.\n\nParameters\n\nversion\n\npython:str, optional\n\nMechanical version to run in the three-digit format. For example, \"251\" to\nrun 2025 R1. The default is None, in which case the server runs the latest\ninstalled version.\n\nReturns\n\nTuple containing channel, remote_instance.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.launch_mechanical",
        "title": "The mechanical.py module > Module detail > launch_mechanical",
        "section": "Module detail > launch_mechanical",
        "text": "mechanical.launch_mechanical(allow_input=True, exec_file=None, batch=True, loglevel='ERROR', log_file=False, log_mechanical=None, additional_switches=None, additional_envs=None, start_timeout=120, port=None, ip=None, start_instance=None, verbose_mechanical=False, clear_on_connect=False, cleanup_on_exit=True, version=None, keep_connection_alive=True) -> Mechanical\n\nStart Mechanical locally.\n\nParameters\n\nallow_input: bool, optional\n\nWhether to allow user input when discovering the path to the Mechanical\nexecutable file.\n\nexec_file\n\npython:str, optional\n\nPath for the Mechanical executable file. The default is None,\nin which case the cached location is used. If PyPIM is configured\nand this parameter is set to None, PyPIM launches Mechanical\nusing its version parameter.\n\nbatch\n\nbool, optional\n\nWhether to launch Mechanical in batch mode. The default is True.\nWhen False, Mechanical launches in UI mode.\n\nloglevel\n\npython:str, optional\n\nLevel of messages to print to the console.\nOptions are:\n\n\"WARNING\": Prints only Ansys warning messages.\n\n\"ERROR\": Prints only Ansys error messages.\n\n\"INFO\": Prints all Ansys messages.\n\nThe default is WARNING.\n\nlog_file\n\nbool, optional\n\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\n\nlog_mechanical\n\npython:str, optional\n\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\n\nadditional_switches\n\npython:list, optional\n\nAdditional switches for Mechanical. The default is None.\n\nadditional_envs\n\ndictionary, optional\n\nDictionary of additional environment variables to pass. The default\nis None.\n\nstart_timeout\n\npython:float, optional\n\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\n\nport\n\npython:int, optional\n\nPort to launch the Mechanical gRPC server on. The default is None,\nin which case 10000 is used. The final port is the first\nport available after (or including) this port. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\n\nip\n\npython:str, optional\n\nIP address to use only when start_instance is False. The\ndefault is None, in which case \"127.0.0.1\" is used. If you\nprovide an IP address, start_instance is set to False.\nA host name can be provided as an alternative to an IP address.\n\nstart_instance\n\nbool, optional\n\nWhether to launch and connect to a new Mechanical instance. The default\nis None, in which case an attempt is made to connect to an existing\nMechanical instance at the given ip and port parameters, which have\ndefaults of \"127.0.0.1\" and 10000 respectively. When True,\na local instance of Mechanical is launched. You can override the default\nbehavior of this parameter with the PYMECHANICAL_START_INSTANCE=FALSE\nenvironment variable.\n\nverbose_mechanical\n\nbool, optional\n\nWhether to enable printing of all output when launching and running\na Mechanical instance. The default is False. This parameter should be\nset to True for debugging only as output can be tracked within\nPyMechanical.\n\nclear_on_connect\n\nbool, optional\n\nWhen start_instance is False, whether to clear the environment\nwhen connecting to Mechanical. The default is False. When True,\na fresh environment is provided when you connect to Mechanical.\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is True.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\n\nversion\n\npython:str, optional\n\nMechanical version to run in the three-digit format. For example, \"251\"\nfor 2025 R1. The default is None, in which case the server runs the\nlatest installed version. If PyPIM is configured and exec_file=None,\nPyPIM launches Mechanical using its version parameter.\n\nkeep_connection_alive\n\nbool, optional\n\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\n\nReturns\n\nansys.mechanical.core.mechanical.Mechanical\n\nInstance of Mechanical.\n\nNotes\n\nIf the environment is configured to use PyPIM\nand start_instance=True, then starting the instance is delegated to PyPIM.\nIn this case, most of the preceding parameters are ignored because the server-side\nconfiguration is used.\n\nExamples\n\nLaunch Mechanical.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mech = launch_mechanical()\n\nLaunch Mechanical using a specified executable file.\n\n>>> exec_file_path = 'C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe'\n>>> mech = launch_mechanical(exec_file_path)\n\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001.\n\n>>> mech = launch_mechanical(start_instance=False, ip='192.168.1.30', port=50001)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.connect_to_mechanical",
        "title": "The mechanical.py module > Module detail > connect_to_mechanical",
        "section": "Module detail > connect_to_mechanical",
        "text": "mechanical.connect_to_mechanical(ip=None, port=None, loglevel='ERROR', log_file=False, log_mechanical=None, connect_timeout=120, clear_on_connect=False, cleanup_on_exit=False, keep_connection_alive=True) -> Mechanical\n\nConnect to an existing Mechanical server instance.\n\nParameters\n\nip\n\npython:str, optional\n\nIP address for connecting to an existing Mechanical instance. The\nIP address defaults to \"127.0.0.1\".\n\nport\n\npython:int, optional\n\nPort to listen on for an existing Mechanical instance. The default is None,\nin which case 10000 is used. You can override the\ndefault behavior of this parameter with the\nPYMECHANICAL_PORT=<VALID PORT> environment variable.\n\nloglevel\n\npython:str, optional\n\nLevel of messages to print to the console.\nOptions are:\n\n\"WARNING\": Prints only Ansys warning messages.\n\n\"ERROR\": Prints only Ansys error messages.\n\n\"INFO\": Prints all Ansys messages.\n\nThe default is WARNING.\n\nlog_file\n\nbool, optional\n\nWhether to copy the messages to a file named logs.log, which is\nlocated where the Python script is executed. The default is False.\n\nlog_mechanical\n\npython:str, optional\n\nPath to the output file on the local disk to write every script\ncommand to. The default is None. However, you might set\n\"log_mechanical='pymechanical_log.txt'\" to write all commands that are\nsent to Mechanical via PyMechanical to this file. You can then use these\ncommands to run a script within Mechanical without PyMechanical.\n\nconnect_timeout\n\npython:float, optional\n\nMaximum allowable time in seconds to connect to the Mechanical server.\nThe default is 120.\n\nclear_on_connect\n\nbool, optional\n\nWhether to clear the Mechanical instance when connecting. The default is False.\nWhen True, a fresh environment is provided when you connect to Mechanical.\n\ncleanup_on_exit\n\nbool, optional\n\nWhether to exit Mechanical when Python exits. The default is False.\nWhen False, Mechanical is not exited when the garbage for this Mechanical\ninstance is collected.\n\nkeep_connection_alive\n\nbool, optional\n\nWhether to keep the gRPC connection alive by running a background thread\nand making dummy calls for remote connections. The default is True.\n\nReturns\n\nansys.mechanical.core.mechanical.Mechanical\n\nInstance of Mechanical.\n\nExamples\n\nConnect to an existing Mechanical instance at IP address 192.168.1.30 on port\n50001..\n\n>>> from ansys.mechanical.core import connect_to_mechanical\n>>> pymech = connect_to_mechanical(ip='192.168.1.30', port=50001)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.MAX_MESSAGE_LENGTH",
        "title": "The mechanical.py module > Module detail > MAX_MESSAGE_LENGTH",
        "section": "Module detail > MAX_MESSAGE_LENGTH",
        "text": "mechanical.MAX_MESSAGE_LENGTH\n\nDefault message length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.DEFAULT_CHUNK_SIZE",
        "title": "The mechanical.py module > Module detail > DEFAULT_CHUNK_SIZE",
        "section": "Module detail > DEFAULT_CHUNK_SIZE",
        "text": "mechanical.DEFAULT_CHUNK_SIZE = 262144\n\nDefault chunk size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.DEFAULT_FILE_CHUNK_SIZE",
        "title": "The mechanical.py module > Module detail > DEFAULT_FILE_CHUNK_SIZE",
        "section": "Module detail > DEFAULT_FILE_CHUNK_SIZE",
        "text": "mechanical.DEFAULT_FILE_CHUNK_SIZE = 1048576\n\nDefault file chunk size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.LOCALHOST",
        "title": "The mechanical.py module > Module detail > LOCALHOST",
        "section": "Module detail > LOCALHOST",
        "text": "mechanical.LOCALHOST = '127.0.0.1'\n\nLocalhost address.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.MECHANICAL_DEFAULT_PORT",
        "title": "The mechanical.py module > Module detail > MECHANICAL_DEFAULT_PORT",
        "section": "Module detail > MECHANICAL_DEFAULT_PORT",
        "text": "mechanical.MECHANICAL_DEFAULT_PORT = 10000\n\nDefault Mechanical port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.GALLERY_INSTANCE",
        "title": "The mechanical.py module > Module detail > GALLERY_INSTANCE",
        "section": "Module detail > GALLERY_INSTANCE",
        "text": "mechanical.GALLERY_INSTANCE = [None]\n\nList of gallery instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/mechanical/index",
        "href": "api/ansys/mechanical/core/mechanical/index.html#mechanical.client_to_server_loglevel",
        "title": "The mechanical.py module > Module detail > client_to_server_loglevel",
        "section": "Module detail > client_to_server_loglevel",
        "text": "mechanical.client_to_server_loglevel\n\n"
    },
    {
        "objectID": "user_guide_embedding/globals",
        "href": "user_guide_embedding/globals.html#globals",
        "title": "Globals",
        "section": "Globals",
        "text": "When using Mechanical scripting APIs (in either Mechanical’s graphical user interface or when\nsending scripts to a remote session of Mechanical), there are many global variables that are\nby default usable from Python. Some of these are API entry points, like those discussed in\nref_user_guide_scripting, while others are types and namespaces that are used by the\nscripting APIs. Examples of those are the Quantity, Transaction class or the DataModel entry point.\nEmbedding Mechanical into Python is as simple as constructing an application object. This can\nnot automatically change the global variables available to the Python scope that constructed\nit. As a utility, a function that adds the API entry points is available. To use it, run the\nfollowing code:\nSome enum types are available when scripting inside of mechanical, such as SelectionTypeEnum\nor LoadDefineBy. Because these number in the thousands, by default, these enums are\nincluded in these global variables. To avoid including them, set the second argument of\nupdate_globals to False.\nGlobals\nQuantity\nTransaction\nDataModel\nSelectionTypeEnum\nLoadDefineBy\nupdate_globals"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/index",
        "href": "examples/gallery_examples/embedding_n_remote/index.html#embedding-and-remote-session-example",
        "title": "Embedding and Remote Session Example",
        "section": "Embedding and Remote Session Example",
        "text": "This code, which uses the same example, first demonstrates how to use\nan embedding instance and then demonstrates how to use a remote session.\nsphx_glr_examples_gallery_examples_embedding_n_remote_embedding_remote.py\nEmbedding and Remote Session Example"
    },
    {
        "objectID": "faq",
        "href": "faq.html#frequently-asked-questions",
        "title": "Frequently asked questions",
        "section": "Frequently asked questions",
        "text": "This section provides answers to frequently asked questions.\nYou can report issues with PyMechanical, such as bugs, feature requests,\nand documentation errors, on the PyMechanical repository’s Issues page.\nIf you want to ask more open-ended questions or are seeking advice\nfrom experts in the community, you can post on this repository’s\nDiscussions page.\nWhen you want to automate or extend Ansys Mechanical, you should\nconsider these tools:\nACT in Mechanical\nScripting in Mechanical\nPyMechanical\nAlthough all of these tools work best in interactive mode, there is increasing support\nfor batch mode. You can use the first two tools from either Ansys Workbench or from\nstandalone Mechanical.\nACT in Mechanical\nIn Mechanical, ACT is a customization framework. When specific features are missing,\nyou can add them using ACT. Of course, some of those missing features might be\nautomations or scripts of existing features. But, in many cases, they can be new\ncapabilities, such as extensions to Mechanical’s data model, the ability to connect\nto callbacks, and even integrations of external solvers.\nScripting in Mechanical\nThe Python scripting capability in Mechanical was born out of the same development\nthat brought ACT to Mechanical. This tool provides the same APIs as those used for\nPyMechanical but can only be run by Mechanical. While they use IronPython 2.7 by\ndefault, recent Mechanical versions provide a feature flag for scripting in CPython 3.x.\nMechanical’s intuitive user interface for scripting, the Mechanical Scripting View,\nprovides script recording, autocomplete, and a snippet library. However, it is possible\nto use this tool in batch mode without the Mechanical user interface.\nPyMechanical\nPyMechanical allows you to write Python scripts outside of Mechanical, with tight\nintegration with other open source modules and Ansys products. With this tool, you\nbring your own Python environment, which may contain other modules and tools. There is\nno dependency on opening the Mechanical user interface.\nAnsys Workbench is a no-code environment to set up analysis systems that can be linked\ntogether. It is part of the Ansys family of software tools for process automation and design\nexploration. This family includes Ansys OptiSLang, which may be a more natural fit\nfor integration with PyMechanical. The most popular app within the Workbench environment is\nMechanical, and for many years, Workbench was the only environment you could run Mechanical from.\nBecause Workbench is a no-code environment, a lot of the complexity around managing data\ntransfer between Ansys apps and running parametric studies is hidden. PyMechanical and\nPyAnsys libraries more broadly give you much more control over your process automation and design\nexploration. However, eliminating Workbench means that you miss out on what it handled under\nthe hood.\nIf you have trouble terminating a simulation, you do not have to close Python, reopen it, and\nclear all previous data, such as the mesh, using this code:\nSimply exiting Python should clear the solution within Python. This is because\nstopping the original process means that nothing should be present in\na new process.\nThe way that you clear all data from Mechanical in PyMechanical depends on if\nMechanical is a remote session or embedded.\nIf Mechanical is a remote session, use either the\nMechanical.clear()\nmethod or exit and restart Mechanical.\nIf Mechanical is embedded, use the\napp.new()\nmethod.\nInformation about Mechanical can be printed with remote and embedding mode:\nThe output from the above code will indicate the license being used inside the brackets, next to Ansys Mechanical.\nIf PyMechanical is unable to retrieve any license, the field will be left blank.\nAlternatively, once the app is created readonly method can be used to see if license is active.\nIf license is not checked out then it is in read only mode.\nTo use the embedded instance on Linux, mechanical-env should be invoked before\nstarting the Python shell or running a Python script.\nor\nFrequently asked questions\napp\nreadonly\nmechanical-env\nmechanical-env"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#the-usd_converterpy-module",
        "title": "The usd_converter.py module",
        "section": "The usd_converter.py module",
        "text": "The usd_converter.py module\nusd_converter.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#summary",
        "title": "The usd_converter.py module > Summary",
        "section": "Summary",
        "text": "load_into_usd_stage\nLoad mechanical scene into usd stage stage.\nto_usd_stage\nConvert mechanical scene to new usd stage and return it.\nto_usd_file\nExport mechanical scene to usd file.\nSummary\nload_into_usd_stage\nto_usd_stage\nto_usd_file"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#description",
        "title": "The usd_converter.py module > Description",
        "section": "Description",
        "text": "Converter to OpenUSD.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#module-detail",
        "title": "The usd_converter.py module > Module detail",
        "section": "Module detail",
        "text": "Load mechanical scene into usd stage stage.\nConvert mechanical scene to new usd stage and return it.\nExport mechanical scene to usd file.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#usd_converter.load_into_usd_stage",
        "title": "The usd_converter.py module > Module detail > load_into_usd_stage",
        "section": "Module detail > load_into_usd_stage",
        "text": "usd_converter.load_into_usd_stage(scene: Ansys.Mechanical.Scenegraph.GroupNode, stage: pxr.Usd.Stage) -> None\n\nLoad mechanical scene into usd stage stage.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#usd_converter.to_usd_stage",
        "title": "The usd_converter.py module > Module detail > to_usd_stage",
        "section": "Module detail > to_usd_stage",
        "text": "usd_converter.to_usd_stage(app: ansys.mechanical.core.embedding.App, name: str) -> pxr.Usd.Stage\n\nConvert mechanical scene to new usd stage and return it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/viz/usd_converter/index",
        "href": "api/ansys/mechanical/core/embedding/viz/usd_converter/index.html#usd_converter.to_usd_file",
        "title": "The usd_converter.py module > Module detail > to_usd_file",
        "section": "Module detail > to_usd_file",
        "text": "usd_converter.to_usd_file(app, path: str) -> None\n\nExport mechanical scene to usd file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "kil/mechanical",
        "href": "kil/mechanical.html#mechanical-standalone",
        "title": "Mechanical standalone",
        "section": "Mechanical standalone",
        "text": "In addition to Standalone Mechanical known issues and limitations given below,\nplease refer\nMechanical API known issues and limitations.\nACT known issues and limitations.\nMechanical standalone"
    },
    {
        "objectID": "kil/mechanical",
        "href": "kil/mechanical.html#known-issues-and-limitations",
        "title": "Mechanical standalone > Known issues and limitations",
        "section": "Known issues and limitations",
        "text": "Known issues and limitations"
    },
    {
        "objectID": "kil/mechanical",
        "href": "kil/mechanical.html#24r2",
        "title": "Mechanical standalone > 24R2",
        "section": "24R2",
        "text": "In Read Only mode, the application does not display error messages when the geometry is imported in batch mode.\nSection planes can not be added through batch mode.\nMechanical is not thread safe.\nSpaceclaim geometry (.scdocx) can not be imported on Linux platform.\nOn Linux based platforms, Ansys Motion and LSDYNA analysis support are limited.\nA fatal error currently exists when you are shutting down Mechanical on the\nLinux platform using Embedding (#85).\n24R2"
    },
    {
        "objectID": "kil/mechanical",
        "href": "kil/mechanical.html#24r1",
        "title": "Mechanical standalone > 24R1",
        "section": "24R1",
        "text": "Python libraries\nthat are distributed with the installation of Mechanical does not work when there are syntax differences\nbetween IronPython and CPython (#515).\nTrace Import fails with PyMechanical Embedding when using python 3.10 only.\n24R1\npython 3.10"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/index",
        "href": "api/ansys/mechanical/core/embedding/messages/index.html#the-messagespy-module",
        "title": "The messages.py module",
        "section": "The messages.py module",
        "text": "The messages.py module\nmessages.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/index",
        "href": "api/ansys/mechanical/core/embedding/messages/index.html#summary",
        "title": "The messages.py module > Summary",
        "section": "Summary",
        "text": "MessageManager\nMessage manager for adding, fetching, and printing messages.\nHAS_PANDAS\nWhether or not pandas exists.\nSummary\nMessageManager\nHAS_PANDAS"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/index",
        "href": "api/ansys/mechanical/core/embedding/messages/index.html#description",
        "title": "The messages.py module > Description",
        "section": "Description",
        "text": "Message Manager for App.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/index",
        "href": "api/ansys/mechanical/core/embedding/messages/index.html#module-detail",
        "title": "The messages.py module > Module detail",
        "section": "Module detail",
        "text": "Whether or not pandas exists.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/index",
        "href": "api/ansys/mechanical/core/embedding/messages/index.html#messages.HAS_PANDAS",
        "title": "The messages.py module > Module detail > HAS_PANDAS",
        "section": "Module detail > HAS_PANDAS",
        "text": "messages.HAS_PANDAS = True\n\nWhether or not pandas exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.change_default_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.change_default_mechanical_path.html#change_default_mechanical_path",
        "title": "change_default_mechanical_path",
        "section": "change_default_mechanical_path",
        "text": "Change your default Mechanical path.\nFull path for the Mechanical executable file to use.\nNone\nOn Windows:\nOn Linux:\nchange_default_mechanical_path\npython:str\nNone"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.change_default_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.change_default_mechanical_path.html#ansys.tools.path.change_default_mechanical_path",
        "title": "change_default_mechanical_path > change_default_mechanical_path > change_default_mechanical_path",
        "section": "change_default_mechanical_path > change_default_mechanical_path",
        "text": "ansys.tools.path.change_default_mechanical_path(exe_loc)\n\nChange your default Mechanical path.\n\nParameters\n\nexe_loc\n\npython:str\n\nFull path for the Mechanical executable file to use.\n\nReturn type\n\nNone\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('C:/Program Files/ANSYS Inc/v231/aisol/bin/win64/AnsysWBU.exe')\n>>> get_mechanical_path()\n'C:/Program Files/ANSYS Inc/v231/aisol/bin/win64/AnsysWBU.exe'\n\nOn Linux:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('/ansys_inc/v231/aisol/.workbench')\n>>> get_mechanical_path()\n'/ansys_inc/v231/aisol/.workbench'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide_scripting/index",
        "href": "user_guide_scripting/index.html#mechanical-scripting",
        "title": "Mechanical scripting",
        "section": "Mechanical scripting",
        "text": "This section provides an overview of Mechanical scripting.\nMechanical scripting"
    },
    {
        "objectID": "user_guide_scripting/index",
        "href": "user_guide_scripting/index.html#overview",
        "title": "Mechanical scripting > Overview",
        "section": "Overview",
        "text": "You could already perform scripting of Mechanical with Python from inside\nMechanical. PyMechanical leverages the same APIs but allows you to run your\nautomation from outside Mechanical.\nFor comprehensive information on these APIs, refer to the following documentation:\nPyMechanical documentation:\nMechanical API Documentation - Lists Mechanical APIs that can be used with PyMechanical.\nDeveloper portal:\nMechanical scripting interface APIs - Contains the same information as the Mechanical API Documentation but is located on the developer portal.\nACT API Reference Guide:\nACT API Reference Guide - Provides descriptions of the objects, methods, and properties for all namespaces.\nOverview"
    },
    {
        "objectID": "user_guide_scripting/index",
        "href": "user_guide_scripting/index.html#recording",
        "title": "Mechanical scripting > Recording",
        "section": "Recording",
        "text": "Mechanical supports some level of recording. When you initiate an action from the user\ninterface (UI), the UI determines what API to run, executes this API, and prints it in the Mechanical Scripting\nView. Examples of these actions are assigning selections to scoping, changing values in\nthe details view, and renaming an object in the Outline. In the following animated example,\na Fixed Support and a Pressure are added to the Outline.\nRecording"
    },
    {
        "objectID": "user_guide_scripting/index",
        "href": "user_guide_scripting/index.html#mechanical-entities",
        "title": "Mechanical scripting > Mechanical entities",
        "section": "Mechanical entities",
        "text": "Mechanical has an extensive set of entities that represent all the functionality provided\nby Mechanical. Here are descriptions of the entities at Mechanical’s core:\nCAD: CAD entities, which are usually imported from a CAD application\nMesh: The discretized geometry that is appropriate for Mechanical’s solvers\nMaterials: Engineering material models that come from Engineering Data, which is a subsystem of Ansys Workbench\nObjects: The entities in the Outline that represent the model, analyses, solutions, and results\nGraphics: The 3D graphics engine that renders data from Mechanical visually and can export images and animations\nSolvers: The solver integrations that allow a Mechanical model to be used to run a specific solver\nPost: The engine that computes useful engineering results from solver runs\nExtensions: Plugins or extensions defined externally from Mechanical that extend Mechanical\nThere is some overlap between these entities. For instance, the CAD data is represented visually in the 3D graphics\nengine but also has representation in the Outline. The raw CAD data, which includes the tessellations used to render the\ngraphics and all the data needed to define vertices, edges, faces, volumes, and parts is collectively considered GeoData.\nYou may interact with these bodies and parts in the Outline, assigning materials, thickness, and other data that does\nnot come from CAD entities. This is considered Geometry. As a result, the API entry points for GeoData and Geometry\nare different.\nThe same is true for Mesh. There is a representation in the Outline that contains the settings\nused to generate the mesh and statistics about the mesh. Then, there is MeshData, which is the actual nodes and\nelements in the mesh. These have distinct API entry points.\nExecuting a sequence of APIs can sometimes be slow because Mechanical may perform background tasks each time any of its\nentities are created, updated, or deleted. Mechanical scripting has a Transaction class for deferring many of these\ntasks until after a block of commands are run. Here is an example:\nMechanical entities\nGeoData\nGeometry\nGeoData\nGeometry\nMesh\nMeshData\nTransaction"
    },
    {
        "objectID": "user_guide_scripting/index",
        "href": "user_guide_scripting/index.html#api-entry-points",
        "title": "Mechanical scripting > API entry points",
        "section": "API entry points",
        "text": "When running scripts inside of Mechanical, you can access the APIs via these entry points:\nExtAPI: Entry point for all APIs\nDataModel: Entry point to access CAD and mesh entities and objects from the Outline\nModel: The Model object from the Outline\nTree: The Outline\nGraphics: The 3D graphics engine\nYou also have access to several types and namespaces that are included in the scripting scope but are not available\nfrom those entry points.\nAPI entry points\nExtAPI\nDataModel\nModel\nTree\nGraphics"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#environbackend",
        "title": "EnvironBackend",
        "section": "EnvironBackend",
        "text": "Provides the environment variable backend for Mechanical logging.\nEnvironBackend\nEnvironBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#ansys.mechanical.core.embedding.logger.environ.EnvironBackend",
        "title": "EnvironBackend > EnvironBackend > EnvironBackend",
        "section": "EnvironBackend > EnvironBackend",
        "text": "class ansys.mechanical.core.embedding.logger.environ.EnvironBackend\n\nProvides the environment variable backend for Mechanical logging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#overview",
        "title": "EnvironBackend > Overview",
        "section": "Overview",
        "text": "flush\nFlush the log.\nenable\nEnable the given sink.\ndisable\nDisable the log level for this sink.\nset_log_level\nSet the log level for this sink based on the Python log level.\nset_auto_flush\nSet whether to auto flush to the standard log file.\nset_directory\nSet the location to write the log file to.\nset_base_directory\nSet the base location to write the log file to.\ncan_log_message\nReturn whether a message with the given severity is outputted to the log.\nlog_message\nLog the message to the configured logging mechanism.\nOverview\nflush\nenable\ndisable\nset_log_level\nset_auto_flush\nset_directory\nset_base_directory\ncan_log_message\nlog_message"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#import-detail",
        "title": "EnvironBackend > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger.environ import EnvironBackend\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#method-detail",
        "title": "EnvironBackend > Method detail",
        "section": "Method detail",
        "text": "Flush the log.\nEnable the given sink.\nDisable the log level for this sink.\nSet the log level for this sink based on the Python log level.\nSet whether to auto flush to the standard log file.\nSet the location to write the log file to.\nSet the base location to write the log file to.\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\nReturn whether a message with the given severity is outputted to the log.\nLog the message to the configured logging mechanism.\nMethod detail\nset_directory"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.flush",
        "title": "EnvironBackend > Method detail > flush",
        "section": "Method detail > flush",
        "text": "EnvironBackend.flush()\n\nFlush the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.enable",
        "title": "EnvironBackend > Method detail > enable",
        "section": "Method detail > enable",
        "text": "EnvironBackend.enable(sink: int = sinks.StandardSinks.CONSOLE)\n\nEnable the given sink.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.disable",
        "title": "EnvironBackend > Method detail > disable",
        "section": "Method detail > disable",
        "text": "EnvironBackend.disable(sink: int = sinks.StandardSinks.CONSOLE)\n\nDisable the log level for this sink.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.set_log_level",
        "title": "EnvironBackend > Method detail > set_log_level",
        "section": "Method detail > set_log_level",
        "text": "EnvironBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE)\n\nSet the log level for this sink based on the Python log level.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.set_auto_flush",
        "title": "EnvironBackend > Method detail > set_auto_flush",
        "section": "Method detail > set_auto_flush",
        "text": "EnvironBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.set_directory",
        "title": "EnvironBackend > Method detail > set_directory",
        "section": "Method detail > set_directory",
        "text": "EnvironBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.set_base_directory",
        "title": "EnvironBackend > Method detail > set_base_directory",
        "section": "Method detail > set_base_directory",
        "text": "EnvironBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.can_log_message",
        "title": "EnvironBackend > Method detail > can_log_message",
        "section": "Method detail > can_log_message",
        "text": "EnvironBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/environ/EnvironBackend.html#EnvironBackend.log_message",
        "title": "EnvironBackend > Method detail > log_message",
        "section": "Method detail > log_message",
        "text": "EnvironBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#the-utilspy-module",
        "title": "The utils.py module",
        "section": "The utils.py module",
        "text": "The utils.py module\nutils.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#summary",
        "title": "The utils.py module > Summary",
        "section": "Summary",
        "text": "sleep\nNon-blocking sleep for ms milliseconds.\nload_library_windows\nLoad a library into the python process on windows.\nSummary\nsleep\nload_library_windows"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#description",
        "title": "The utils.py module > Description",
        "section": "Description",
        "text": "Miscellaneous utilities.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#module-detail",
        "title": "The utils.py module > Module detail",
        "section": "Module detail",
        "text": "Non-blocking sleep for ms milliseconds.\nMechanical should still work during the sleep.\nLoad a library into the python process on windows.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#utils.sleep",
        "title": "The utils.py module > Module detail > sleep",
        "section": "Module detail > sleep",
        "text": "utils.sleep(ms: int) -> None\n\nNon-blocking sleep for ms milliseconds.\n\nMechanical should still work during the sleep.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/utils/index",
        "href": "api/ansys/mechanical/core/embedding/utils/index.html#utils.load_library_windows",
        "title": "The utils.py module > Module detail > load_library_windows",
        "section": "Module detail > load_library_windows",
        "text": "utils.load_library_windows(library: str) -> int\n\nLoad a library into the python process on windows.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Provides for adding handlers to the logger for each Mechanical session.\nThis class allows you to add handlers to the logger to output to a file or\nthe standard output.\nLogging level for filtering the messages that are allowed in the logger.\nThe default is 10, in which case the DEBUG level is used.\nWhether to write log messages to a file. The default is False.\nWhether to write log messages to the standard output. The default is\nTrue.\nName of the file to write log messages to. The default is pymechanical.log.\nDemonstrate logger usage from a Mechanical instance. The logger is automatically\ncreated when a Mechanical instance is created.\nImport the PyMechanical global logger and add a file output handler.\nLogger\nLogger\npython:int\noptional\n10\nDEBUG\noptional\nFalse\noptional\nTrue\npython:str\noptional\npymechanical.log"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#ansys.mechanical.core.logging.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.mechanical.core.logging.Logger(level=logging.DEBUG, to_file=False, to_stdout=True, filename=FILE_NAME)\n\nProvides for adding handlers to the logger for each Mechanical session.\n\nThis class allows you to add handlers to the logger to output to a file or\nthe standard output.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLogging level for filtering the messages that are allowed in the logger.\nThe default is 10, in which case the DEBUG level is used.\n\nto_file\n\nbool, optional\n\nWhether to write log messages to a file. The default is False.\n\nto_stdout\n\nbool, optional\n\nWhether to write log messages to the standard output. The default is\nTrue.\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is pymechanical.log.\n\nExamples\n\nDemonstrate logger usage from a Mechanical instance. The logger is automatically\ncreated when a Mechanical instance is created.\n\n>>> from ansys.mechanical.core import launch_mechanical\n>>> mechanical = launch_mechanical(loglevel='DEBUG')\n>>> mechanical.log.info('This is a useful message')\nINFO -  -  <ipython-input-24-80df150fe31f> - <module> - This is LOG debug message.\n\nImport the PyMechanical global logger and add a file output handler.\n\n>>> import os\n>>> from ansys.mechanical.core import LOG\n>>> file_path = os.path.join(os.getcwd(), 'pymechanical.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "log_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nadd_child_logger\nAdd a child logger to the main logger.\nadd_instance_logger\nAdd a logger for a Mechanical instance.\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\nadd_handling_uncaught_exceptions\nRedirect the output of an exception to a logger.\n__getitem__\nGet the instance logger based on a key.\nOverview\nlog_to_file\nlog_to_stdout\nsetLevel\nadd_child_logger\nadd_instance_logger\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\nadd_handling_uncaught_exceptions\n__getitem__"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.logging import Logger\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#attribute-detail",
        "title": "Logger > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.file_handler",
        "title": "Logger > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "Logger.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.std_out_handler",
        "title": "Logger > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "Logger.std_out_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.logger",
        "title": "Logger > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "Logger.logger\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.level",
        "title": "Logger > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "Logger.level = 0\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.debug",
        "title": "Logger > Attribute detail > debug",
        "section": "Attribute detail > debug",
        "text": "Logger.debug\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.info",
        "title": "Logger > Attribute detail > info",
        "section": "Attribute detail > info",
        "text": "Logger.info\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.warning",
        "title": "Logger > Attribute detail > warning",
        "section": "Attribute detail > warning",
        "text": "Logger.warning\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.error",
        "title": "Logger > Attribute detail > error",
        "section": "Attribute detail > error",
        "text": "Logger.error\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.critical",
        "title": "Logger > Attribute detail > critical",
        "section": "Attribute detail > critical",
        "text": "Logger.critical\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.log",
        "title": "Logger > Attribute detail > log",
        "section": "Attribute detail > log",
        "text": "Logger.log\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Add a file handler to the logger.\nName of the file to write log messages to. The default is\n'pymechanical.log'.\nLevel of logging. The default is 10, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\nWrite to the pymechanical.log file in the current working directory.\nAdd a standard output handler to the logger.\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\nChange the log level of the object and the attached handlers.\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\nAdd a child logger to the main logger.\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of a Mechanical instance.\nIf the logging level is specified in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName for the child logger.\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\nLogger class.\nAdd a logger for a Mechanical instance.\nThe logger for a Mechanical instance has an adapter that adds contextual information,\nsuch as the name of the Mechanical instance. This logger is returned, and you can use it to\nlog events as a normal logger. It is also stored in the _instances field.\nName for the new logger.\nMechanical instance object. This object should contain the name\nattribute.\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\nLogger adapter customized to add Mechanical information to the\nlogs. You can use this class to log events in the same\nway you would with the logger class.\nYou can only input strings as name to this method.\nGet the instance logger based on a key.\nRedirect the output of an exception to a logger.\nName of the logger.\nMethod detail\npython:str\noptional\n'pymechanical.log'\npython:str\noptional\n10\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\npymechanical.log\npython:str\noptional\nDUBUG\nLOG_LEVEL\npython:str\noptional\nDUBUG\nLOG_LEVEL\n_global\npython:str\npython:str\noptional\nNone\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\nlogging.logger\n_instances\npython:str\nansys.mechanical.core.mechanical.Mechanical\nname\npython:str\noptional\nNone\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\nansys.mechanical.core.logging.PyMechanicalCustomAdapter\nlogger\nException\nname\npython:str"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.log_to_file",
        "title": "Logger > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "Logger.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file to write log messages to. The default is\n'pymechanical.log'.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is 10, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\",\n\"WARNING\" and \"ERROR\".\n\nExamples\n\nWrite to the pymechanical.log file in the current working directory.\n\n>>> from ansys.mechanical.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), 'pymechanical.log')\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.log_to_stdout",
        "title": "Logger > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "Logger.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.setLevel",
        "title": "Logger > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "Logger.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging, such as DUBUG. The default is LOG_LEVEL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.add_child_logger",
        "title": "Logger > Method detail > add_child_logger",
        "section": "Method detail > add_child_logger",
        "text": "Logger.add_child_logger(suffix, level=None)\n\nAdd a child logger to the main logger.\n\nThis child logger is more general than an instance logger, which is designed to\ntrack the state of a Mechanical instance.\n\nIf the logging level is specified in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName for the child logger.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.add_instance_logger",
        "title": "Logger > Method detail > add_instance_logger",
        "section": "Method detail > add_instance_logger",
        "text": "Logger.add_instance_logger(name, mechanical_instance, level=None)\n\nAdd a logger for a Mechanical instance.\n\nThe logger for a Mechanical instance has an adapter that adds contextual information,\nsuch as the name of the Mechanical instance. This logger is returned, and you can use it to\nlog events as a normal logger. It is also stored in the _instances field.\n\nParameters\n\nname\n\npython:str\n\nName for the new logger.\n\nmechanical_instance\n\nansys.mechanical.core.mechanical.Mechanical\n\nMechanical instance object. This object should contain the name\nattribute.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\nReturns\n\nansys.mechanical.core.logging.PyMechanicalCustomAdapter\n\nLogger adapter customized to add Mechanical information to the\nlogs. You can use this class to log events in the same\nway you would with the logger class.\n\nRaises\n\nException\n\nYou can only input strings as name to this method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.__getitem__",
        "title": "Logger > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Logger.__getitem__(key)\n\nGet the instance logger based on a key.\n\nParameters\n\nkey\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/Logger",
        "href": "api/ansys/mechanical/core/logging/Logger.html#Logger.add_handling_uncaught_exceptions",
        "title": "Logger > Method detail > add_handling_uncaught_exceptions",
        "section": "Method detail > add_handling_uncaught_exceptions",
        "text": "static Logger.add_handling_uncaught_exceptions(logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#the-cleanup_guipy-module",
        "title": "The cleanup_gui.py module",
        "section": "The cleanup_gui.py module",
        "text": "The cleanup_gui.py module\ncleanup_gui.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#summary",
        "title": "The cleanup_gui.py module > Summary",
        "section": "Summary",
        "text": "cleanup_gui\nRemove the temporary mechdb file after it is closed.\npid\nSummary\ncleanup_gui\npid"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#description",
        "title": "The cleanup_gui.py module > Description",
        "section": "Description",
        "text": "Clean up temporary mechdb files after GUI is closed.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#module-detail",
        "title": "The cleanup_gui.py module > Module detail",
        "section": "Module detail",
        "text": "Remove the temporary mechdb file after it is closed.\nThe process ID of the open temporary mechdb file.\nThe path of the temporary mechdb file.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#cleanup_gui.cleanup_gui",
        "title": "The cleanup_gui.py module > Module detail > cleanup_gui",
        "section": "Module detail > cleanup_gui",
        "text": "cleanup_gui.cleanup_gui(pid, temp_mechdb) -> None\n\nRemove the temporary mechdb file after it is closed.\n\nParameters\n\npid: int\n\nThe process ID of the open temporary mechdb file.\n\ntemp_mechdb: Path\n\nThe path of the temporary mechdb file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/cleanup_gui/index",
        "href": "api/ansys/mechanical/core/embedding/cleanup_gui/index.html#cleanup_gui.pid",
        "title": "The cleanup_gui.py module > Module detail > pid",
        "section": "Module detail > pid",
        "text": "cleanup_gui.pid\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/index",
        "href": "api/ansys/mechanical/core/embedding/poster/index.html#the-posterpy-module",
        "title": "The poster.py module",
        "section": "The poster.py module",
        "text": "The poster.py module\nposter.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/index",
        "href": "api/ansys/mechanical/core/embedding/poster/index.html#summary",
        "title": "The poster.py module > Summary",
        "section": "Summary",
        "text": "Poster\nClass which can post a python callable function to Mechanical’s main thread.\nPosterError\nClass which holds errors from the background thread posting system.\nSummary\nPoster\nPosterError"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/index",
        "href": "api/ansys/mechanical/core/embedding/poster/index.html#description",
        "title": "The poster.py module > Description",
        "section": "Description",
        "text": "Use the Poster class to post functions to Mechanical’s main thread.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#methodtype",
        "title": "MethodType",
        "section": "MethodType",
        "text": "Enum for method or property types.\nMethodType\nMethodType"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#ansys.mechanical.core.embedding.rpc.utils.MethodType",
        "title": "MethodType > MethodType > MethodType",
        "section": "MethodType > MethodType",
        "text": "class ansys.mechanical.core.embedding.rpc.utils.MethodType\n\nEnum for method or property types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#overview",
        "title": "MethodType > Overview",
        "section": "Overview",
        "text": "METHOD\nPROP\nOverview\nMETHOD\nPROP"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#import-detail",
        "title": "MethodType > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.utils import MethodType\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#attribute-detail",
        "title": "MethodType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#MethodType.METHOD",
        "title": "MethodType > Attribute detail > METHOD",
        "section": "Attribute detail > METHOD",
        "text": "MethodType.METHOD = 0\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/MethodType.html#MethodType.PROP",
        "title": "MethodType > Attribute detail > PROP",
        "section": "Attribute detail > PROP",
        "text": "MethodType.PROP = 1\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#featureflags",
        "title": "FeatureFlags",
        "section": "FeatureFlags",
        "text": "Supported feature flag names.\nFeatureFlags\nFeatureFlags"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#ansys.mechanical.core.feature_flags.FeatureFlags",
        "title": "FeatureFlags > FeatureFlags > FeatureFlags",
        "section": "FeatureFlags > FeatureFlags",
        "text": "class ansys.mechanical.core.feature_flags.FeatureFlags\n\nSupported feature flag names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#overview",
        "title": "FeatureFlags > Overview",
        "section": "Overview",
        "text": "ThermalShells\nMultistageHarmonic\nCPython\nOverview\nThermalShells\nMultistageHarmonic\nCPython"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#import-detail",
        "title": "FeatureFlags > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.feature_flags import FeatureFlags\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#attribute-detail",
        "title": "FeatureFlags > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#FeatureFlags.ThermalShells",
        "title": "FeatureFlags > Attribute detail > ThermalShells",
        "section": "Attribute detail > ThermalShells",
        "text": "FeatureFlags.ThermalShells = 'Mechanical.ThermalShells'\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#FeatureFlags.MultistageHarmonic",
        "title": "FeatureFlags > Attribute detail > MultistageHarmonic",
        "section": "Attribute detail > MultistageHarmonic",
        "text": "FeatureFlags.MultistageHarmonic = 'Mechanical.MultistageHarmonic'\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/FeatureFlags",
        "href": "api/ansys/mechanical/core/feature_flags/FeatureFlags.html#FeatureFlags.CPython",
        "title": "FeatureFlags > Attribute detail > CPython",
        "section": "Attribute detail > CPython",
        "text": "FeatureFlags.CPython = 'Mechanical.CPython.Capability'\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#the-importspy-module",
        "title": "The imports.py module",
        "section": "The imports.py module",
        "text": "The imports.py module\nimports.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#summary",
        "title": "The imports.py module > Summary",
        "section": "Summary",
        "text": "global_entry_points\nReturn the global entry points of the application.\nglobal_variables\nReturn the Mechanical scripting global variables as a dict.\nget_all_enums\nGet all the enums as a dictionary.\nSummary\nglobal_entry_points\nglobal_variables\nget_all_enums"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#description",
        "title": "The imports.py module > Description",
        "section": "Description",
        "text": "Additional imports for embedded Mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#module-detail",
        "title": "The imports.py module > Module detail",
        "section": "Module detail",
        "text": "Return the global entry points of the application.\nReturn the Mechanical scripting global variables as a dict.\nIt can be used to add all of these as global variables in python\nwith this command:\nglobals().update(global_variables(embedded_app))\nTo also import all the enums, set the parameter enums to true.\nGet all the enums as a dictionary.\nModule detail\nglobals().update(global_variables(embedded_app))"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#imports.global_entry_points",
        "title": "The imports.py module > Module detail > global_entry_points",
        "section": "Module detail > global_entry_points",
        "text": "imports.global_entry_points(app: ansys.mechanical.core.App) -> Dict\n\nReturn the global entry points of the application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#imports.global_variables",
        "title": "The imports.py module > Module detail > global_variables",
        "section": "Module detail > global_variables",
        "text": "imports.global_variables(app: ansys.mechanical.core.App, enums: bool = False) -> Dict\n\nReturn the Mechanical scripting global variables as a dict.\n\nIt can be used to add all of these as global variables in python\nwith this command:\n\nglobals().update(global_variables(embedded_app))\n\nTo also import all the enums, set the parameter enums to true.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/imports/index",
        "href": "api/ansys/mechanical/core/embedding/imports/index.html#imports.get_all_enums",
        "title": "The imports.py module > Module detail > get_all_enums",
        "section": "Module detail > get_all_enums",
        "text": "imports.get_all_enums() -> Dict[str, Any]\n\nGet all the enums as a dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "404",
        "href": "404.html#oops",
        "title": "Oops",
        "section": "Oops",
        "text": "This is unexpected.\nThe page you are requesting does not exist.\nOops"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalFormatter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalFormatter.html#pymechanicalformatter",
        "title": "PyMechanicalFormatter",
        "section": "PyMechanicalFormatter",
        "text": "Bases: logging.Formatter\nProvides for overwriting default format styles with custom format styles.\nThe default is STDOUT_MSG_FORMAT.\nThe default is None.\nThe default is %.\nThe default is None.\nPyMechanicalFormatter\nPyMechanicalFormatter\nlogging.Formatter\noptional\nSTDOUT_MSG_FORMAT\noptional\nNone\noptional\n%\noptional\nNone"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalFormatter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalFormatter.html#ansys.mechanical.core.logging.PyMechanicalFormatter",
        "title": "PyMechanicalFormatter > PyMechanicalFormatter > PyMechanicalFormatter",
        "section": "PyMechanicalFormatter > PyMechanicalFormatter",
        "text": "class ansys.mechanical.core.logging.PyMechanicalFormatter(fmt=STDOUT_MSG_FORMAT, datefmt=None, style='%', validate=True, defaults=None)\n\nBases: logging.Formatter\n\nProvides for overwriting default format styles with custom format styles.\n\nParameters\n\nfmt\n\noptional\n\nThe default is STDOUT_MSG_FORMAT.\n\ndatefmt\n\noptional\n\nThe default is None.\n\nstyle\n\noptional\n\nThe default is %.\n\nvalidate\n\nbool, optional\n\nThe default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalFormatter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalFormatter.html#import-detail",
        "title": "PyMechanicalFormatter > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.logging import PyMechanicalFormatter\nImport detail"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#remote--embedding-example",
        "title": "Remote & Embedding Example",
        "section": "Remote & Embedding Example",
        "text": "This code, which uses the same example, first demonstrates how to use\na remote session and then demonstrates how to use an embedding instance.\nRemote & Embedding Example"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#remote-session",
        "title": "Remote & Embedding Example > Remote Session",
        "section": "Remote Session",
        "text": "Remote Session"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#download-required-files",
        "title": "Remote & Embedding Example > Download required files",
        "section": "Download required files",
        "text": "Download the required files. Print the file paths for the geometry file and\nscript file.\nDownload required files"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#launch-mechanical",
        "title": "Remote & Embedding Example > Launch Mechanical",
        "section": "Launch Mechanical",
        "text": "Launch a new Mechanical session in batch, setting cleanup_on_exit to\nFalse. To close this Mechanical session when finished, this example\nmust call  the mechanical.exit() method.\nLaunch Mechanical\ncleanup_on_exit\nFalse\nmechanical.exit()"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#initialize-variable-for-workflow",
        "title": "Remote & Embedding Example > Initialize variable for workflow",
        "section": "Initialize variable for workflow",
        "text": "Set the part_file_path variable on the server for later use.\nMake this variable compatible for Windows, Linux, and Docker containers.\nInitialize variable for workflow\npart_file_path"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#run-mechanical-automation-script",
        "title": "Remote & Embedding Example > Run mechanical automation script",
        "section": "Run mechanical automation script",
        "text": "Run remote_script.py in the mechanical remote session.\nRun mechanical automation script"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#get-list-of-generated-files",
        "title": "Remote & Embedding Example > Get list of generated files",
        "section": "Get list of generated files",
        "text": "Get list of generated files"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#write-the-file-contents-to-console",
        "title": "Remote & Embedding Example > Write the file contents to console",
        "section": "Write the file contents to console",
        "text": "Write the file contents to console"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#download-files-back-to-local-working-directory",
        "title": "Remote & Embedding Example > Download files back to local working directory",
        "section": "Download files back to local working directory",
        "text": "Download files back to local working directory"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#exit-remote-session",
        "title": "Remote & Embedding Example > Exit remote session",
        "section": "Exit remote session",
        "text": "Close the Mechanical instance.\nExit remote session"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#embedded-instance",
        "title": "Remote & Embedding Example > Embedded Instance",
        "section": "Embedded Instance",
        "text": "Embedded Instance"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#download-the-geometry-file",
        "title": "Remote & Embedding Example > Download the geometry file",
        "section": "Download the geometry file",
        "text": "Download Valve.pmdb.\nDownload the geometry file"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#embed-mechanical-and-set-global-variables",
        "title": "Remote & Embedding Example > Embed Mechanical and set global variables",
        "section": "Embed Mechanical and set global variables",
        "text": "Find the mechanical installation path & version.\nOpen an embedded instance of Mechanical and set global variables.\nEmbed Mechanical and set global variables"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#add-static-analysis",
        "title": "Remote & Embedding Example > Add Static Analysis",
        "section": "Add Static Analysis",
        "text": "Add static analysis to the Model.\nAdd Static Analysis"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#import-geometry",
        "title": "Remote & Embedding Example > Import geometry",
        "section": "Import geometry",
        "text": "Import geometry"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#assign-material",
        "title": "Remote & Embedding Example > Assign material",
        "section": "Assign material",
        "text": "Assign material"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#define-mesh-settings",
        "title": "Remote & Embedding Example > Define mesh settings",
        "section": "Define mesh settings",
        "text": "Define mesh settings"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#define-boundary-conditions",
        "title": "Remote & Embedding Example > Define boundary conditions",
        "section": "Define boundary conditions",
        "text": "Define boundary conditions"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#solve-model",
        "title": "Remote & Embedding Example > Solve model",
        "section": "Solve model",
        "text": "Solve model"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#add-results",
        "title": "Remote & Embedding Example > Add results",
        "section": "Add results",
        "text": "Add results"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#save-model",
        "title": "Remote & Embedding Example > Save model",
        "section": "Save model",
        "text": "Save model"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/embedding_remote",
        "href": "examples/gallery_examples/embedding_n_remote/embedding_remote.html#export-result-values-to-a-text-file",
        "title": "Remote & Embedding Example > Export result values to a text file",
        "section": "Export result values to a text file",
        "text": "Total running time of the script: (1 minutes 1.528 seconds)\nDownload Jupyter notebook: embedding_remote.ipynb\nDownload Python source code: embedding_remote.py\nDownload zipped: embedding_remote.zip\nGallery generated by Sphinx-Gallery\nExport result values to a text file\nDownload Jupyter notebook: embedding_remote.ipynb\nDownload Python source code: embedding_remote.py\nDownload zipped: embedding_remote.zip"
    },
    {
        "objectID": "examples/gallery_examples/index",
        "href": "examples/gallery_examples/index.html#embedding-and-remote-session-example",
        "title": "Embedding and Remote Session Example",
        "section": "Embedding and Remote Session Example",
        "text": "This code, which uses the same example, first demonstrates how to use\nan embedding instance and then demonstrates how to use a remote session.\nsphx_glr_examples_gallery_examples_embedding_n_remote_embedding_remote.py\nGallery generated by Sphinx-Gallery\nEmbedding and Remote Session Example"
    },
    {
        "objectID": "user_guide_embedding/index",
        "href": "user_guide_embedding/index.html#embedded-instance",
        "title": "Embedded instance",
        "section": "Embedded instance",
        "text": "This section provides an overview of how you use PyMechanical to embed\nan instance of Mechanical in Python.\nEmbedded instance"
    },
    {
        "objectID": "user_guide_embedding/index",
        "href": "user_guide_embedding/index.html#overview",
        "title": "Embedded instance > Overview",
        "section": "Overview",
        "text": "The App class provides\na Mechanical instance:\nThe App class has access to the global scripting entry points that are\navailable from built-in Mechanical scripting:\nExtAPI: Application.ExtAPI\nDataModel: Application.DataModel\nModel: Application.DataModel.Project.Model\nTree: Application.DataModel.Tree\nGraphics: Application.ExtAPI.Graphics\nBesides scripting entry points, many other types and objects are available from\nbuilt-in Mechanical scripting. To learn how to import scripting entry points,\nnamespaces, and types, see ref_embedding_user_guide_globals.\nOverview\nApplication.ExtAPI\nApplication.DataModel\nApplication.DataModel.Project.Model\nApplication.DataModel.Tree\nApplication.ExtAPI.Graphics"
    },
    {
        "objectID": "user_guide_embedding/index",
        "href": "user_guide_embedding/index.html#additional-configuration",
        "title": "Embedded instance > Additional configuration",
        "section": "Additional configuration",
        "text": "By default, an instance of the App class\nuses the same Addin configuration as standalone Mechanical. To customize Addins, see\nref_embedding_user_guide_addin_configuration.\nAdditional configuration"
    },
    {
        "objectID": "user_guide_embedding/index",
        "href": "user_guide_embedding/index.html#diagnosing-problems-with-embedding",
        "title": "Embedded instance > Diagnosing problems with embedding",
        "section": "Diagnosing problems with embedding",
        "text": "In some cases, debugging the embedded Mechanical instance may require additional logging.\nFor information on how to configure logging, see ref_embedding_user_guide_logging.\nDiagnosing problems with embedding"
    },
    {
        "objectID": "user_guide_embedding/index",
        "href": "user_guide_embedding/index.html#running-pymechanical-embedding-scripts-inside-mechanical-with-ironpython",
        "title": "Embedded instance > Running PyMechanical embedding scripts inside Mechanical with IronPython",
        "section": "Running PyMechanical embedding scripts inside Mechanical with IronPython",
        "text": "If your PyMechanical embedding script does not use any other third-party Python package, such as NumPy,\nit is possible to adapt it so that it can run inside of Mechanical with IronPython.\nThe scripting occurs inside Mechanical’s command line interface. For instance, consider the following PyMechanical code:\nThe above code can be written as a Python file, such as file.py with only the following content:\nBecause the file does not contain the PyMechanical import statements, you can run\nfile.py using the command line inside Mechanical.\nUsing command line interface (CLI)\nThis can be achieved on both the Windows and Linux platforms using\nansys-mechanical cli from the virtual environment where ansys-mechanical-core\nhas been installed. Activate the virtual environment and then use CLI to run the scripts.\nIf multiple Mechanical versions are installed in the same system,\nversions can be specified using -r flag. Use -h for more information.\nAlternately user can use the following commands in the command prompt of Windows and the terminal\nfor Linux systems.\nOn Windows\nPowerShell users can run the preceding command without including the opening and\nclosing quotation marks.\nOn Linux\nOn either Windows or Linux, add the command line argument -b to run the script in batch mode.\nRunning PyMechanical embedding scripts inside Mechanical with IronPython\nfile.py\nfile.py\nansys-mechanical\nansys-mechanical-core\n-r\n-h\n-b"
    },
    {
        "objectID": "examples/gallery_examples/embedding_n_remote/sg_execution_times",
        "href": "examples/gallery_examples/embedding_n_remote/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:01.528 total execution time for 1 file from examples/gallery_examples/embedding_n_remote:\nExample\nTime\nMem (MB)\nsphx_glr_examples_gallery_examples_embedding_n_remote_embedding_remote.py (embedding_remote.py)\n01:01.528\n0.0\nComputation times\nembedding_remote.py"
    },
    {
        "objectID": "kil/pymechanical",
        "href": "kil/pymechanical.html#pymechanical",
        "title": "PyMechanical",
        "section": "PyMechanical",
        "text": "PyMechanical"
    },
    {
        "objectID": "kil/pymechanical",
        "href": "kil/pymechanical.html#known-issues-and-limitations",
        "title": "PyMechanical > Known issues and limitations",
        "section": "Known issues and limitations",
        "text": "We suggest to use latest stable version of PyMechanical.\nAny issues and limitations for previous versions are not currently documented.\nIf you find any other, please create an issue here\nKnown issues and limitations"
    },
    {
        "objectID": "kil/pymechanical",
        "href": "kil/pymechanical.html#v011x",
        "title": "PyMechanical > v0.11.x",
        "section": "v0.11.x",
        "text": "App.plot() visualization feature is available only for geometry. You cannot plot mesh or results\nbut you can export these data as images or an animation.\nv0.11.x\nApp.plot()"
    },
    {
        "objectID": "user_guide_session/pool",
        "href": "user_guide_session/pool.html#create-a-pool-of-mechanical-servers",
        "title": "Create a pool of Mechanical servers",
        "section": "Create a pool of Mechanical servers",
        "text": "The LocalMechanicalPool\nclass simplifies creating and connecting to multiple servers of the\nMechanical class for batch\nprocessing. You can use this class for batch processing a set of input files or\nother batch-related processes.\nThis code shows how to create a pool with 10 instances:\nWhen you are creating a pool, you can supply additional keyword arguments.\nFor example, to restart failed instances, you can set restart_failed=True:\nYou can access each individual instance of Mechanical with this code:\nBecause this is a self-healing pool, if an instance of Mechanical stops\nduring a batch process, this instance is automatically restarted. When creating\nthe pool, you can disable this behavior by setting restart_failed=False.\nCreate a pool of Mechanical servers\nrestart_failed=True\nrestart_failed=False"
    },
    {
        "objectID": "user_guide_session/pool",
        "href": "user_guide_session/pool.html#run-a-set-of-input-files",
        "title": "Create a pool of Mechanical servers > Run a set of input files",
        "section": "Run a set of input files",
        "text": "You can use the pool to run a set of pre-generated input files using the\nrun_batch() method.\nFor example, you can run the first set of 20 verification files with this code:\nRun a set of input files"
    },
    {
        "objectID": "user_guide_session/pool",
        "href": "user_guide_session/pool.html#run-a-user-defined-function",
        "title": "Create a pool of Mechanical servers > Run a user-defined function",
        "section": "Run a user-defined function",
        "text": "While the previous example uses the run_batch()\nmethod to run a set of inputs files, you can also use the\nmap() method to run a custom user-defined function on\neach instance of Mechanical over a set of input files.\nRun a user-defined function"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PyMechanical is part of the broader PyAnsys initiative,\nenabling the use of Ansys technologies directly from Python.\nIt allows users to integrate the Mechanical multiphysics solver\ninto custom applications via ansys-mechanical-core, which provides a Python-friendly\ninterface to drive the software that facilitates the use of\nref_user_guide_scripting commands.\nInstructions to install and verify PyMechanical.\nSteps to run PyMechanical.\nHow to run Mechanical Docker containers.\nInstalling PyMechanical on Linux via WSL.\nGetting started\nansys-mechanical-core"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#background",
        "title": "Getting started > Background",
        "section": "Background",
        "text": "PyMechanical contains two interfaces: a remote session and an embedded instance.\nFor information on the application architecture of Mechanical and why there are\ntwo Python interfaces, see ref_architecture.\nBackground"
    },
    {
        "objectID": "user_guide_embedding/logging",
        "href": "user_guide_embedding/logging.html#logging",
        "title": "Logging",
        "section": "Logging",
        "text": "Mechanical has a logging system that is useful when debugging issues. Normally, it is\nenabled by setting environment variables before starting Mechanical. With PyMechanical,\nit is possible to configure logging at any time, whether it is before or after creating\nthe embedded application, using the same Python API.\nUse the Configuration class to\nconfigure logging to the standard output for all warning messages and above (which are error and fatal messages).\nFor example:\nAfter the embedded application has been created, you can write messages to the same\nlog using the Logger <../api/ansys/mechanical/core/embedding/logger/Logger.html> class like this:\nLogging"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/index.html#the-windows_apipy-module",
        "title": "The windows_api.py module",
        "section": "The windows_api.py module",
        "text": "The windows_api.py module\nwindows_api.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/index.html#summary",
        "title": "The windows_api.py module > Summary",
        "section": "Summary",
        "text": "APIBackend\nProvides API backend for Mechanical logging system.\nSummary\nAPIBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/index",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/index.html#description",
        "title": "The windows_api.py module > Description",
        "section": "Description",
        "text": "Windows API for internal Mechanical logging.\nThis API does not support some options, namely the base directory\nand log filename.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle.html#pymechanicalpercentstyle",
        "title": "PyMechanicalPercentStyle",
        "section": "PyMechanicalPercentStyle",
        "text": "Bases: logging.PercentStyle\nControls the way PyMechanical formats the percent style.\nPyMechanicalPercentStyle\nPyMechanicalPercentStyle\nlogging.PercentStyle"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle.html#ansys.mechanical.core.logging.PyMechanicalPercentStyle",
        "title": "PyMechanicalPercentStyle > PyMechanicalPercentStyle > PyMechanicalPercentStyle",
        "section": "PyMechanicalPercentStyle > PyMechanicalPercentStyle",
        "text": "class ansys.mechanical.core.logging.PyMechanicalPercentStyle(fmt, *, defaults=None)\n\nBases: logging.PercentStyle\n\nControls the way PyMechanical formats the percent style.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalPercentStyle.html#import-detail",
        "title": "PyMechanicalPercentStyle > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.logging import PyMechanicalPercentStyle\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#client",
        "title": "Client",
        "section": "Client",
        "text": "Client for connecting to Mechanical services.\nClient\nClient"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#ansys.mechanical.core.embedding.rpc.client.Client",
        "title": "Client > Client > Client",
        "section": "Client > Client",
        "text": "class ansys.mechanical.core.embedding.rpc.client.Client(host: str, port: int, timeout: float = 60.0)\n\nClient for connecting to Mechanical services.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#overview",
        "title": "Client > Overview",
        "section": "Overview",
        "text": "close\nClose the connection.\nupload\nUpload a file to the server.\ndownload\nDownload a file from the server.\ndownload_project\nDownload all project files in the working directory of the Mechanical instance.\nexit\nShuts down the Mechanical instance.\nis_alive\nCheck if the Mechanical instance is alive.\nhost\nport\ntimeout\nconnection\nroot\n__getattr__\nGet attribute from the root object.\nOverview\nclose\nupload\ndownload\ndownload_project\nexit\nis_alive\nhost\nport\ntimeout\nconnection\nroot\n__getattr__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#import-detail",
        "title": "Client > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.client import Client\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#property-detail",
        "title": "Client > Property detail",
        "section": "Property detail",
        "text": "Check if the Mechanical instance is alive.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.is_alive",
        "title": "Client > Property detail > is_alive",
        "section": "Property detail > is_alive",
        "text": "property Client.is_alive\n\nCheck if the Mechanical instance is alive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#attribute-detail",
        "title": "Client > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.host",
        "title": "Client > Attribute detail > host",
        "section": "Attribute detail > host",
        "text": "Client.host\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.port",
        "title": "Client > Attribute detail > port",
        "section": "Attribute detail > port",
        "text": "Client.port\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.timeout",
        "title": "Client > Attribute detail > timeout",
        "section": "Attribute detail > timeout",
        "text": "Client.timeout = 60.0\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.connection",
        "title": "Client > Attribute detail > connection",
        "section": "Attribute detail > connection",
        "text": "Client.connection = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.root",
        "title": "Client > Attribute detail > root",
        "section": "Attribute detail > root",
        "text": "Client.root = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#method-detail",
        "title": "Client > Method detail",
        "section": "Method detail",
        "text": "Get attribute from the root object.\nClose the connection.\nUpload a file to the server.\nDownload a file from the server.\nDownload all project files in the working directory of the Mechanical instance.\nShuts down the Mechanical instance.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.__getattr__",
        "title": "Client > Method detail > __getattr__",
        "section": "Method detail > __getattr__",
        "text": "Client.__getattr__(attr)\n\nGet attribute from the root object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.close",
        "title": "Client > Method detail > close",
        "section": "Method detail > close",
        "text": "Client.close()\n\nClose the connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.upload",
        "title": "Client > Method detail > upload",
        "section": "Method detail > upload",
        "text": "Client.upload(file_name, file_location_destination=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=False)\n\nUpload a file to the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.download",
        "title": "Client > Method detail > download",
        "section": "Method detail > download",
        "text": "Client.download(files, target_dir=None, chunk_size=DEFAULT_CHUNK_SIZE, progress_bar=None, recursive=False)\n\nDownload a file from the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.download_project",
        "title": "Client > Method detail > download_project",
        "section": "Method detail > download_project",
        "text": "Client.download_project(extensions=None, target_dir=None, progress_bar=False)\n\nDownload all project files in the working directory of the Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/client/Client",
        "href": "api/ansys/mechanical/core/embedding/rpc/client/Client.html#Client.exit",
        "title": "Client > Method detail > exit",
        "section": "Method detail > exit",
        "text": "Client.exit()\n\nShuts down the Mechanical instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/runtime/index",
        "href": "api/ansys/mechanical/core/embedding/runtime/index.html#the-runtimepy-module",
        "title": "The runtime.py module",
        "section": "The runtime.py module",
        "text": "The runtime.py module\nruntime.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/runtime/index",
        "href": "api/ansys/mechanical/core/embedding/runtime/index.html#summary",
        "title": "The runtime.py module > Summary",
        "section": "Summary",
        "text": "initialize\nInitialize the runtime.\nSummary\ninitialize"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/runtime/index",
        "href": "api/ansys/mechanical/core/embedding/runtime/index.html#description",
        "title": "The runtime.py module > Description",
        "section": "Description",
        "text": "Runtime initialize for pythonnet in embedding.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/runtime/index",
        "href": "api/ansys/mechanical/core/embedding/runtime/index.html#module-detail",
        "title": "The runtime.py module > Module detail",
        "section": "Module detail",
        "text": "Initialize the runtime.\nPythonnet is already initialized but we need to\ndo some special codec handling to make sure the\ninterop works well for Mechanical. These are\nneed to handle (among other things) list and other\ncontainer conversions between C# and python\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/runtime/index",
        "href": "api/ansys/mechanical/core/embedding/runtime/index.html#runtime.initialize",
        "title": "The runtime.py module > Module detail > initialize",
        "section": "Module detail > initialize",
        "text": "runtime.initialize(version: int) -> None\n\nInitialize the runtime.\n\nPythonnet is already initialized but we need to\ndo some special codec handling to make sure the\ninterop works well for Mechanical. These are\nneed to handle (among other things) list and other\ncontainer conversions between C# and python\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#mechanicalservice",
        "title": "MechanicalService",
        "section": "MechanicalService",
        "text": "Bases: rpyc.Service\nStarts Mechanical app services.\nMechanicalService\nMechanicalService\nrpyc.Service"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#ansys.mechanical.core.embedding.rpc.server.MechanicalService",
        "title": "MechanicalService > MechanicalService > MechanicalService",
        "section": "MechanicalService > MechanicalService",
        "text": "class ansys.mechanical.core.embedding.rpc.server.MechanicalService(backgroundapp, functions=[], impl=None)\n\nBases: rpyc.Service\n\nStarts Mechanical app services.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#overview",
        "title": "MechanicalService > Overview",
        "section": "Overview",
        "text": "on_connect\nHandle client connection.\non_disconnect\nHandle client disconnection.\nexposed_service_upload\nHandle file upload request from client.\nexposed_service_download\nHandle file download request from client.\nexposed_service_exit\nExit the server.\nEMBEDDED\nOverview\non_connect\non_disconnect\nexposed_service_upload\nexposed_service_download\nexposed_service_exit\nEMBEDDED"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#import-detail",
        "title": "MechanicalService > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.server import MechanicalService\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#attribute-detail",
        "title": "MechanicalService > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.EMBEDDED",
        "title": "MechanicalService > Attribute detail > EMBEDDED",
        "section": "Attribute detail > EMBEDDED",
        "text": "MechanicalService.EMBEDDED = True\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#method-detail",
        "title": "MechanicalService > Method detail",
        "section": "Method detail",
        "text": "Handle client connection.\nHandle client disconnection.\nHandle file upload request from client.\nHandle file download request from client.\nExit the server.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.on_connect",
        "title": "MechanicalService > Method detail > on_connect",
        "section": "Method detail > on_connect",
        "text": "MechanicalService.on_connect(conn)\n\nHandle client connection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.on_disconnect",
        "title": "MechanicalService > Method detail > on_disconnect",
        "section": "Method detail > on_disconnect",
        "text": "MechanicalService.on_disconnect(conn)\n\nHandle client disconnection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.exposed_service_upload",
        "title": "MechanicalService > Method detail > exposed_service_upload",
        "section": "Method detail > exposed_service_upload",
        "text": "MechanicalService.exposed_service_upload(remote_path, file_data)\n\nHandle file upload request from client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.exposed_service_download",
        "title": "MechanicalService > Method detail > exposed_service_download",
        "section": "Method detail > exposed_service_download",
        "text": "MechanicalService.exposed_service_download(remote_path)\n\nHandle file download request from client.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalService.html#MechanicalService.exposed_service_exit",
        "title": "MechanicalService > Method detail > exposed_service_exit",
        "section": "Method detail > exposed_service_exit",
        "text": "MechanicalService.exposed_service_exit()\n\nExit the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.get_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.get_mechanical_path.html#get_mechanical_path",
        "title": "get_mechanical_path",
        "section": "get_mechanical_path",
        "text": "Acquires Ansys Mechanical Path\nFirst, it looks in the configuration file, used by save_mechanical_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\nAllow user input to find Ansys Mechanical path.  The default is True.\nVersion of Ansys Mechanical to search for. For example version=22.2.\nIf None, use latest.\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\nOptional[str]\nget_mechanical_path\noptional\nTrue\npython:float\noptional\nversion=22.2\nNone\nOptional\nstr"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.get_mechanical_path",
        "href": "api/_autosummary/ansys.tools.path.get_mechanical_path.html#ansys.tools.path.get_mechanical_path",
        "title": "get_mechanical_path > get_mechanical_path > get_mechanical_path",
        "section": "get_mechanical_path > get_mechanical_path",
        "text": "ansys.tools.path.get_mechanical_path(allow_input=True, version=None, find=True)\n\nAcquires Ansys Mechanical Path\n\nFirst, it looks in the configuration file, used by save_mechanical_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\nParameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys Mechanical path.  The default is True.\n\nversion\n\npython:float, optional\n\nVersion of Ansys Mechanical to search for. For example version=22.2.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\n\nReturn type\n\nOptional[str]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide_session/server-launcher",
        "href": "user_guide_session/server-launcher.html#initial-setup-for-launching-a-mechanical-session-on-the-local-machine",
        "title": "Initial setup for launching a Mechanical session on the local machine",
        "section": "Initial setup for launching a Mechanical session on the local machine",
        "text": "To run, PyMechanical must know the location of your Mechanical installation.\nMost of the time, PyMechanical can determine this location automatically. However,\nif you have a non-standard installation, you must provide this location.\nTo test and set up your installation of PyMechanical, run the\nlaunch_mechanical()\nmethod:\nThe first time that you run this method, PyMechanical attempts to detect the location\nof your Mechanical installation based on environment variables. If it cannot find\na Mechanical installation, PyMechanical asks you to supply the location of the\nMechanical executable file.\nOn Linux\nOn Windows\nThe settings file for Mechanical is stored locally. You do not need to enter\nthe path again. If you must change the path, perhaps to change the default\nversion of Mechanical, run the following:\nFor more information, see the change_default_mechanical_path()\nand find_mechanical() methods.\nAdditionally, you can use the exec_file keyword argument to specify the location of the\nMechanical executable file.\nOn Linux\nOn Windows\nYou can use the additional_switches keyword argument to specify additional arguments.\nInitial setup for launching a Mechanical session on the local machine\nexec_file\nadditional_switches"
    },
    {
        "objectID": "user_guide_session/server-launcher",
        "href": "user_guide_session/server-launcher.html#api-reference",
        "title": "Initial setup for launching a Mechanical session on the local machine > API reference",
        "section": "API reference",
        "text": "For more information on controlling how Mechanical launches locally, see the\nlaunch_mechanical() method.\nAPI reference"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/index",
        "href": "api/ansys/mechanical/core/embedding/transaction/index.html#the-transactionpy-module",
        "title": "The transaction.py module",
        "section": "The transaction.py module",
        "text": "The transaction.py module\ntransaction.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/index",
        "href": "api/ansys/mechanical/core/embedding/transaction/index.html#summary",
        "title": "The transaction.py module > Summary",
        "section": "Summary",
        "text": "Transaction\nA class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\nSummary\nTransaction"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/transaction/index",
        "href": "api/ansys/mechanical/core/embedding/transaction/index.html#description",
        "title": "The transaction.py module > Description",
        "section": "Description",
        "text": "A class to speed up bulk user interactions using Ansys ACT Mechanical Transaction.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/index",
        "href": "api/ansys/mechanical/core/embedding/ui/index.html#the-uipy-module",
        "title": "The ui.py module",
        "section": "The ui.py module",
        "text": "The ui.py module\nui.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/index",
        "href": "api/ansys/mechanical/core/embedding/ui/index.html#summary",
        "title": "The ui.py module > Summary",
        "section": "Summary",
        "text": "UILauncher\nLaunch the GUI using a temporary mechdb file.\nlaunch_ui\nLaunch the Mechanical UI.\nSummary\nUILauncher\nlaunch_ui"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/index",
        "href": "api/ansys/mechanical/core/embedding/ui/index.html#description",
        "title": "The ui.py module > Description",
        "section": "Description",
        "text": "Run Mechanical UI from Python.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/index",
        "href": "api/ansys/mechanical/core/embedding/ui/index.html#module-detail",
        "title": "The ui.py module > Module detail",
        "section": "Module detail",
        "text": "Launch the Mechanical UI.\nPrecondition: Mechanical has to have already been saved\nSide effect: If Mechanical has ever been saved, it overwrites that save.\nA Mechanical embedding application.\nWhether to delete the temporary mechdb file when the GUI is closed.\nBy default, this is True.\nWhether or not to launch the GUI. By default, this is False.\nModule detail\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/ui/index",
        "href": "api/ansys/mechanical/core/embedding/ui/index.html#ui.launch_ui",
        "title": "The ui.py module > Module detail > launch_ui",
        "section": "Module detail > launch_ui",
        "text": "ui.launch_ui(app: ansys.mechanical.core.embedding.App, delete_tmp_on_close: bool = True, dry_run: bool = False) -> None\n\nLaunch the Mechanical UI.\n\nPrecondition: Mechanical has to have already been saved\nSide effect: If Mechanical has ever been saved, it overwrites that save.\n\nParameters\n\napp: ansys.mechanical.core.embedding.app.App\n\nA Mechanical embedding application.\n\ndelete_tmp_on_close: bool\n\nWhether to delete the temporary mechdb file when the GUI is closed.\nBy default, this is True.\n\ndry_run: bool\n\nWhether or not to launch the GUI. By default, this is False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#the-warningspy-module",
        "title": "The warnings.py module",
        "section": "The warnings.py module",
        "text": "The warnings.py module\nwarnings.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#summary",
        "title": "The warnings.py module > Summary",
        "section": "Summary",
        "text": "connect_warnings\nConnect Mechanical warnings to the warnings Python module.\ndisconnect_warnings\nDisconnect Mechanical warnings from the warnings Python module.\nSummary\nconnect_warnings\ndisconnect_warnings"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#description",
        "title": "The warnings.py module > Description",
        "section": "Description",
        "text": "Hook to register obsolete warnings.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#module-detail",
        "title": "The warnings.py module > Module detail",
        "section": "Module detail",
        "text": "Connect Mechanical warnings to the warnings Python module.\nDisconnect Mechanical warnings from the warnings Python module.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#warnings.connect_warnings",
        "title": "The warnings.py module > Module detail > connect_warnings",
        "section": "Module detail > connect_warnings",
        "text": "warnings.connect_warnings(app: ansys.mechanical.core.embedding.app.App)\n\nConnect Mechanical warnings to the warnings Python module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/warnings/index",
        "href": "api/ansys/mechanical/core/embedding/warnings/index.html#warnings.disconnect_warnings",
        "title": "The warnings.py module > Module detail > disconnect_warnings",
        "section": "Module detail > disconnect_warnings",
        "text": "warnings.disconnect_warnings(app)\n\nDisconnect Mechanical warnings from the warnings Python module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#pymechanicalcustomadapter",
        "title": "PyMechanicalCustomAdapter",
        "section": "PyMechanicalCustomAdapter",
        "text": "Bases: logging.LoggerAdapter\nKeeps the reference to the name of the Mechanical instance dynamic.\nThe standard approach supplies extra input to the logger. If this approach\nwas used, Mechanical instances would have to be inputted every time a log\nis created.\nUsing an adapter means that the reference to the Mechanical instance must only\nbe specified once.\nPyMechanicalCustomAdapter\nPyMechanicalCustomAdapter\nlogging.LoggerAdapter"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#ansys.mechanical.core.logging.PyMechanicalCustomAdapter",
        "title": "PyMechanicalCustomAdapter > PyMechanicalCustomAdapter > PyMechanicalCustomAdapter",
        "section": "PyMechanicalCustomAdapter > PyMechanicalCustomAdapter",
        "text": "class ansys.mechanical.core.logging.PyMechanicalCustomAdapter(logger, extra=None)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the name of the Mechanical instance dynamic.\n\nThe standard approach supplies extra input to the logger. If this approach\nwas used, Mechanical instances would have to be inputted every time a log\nis created.\n\nUsing an adapter means that the reference to the Mechanical instance must only\nbe specified once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#overview",
        "title": "PyMechanicalCustomAdapter > Overview",
        "section": "Overview",
        "text": "process\nProcess the message.\nlog_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler\nOverview\nprocess\nlog_to_file\nlog_to_stdout\nsetLevel\nlevel\nfile_handler\nstdout_handler\nlogger\nstd_out_handler"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#import-detail",
        "title": "PyMechanicalCustomAdapter > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.logging import PyMechanicalCustomAdapter\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#attribute-detail",
        "title": "PyMechanicalCustomAdapter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.level",
        "title": "PyMechanicalCustomAdapter > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "PyMechanicalCustomAdapter.level = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.file_handler",
        "title": "PyMechanicalCustomAdapter > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "PyMechanicalCustomAdapter.file_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.stdout_handler",
        "title": "PyMechanicalCustomAdapter > Attribute detail > stdout_handler",
        "section": "Attribute detail > stdout_handler",
        "text": "PyMechanicalCustomAdapter.stdout_handler = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.logger",
        "title": "PyMechanicalCustomAdapter > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "PyMechanicalCustomAdapter.logger\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.std_out_handler",
        "title": "PyMechanicalCustomAdapter > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "PyMechanicalCustomAdapter.std_out_handler\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#method-detail",
        "title": "PyMechanicalCustomAdapter > Method detail",
        "section": "Method detail",
        "text": "Process the message.\nAdd a file handler to the logger.\nName of the file where logs are recorded. The default is FILE_NAME.\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\nAdd a standard output handler to the logger.\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\nChange the log level of the object and the attached handlers.\nLevel of logging. The default is \"DEBUG\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\nMethod detail\npython:str\noptional\nFILE_NAME\npython:str\noptional\nNone\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\npython:str\noptional\nNone\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\"\npython:str\noptional\n\"DEBUG\"\n\"DEBUG\"\n\"INFO\"\n\"WARNING\"\n\"ERROR\""
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.process",
        "title": "PyMechanicalCustomAdapter > Method detail > process",
        "section": "Method detail > process",
        "text": "PyMechanicalCustomAdapter.process(msg, kwargs)\n\nProcess the message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.log_to_file",
        "title": "PyMechanicalCustomAdapter > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "PyMechanicalCustomAdapter.log_to_file(filename=FILE_NAME, level=LOG_LEVEL)\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where logs are recorded. The default is FILE_NAME.\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.log_to_stdout",
        "title": "PyMechanicalCustomAdapter > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "PyMechanicalCustomAdapter.log_to_stdout(level=LOG_LEVEL)\n\nAdd a standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is None, in which case the \"DEBUG\"\nlevel is used. Options are \"DEBUG\", \"INFO\", \"WARNING\",\nand \"ERROR\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter",
        "href": "api/ansys/mechanical/core/logging/PyMechanicalCustomAdapter.html#PyMechanicalCustomAdapter.setLevel",
        "title": "PyMechanicalCustomAdapter > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "PyMechanicalCustomAdapter.setLevel(level='DEBUG')\n\nChange the log level of the object and the attached handlers.\n\nParameters\n\nlevel\n\npython:str, optional\n\nLevel of logging. The default is \"DEBUG\". Options are \"DEBUG\",\n\"INFO\", \"WARNING\", and \"ERROR\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#instancefilter",
        "title": "InstanceFilter",
        "section": "InstanceFilter",
        "text": "Bases: logging.Filter\nEnsures that the instance name record always exists.\nInstanceFilter\nInstanceFilter\nlogging.Filter"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#ansys.mechanical.core.logging.InstanceFilter",
        "title": "InstanceFilter > InstanceFilter > InstanceFilter",
        "section": "InstanceFilter > InstanceFilter",
        "text": "class ansys.mechanical.core.logging.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance name record always exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#overview",
        "title": "InstanceFilter > Overview",
        "section": "Overview",
        "text": "filter\nCheck the log record and return True to log it or False to discard it.\nOverview\nfilter\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#import-detail",
        "title": "InstanceFilter > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.logging import InstanceFilter\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#method-detail",
        "title": "InstanceFilter > Method detail",
        "section": "Method detail",
        "text": "Check the log record and return True to log it or False to discard it.\nMethod detail\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/logging/InstanceFilter",
        "href": "api/ansys/mechanical/core/logging/InstanceFilter.html#InstanceFilter.filter",
        "title": "InstanceFilter > Method detail > filter",
        "section": "Method detail > filter",
        "text": "InstanceFilter.filter(record)\n\nCheck the log record and return True to log it or False to discard it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/index",
        "href": "api/ansys/mechanical/core/pool/index.html#the-poolpy-module",
        "title": "The pool.py module",
        "section": "The pool.py module",
        "text": "The pool.py module\npool.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/index",
        "href": "api/ansys/mechanical/core/pool/index.html#summary",
        "title": "The pool.py module > Summary",
        "section": "Summary",
        "text": "LocalMechanicalPool\nCreate a pool of Mechanical instances.\navailable_ports\nGet a list of a given number of available ports starting from a specified port number.\nSummary\nLocalMechanicalPool\navailable_ports"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/index",
        "href": "api/ansys/mechanical/core/pool/index.html#description",
        "title": "The pool.py module > Description",
        "section": "Description",
        "text": "This module is for threaded implementations of the Mechanical interface.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/index",
        "href": "api/ansys/mechanical/core/pool/index.html#module-detail",
        "title": "The pool.py module > Module detail",
        "section": "Module detail",
        "text": "Get a list of a given number of available ports starting from a specified port number.\nNumber of available ports to return.\nNumber of the port to start the search from. The default is\nMECHANICAL_DEFAULT_PORT.\nModule detail\npython:int\nMECHANICAL_DEFAULT_PORT"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/index",
        "href": "api/ansys/mechanical/core/pool/index.html#pool.available_ports",
        "title": "The pool.py module > Module detail > available_ports",
        "section": "Module detail > available_ports",
        "text": "pool.available_ports(n_ports, starting_port=MECHANICAL_DEFAULT_PORT)\n\nGet a list of a given number of available ports starting from a specified port number.\n\nParameters\n\nn_ports\n\npython:int\n\nNumber of available ports to return.\n\nstarting_port: int, option\n\nNumber of the port to start the search from. The default is\nMECHANICAL_DEFAULT_PORT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/docker",
        "href": "getting_started/docker.html#using-mechanical-through-docker",
        "title": "Using Mechanical through Docker",
        "section": "Using Mechanical through Docker",
        "text": "You can run Mechanical within a container on any operating system\nusing Docker and connect to it with\nPyMechanical.\nRunning Mechanical in a containerized environment like Docker or Apptainer\n(formerly Singularity) is advantageous for several reasons, including:\nAbility to run in a consistent environment regardless of the host operating system\nPortability and ease of installation\nLarge-scale cluster deployment using Kubernetes\nGenuine application isolation through containerization\nUsing Mechanical through Docker"
    },
    {
        "objectID": "getting_started/docker",
        "href": "getting_started/docker.html#install-the-mechanical-image",
        "title": "Using Mechanical through Docker > Install the Mechanical image",
        "section": "Install the Mechanical image",
        "text": "There is a Docker image hosted in the PyMechanical GitHub repository that you\ncan download using your GitHub credentials.\nAssuming that you have Docker installed, you can authorize Docker to access\nthis repository using a GitHub personal access token with packages read\npermission. For more information, see GitHub’s Creating a personal access token.\nSave this token to a file with a command like this:\nThis command lets you send the token to Docker without leaving the token value\nin your history.\nNext, authorize Docker to access the repository with this code:\nYou can now launch Mechanical directly from Docker with a short script or\ndirectly from the command line. Because this image does not contain a license\nserver, you must enter in the IP address of your license server in the\nLICENSE_SERVER environment variable.\nLaunch Mechanical with this code:\nNote that port 10000, which is local to the container, is mapped to\nport 10000 on the host. This makes it possible to use different\nport mappings to launch multiple instances of Mechanical.\nAs Mechanical starts, you can see status information:\nInstall the Mechanical image\npackages read\nLICENSE_SERVER\n10000\n10000"
    },
    {
        "objectID": "getting_started/docker",
        "href": "getting_started/docker.html#connect-to-the-mechanical-container",
        "title": "Using Mechanical through Docker > Connect to the Mechanical container",
        "section": "Connect to the Mechanical container",
        "text": "You can now connect to the Mechanical container with this code:\nIf you mapped to any port other than 10000, you would specify the port when\nconnecting to Mechanical:\nVerify your connection with this code:\nConnect to the Mechanical container\n10000"
    },
    {
        "objectID": "getting_started/docker",
        "href": "getting_started/docker.html#additional-considerations",
        "title": "Using Mechanical through Docker > Additional considerations",
        "section": "Additional considerations",
        "text": "You can provide additional command line parameters to Mechanical by appending them\nto the Docker command. For example, this code shows how you pass feature flags:\nFor additional command line arguments, see the Scripting in Mechanical Guide in the\nAnsys Help.\nAdditional considerations"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:01.528 total execution time for 1 file from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_gallery_examples_embedding_n_remote_embedding_remote.py (../../examples/embedding_n_remote/embedding_remote.py)\n01:01.528\n0.0\nComputation times\n../../examples/embedding_n_remote/embedding_remote.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#messagemanager",
        "title": "MessageManager",
        "section": "MessageManager",
        "text": "Message manager for adding, fetching, and printing messages.\nMessageManager\nMessageManager"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#ansys.mechanical.core.embedding.messages.MessageManager",
        "title": "MessageManager > MessageManager > MessageManager",
        "section": "MessageManager > MessageManager",
        "text": "class ansys.mechanical.core.embedding.messages.MessageManager(app)\n\nMessage manager for adding, fetching, and printing messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#overview",
        "title": "MessageManager > Overview",
        "section": "Overview",
        "text": "add\nAdd a message and update the cache.\nremove\nRemove a message by index.\nshow\nPrint all messages with full details.\nclear\nClear all messages.\n__repr__\nProvide a DataFrame representation of all messages.\n__str__\nProvide a custom string representation of the messages.\n__getitem__\nAllow indexed access to messages.\n__len__\nReturn the number of messages.\nOverview\nadd\nremove\nshow\nclear\n__repr__\n__str__\n__getitem__\n__len__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#import-detail",
        "title": "MessageManager > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.messages import MessageManager\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#method-detail",
        "title": "MessageManager > Method detail",
        "section": "Method detail",
        "text": "Provide a DataFrame representation of all messages.\nProvide a custom string representation of the messages.\nAllow indexed access to messages.\nReturn the number of messages.\nAdd a message and update the cache.\nSeverity of the message. Can be “info”, “warning”, or “error”.\nMessage text.\nRemove a message by index.\nIndex of the message to remove.\nPrint all messages with full details.\nSemicolon separated list of message attributes to display.\nDefault is “severity;message”.\nif filter is “*”, all available attributes will be displayed.\nClear all messages.\nMethod detail\npython:str\npython:str\npython:int\npython:str\noptional"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.__repr__",
        "title": "MessageManager > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "MessageManager.__repr__()\n\nProvide a DataFrame representation of all messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.__str__",
        "title": "MessageManager > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "MessageManager.__str__()\n\nProvide a custom string representation of the messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.__getitem__",
        "title": "MessageManager > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "MessageManager.__getitem__(index)\n\nAllow indexed access to messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.__len__",
        "title": "MessageManager > Method detail > __len__",
        "section": "Method detail > __len__",
        "text": "MessageManager.__len__()\n\nReturn the number of messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.add",
        "title": "MessageManager > Method detail > add",
        "section": "Method detail > add",
        "text": "MessageManager.add(severity: str, text: str)\n\nAdd a message and update the cache.\n\nParameters\n\nseverity\n\npython:str\n\nSeverity of the message. Can be “info”, “warning”, or “error”.\n\ntext\n\npython:str\n\nMessage text.\n\nExamples\n\n>>> app.messages.add(\"info\", \"User clicked the start button.\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.remove",
        "title": "MessageManager > Method detail > remove",
        "section": "Method detail > remove",
        "text": "MessageManager.remove(index: int)\n\nRemove a message by index.\n\nParameters\n\nindex\n\npython:int\n\nIndex of the message to remove.\n\nExamples\n\n>>> app.messages.remove(0)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.show",
        "title": "MessageManager > Method detail > show",
        "section": "Method detail > show",
        "text": "MessageManager.show(filter='Severity;DisplayString')\n\nPrint all messages with full details.\n\nParameters\n\nfilter\n\npython:str, optional\n\nSemicolon separated list of message attributes to display.\nDefault is “severity;message”.\nif filter is “*”, all available attributes will be displayed.\n\nExamples\n\n>>> app.messages.show()\n... severity: info\n... message: Sample message.\n\n>>> app.messages.show(filter=\"time_stamp;severity;message\")\n... time_stamp: 1/30/2025 12:10:35 PM\n... severity: info\n... message: Sample message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/messages/MessageManager",
        "href": "api/ansys/mechanical/core/embedding/messages/MessageManager.html#MessageManager.clear",
        "title": "MessageManager > Method detail > clear",
        "section": "Method detail > clear",
        "text": "MessageManager.clear()\n\nClear all messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#apibackend",
        "title": "APIBackend",
        "section": "APIBackend",
        "text": "Provides API backend for Mechanical logging system.\nAPIBackend\nAPIBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#ansys.mechanical.core.embedding.logger.windows_api.APIBackend",
        "title": "APIBackend > APIBackend > APIBackend",
        "section": "APIBackend > APIBackend",
        "text": "class ansys.mechanical.core.embedding.logger.windows_api.APIBackend\n\nProvides API backend for Mechanical logging system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#overview",
        "title": "APIBackend > Overview",
        "section": "Overview",
        "text": "flush\nFlush the log manually.\nenable\nEnable logging.\ndisable\nDisable logging.\nset_log_level\nSet the log level for Mechanical based on the Python log level.\nset_auto_flush\nSet whether to auto flush to the standard log file.\nset_directory\nSet the location to write the log file to.\nset_base_directory\nSet the base location to write the log file to.\ncan_log_message\nReturn whether a message with the given severity is outputted to the log.\nlog_message\nLog the message to the configured logging mechanism.\nOverview\nflush\nenable\ndisable\nset_log_level\nset_auto_flush\nset_directory\nset_base_directory\ncan_log_message\nlog_message"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#import-detail",
        "title": "APIBackend > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger.windows_api import APIBackend\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#method-detail",
        "title": "APIBackend > Method detail",
        "section": "Method detail",
        "text": "Flush the log manually.\nEnable logging.\nDisable logging.\nSet the log level for Mechanical based on the Python log level.\nSet whether to auto flush to the standard log file.\nSet the location to write the log file to.\nSet the base location to write the log file to.\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\nThis does not have an API to set at runtime.\nReturn whether a message with the given severity is outputted to the log.\nLog the message to the configured logging mechanism.\nMethod detail\nset_directory"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.flush",
        "title": "APIBackend > Method detail > flush",
        "section": "Method detail > flush",
        "text": "APIBackend.flush() -> None\n\nFlush the log manually.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.enable",
        "title": "APIBackend > Method detail > enable",
        "section": "Method detail > enable",
        "text": "APIBackend.enable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nEnable logging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.disable",
        "title": "APIBackend > Method detail > disable",
        "section": "Method detail > disable",
        "text": "APIBackend.disable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nDisable logging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.set_log_level",
        "title": "APIBackend > Method detail > set_log_level",
        "section": "Method detail > set_log_level",
        "text": "APIBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nSet the log level for Mechanical based on the Python log level.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.set_auto_flush",
        "title": "APIBackend > Method detail > set_auto_flush",
        "section": "Method detail > set_auto_flush",
        "text": "APIBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.set_directory",
        "title": "APIBackend > Method detail > set_directory",
        "section": "Method detail > set_directory",
        "text": "APIBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.set_base_directory",
        "title": "APIBackend > Method detail > set_base_directory",
        "section": "Method detail > set_base_directory",
        "text": "APIBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\nThis does not have an API to set at runtime.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.can_log_message",
        "title": "APIBackend > Method detail > can_log_message",
        "section": "Method detail > can_log_message",
        "text": "APIBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/windows_api/APIBackend.html#APIBackend.log_message",
        "title": "APIBackend > Method detail > log_message",
        "section": "Method detail > log_message",
        "text": "APIBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#getterwrapper",
        "title": "GetterWrapper",
        "section": "GetterWrapper",
        "text": "Bases: object\nWrapper class around an attribute of an object.\nGetterWrapper\nGetterWrapper\nobject"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#ansys.mechanical.core.embedding.app.GetterWrapper",
        "title": "GetterWrapper > GetterWrapper > GetterWrapper",
        "section": "GetterWrapper > GetterWrapper",
        "text": "class ansys.mechanical.core.embedding.app.GetterWrapper(obj, getter)\n\nBases: object\n\nWrapper class around an attribute of an object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#overview",
        "title": "GetterWrapper > Overview",
        "section": "Overview",
        "text": "__getattr__\nWrap getters to the wrapped object.\n__setattr__\nWrap setters to the wrapped object.\nOverview\n__getattr__\n__setattr__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#import-detail",
        "title": "GetterWrapper > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.app import GetterWrapper\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#method-detail",
        "title": "GetterWrapper > Method detail",
        "section": "Method detail",
        "text": "Wrap getters to the wrapped object.\nWrap setters to the wrapped object.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#GetterWrapper.__getattr__",
        "title": "GetterWrapper > Method detail > __getattr__",
        "section": "Method detail > __getattr__",
        "text": "GetterWrapper.__getattr__(attr)\n\nWrap getters to the wrapped object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/GetterWrapper",
        "href": "api/ansys/mechanical/core/embedding/app/GetterWrapper.html#GetterWrapper.__setattr__",
        "title": "GetterWrapper > Method detail > __setattr__",
        "section": "Method detail > __setattr__",
        "text": "GetterWrapper.__setattr__(attr, value)\n\nWrap setters to the wrapped object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#poster",
        "title": "Poster",
        "section": "Poster",
        "text": "Class which can post a python callable function to Mechanical’s main thread.\nPoster\nPoster"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#ansys.mechanical.core.embedding.poster.Poster",
        "title": "Poster > Poster > Poster",
        "section": "Poster > Poster",
        "text": "class ansys.mechanical.core.embedding.poster.Poster\n\nClass which can post a python callable function to Mechanical’s main thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#overview",
        "title": "Poster > Overview",
        "section": "Overview",
        "text": "try_post\nPost the callable to Mechanical’s main thread.\npost\nPost the callable to Mechanical’s main thread.\nOverview\ntry_post\npost"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#import-detail",
        "title": "Poster > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.poster import Poster\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#method-detail",
        "title": "Poster > Method detail",
        "section": "Method detail",
        "text": "Post the callable to Mechanical’s main thread.\nThis does the same thing as post but if callable\nraises an exception, try_post will raise the same\nexception to the caller of try_post.\nPost the callable to Mechanical’s main thread.\nThe main thread needs to be receiving posted messages\nin order for this to work from a background thread. Use\nthe sleep routine from the utils module to make\nMechanical available to receive messages.\nReturns the result of callable if any.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#Poster.try_post",
        "title": "Poster > Method detail > try_post",
        "section": "Method detail > try_post",
        "text": "Poster.try_post(callable: Callable) -> Any\n\nPost the callable to Mechanical’s main thread.\n\nThis does the same thing as post but if callable\nraises an exception, try_post will raise the same\nexception to the caller of try_post.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/poster/Poster",
        "href": "api/ansys/mechanical/core/embedding/poster/Poster.html#Poster.post",
        "title": "Poster > Method detail > post",
        "section": "Method detail > post",
        "text": "Poster.post(callable: Callable) -> Any\n\nPost the callable to Mechanical’s main thread.\n\nThe main thread needs to be receiving posted messages\nin order for this to work from a background thread. Use\nthe sleep routine from the utils module to make\nMechanical available to receive messages.\n\nReturns the result of callable if any.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#apibackend",
        "title": "APIBackend",
        "section": "APIBackend",
        "text": "Provides the API backend for the Mechanical logging system.\nAPIBackend\nAPIBackend"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#ansys.mechanical.core.embedding.logger.linux_api.APIBackend",
        "title": "APIBackend > APIBackend > APIBackend",
        "section": "APIBackend > APIBackend",
        "text": "class ansys.mechanical.core.embedding.logger.linux_api.APIBackend\n\nProvides the API backend for the Mechanical logging system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#overview",
        "title": "APIBackend > Overview",
        "section": "Overview",
        "text": "flush\nFlush the log manually.\nenable\nEnable logging.\ndisable\nDisable logging.\nset_log_level\nSet the log level for Mechanical based on the Python log level.\nset_auto_flush\nSet whether to auto flush to the standard log file.\nset_directory\nSet the location to write the log file to.\nset_base_directory\nSet the base location to write the log file to.\ncan_log_message\nReturn whether a message with the given severity is outputted to the log.\nlog_message\nLog the message to the configured logging mechanism.\nOverview\nflush\nenable\ndisable\nset_log_level\nset_auto_flush\nset_directory\nset_base_directory\ncan_log_message\nlog_message"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#import-detail",
        "title": "APIBackend > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger.linux_api import APIBackend\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#method-detail",
        "title": "APIBackend > Method detail",
        "section": "Method detail",
        "text": "Flush the log manually.\nEnable logging.\nDisable logging.\nSet the log level for Mechanical based on the Python log level.\nSet whether to auto flush to the standard log file.\nSet the location to write the log file to.\nSet the base location to write the log file to.\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\nThis does not have an API to set at runtime.\nReturn whether a message with the given severity is outputted to the log.\nLog the message to the configured logging mechanism.\nMethod detail\nset_directory"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.flush",
        "title": "APIBackend > Method detail > flush",
        "section": "Method detail > flush",
        "text": "APIBackend.flush() -> None\n\nFlush the log manually.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.enable",
        "title": "APIBackend > Method detail > enable",
        "section": "Method detail > enable",
        "text": "APIBackend.enable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nEnable logging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.disable",
        "title": "APIBackend > Method detail > disable",
        "section": "Method detail > disable",
        "text": "APIBackend.disable(sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nDisable logging.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.set_log_level",
        "title": "APIBackend > Method detail > set_log_level",
        "section": "Method detail > set_log_level",
        "text": "APIBackend.set_log_level(level: int, sink: int = sinks.StandardSinks.CONSOLE) -> None\n\nSet the log level for Mechanical based on the Python log level.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.set_auto_flush",
        "title": "APIBackend > Method detail > set_auto_flush",
        "section": "Method detail > set_auto_flush",
        "text": "APIBackend.set_auto_flush(flush: bool) -> None\n\nSet whether to auto flush to the standard log file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.set_directory",
        "title": "APIBackend > Method detail > set_directory",
        "section": "Method detail > set_directory",
        "text": "APIBackend.set_directory(directory: str) -> None\n\nSet the location to write the log file to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.set_base_directory",
        "title": "APIBackend > Method detail > set_base_directory",
        "section": "Method detail > set_base_directory",
        "text": "APIBackend.set_base_directory(base_directory: str) -> None\n\nSet the base location to write the log file to.\n\nThe base directory contains time-stamped subfolders where the log file\nis actually written to. If a base directory is set, it takes precedence over the\nset_directory location.\n\nThis does not have an API to set at runtime.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.can_log_message",
        "title": "APIBackend > Method detail > can_log_message",
        "section": "Method detail > can_log_message",
        "text": "APIBackend.can_log_message(level: int) -> bool\n\nReturn whether a message with the given severity is outputted to the log.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend",
        "href": "api/ansys/mechanical/core/embedding/logger/linux_api/APIBackend.html#APIBackend.log_message",
        "title": "APIBackend > Method detail > log_message",
        "section": "Method detail > log_message",
        "text": "APIBackend.log_message(level: int, context: str, message: str) -> None\n\nLog the message to the configured logging mechanism.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/loader/index",
        "href": "api/ansys/mechanical/core/embedding/loader/index.html#the-loaderpy-module",
        "title": "The loader.py module",
        "section": "The loader.py module",
        "text": "The loader.py module\nloader.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/loader/index",
        "href": "api/ansys/mechanical/core/embedding/loader/index.html#summary",
        "title": "The loader.py module > Summary",
        "section": "Summary",
        "text": "load_clr\nLoad the clr, the outcome of this function is that clr is usable.\nSummary\nload_clr"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/loader/index",
        "href": "api/ansys/mechanical/core/embedding/loader/index.html#description",
        "title": "The loader.py module > Description",
        "section": "Description",
        "text": "clr_loader for pymechanical embedding. This loads the CLR on both windows and linux.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/loader/index",
        "href": "api/ansys/mechanical/core/embedding/loader/index.html#module-detail",
        "title": "The loader.py module > Module detail",
        "section": "Module detail",
        "text": "Load the clr, the outcome of this function is that clr is usable.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/loader/index",
        "href": "api/ansys/mechanical/core/embedding/loader/index.html#loader.load_clr",
        "title": "The loader.py module > Module detail > load_clr",
        "section": "Module detail > load_clr",
        "text": "loader.load_clr(install_loc: str) -> None\n\nLoad the clr, the outcome of this function is that clr is usable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#the-feature_flagspy-module",
        "title": "The feature_flags.py module",
        "section": "The feature_flags.py module",
        "text": "The feature_flags.py module\nfeature_flags.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#summary",
        "title": "The feature_flags.py module > Summary",
        "section": "Summary",
        "text": "FeatureFlags\nSupported feature flag names.\nget_feature_flag_names\nGet the available feature flags.\nget_command_line_arguments\nGet the command line arguments as an array for the given flags.\nSummary\nFeatureFlags\nget_feature_flag_names\nget_command_line_arguments"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#description",
        "title": "The feature_flags.py module > Description",
        "section": "Description",
        "text": "Mechanical beta feature flags.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#module-detail",
        "title": "The feature_flags.py module > Module detail",
        "section": "Module detail",
        "text": "Get the available feature flags.\nGet the command line arguments as an array for the given flags.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#feature_flags.get_feature_flag_names",
        "title": "The feature_flags.py module > Module detail > get_feature_flag_names",
        "section": "Module detail > get_feature_flag_names",
        "text": "feature_flags.get_feature_flag_names() -> List[str]\n\nGet the available feature flags.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/feature_flags/index",
        "href": "api/ansys/mechanical/core/feature_flags/index.html#feature_flags.get_command_line_arguments",
        "title": "The feature_flags.py module > Module detail > get_command_line_arguments",
        "section": "Module detail > get_command_line_arguments",
        "text": "feature_flags.get_command_line_arguments(flags: List[str])\n\nGet the command line arguments as an array for the given flags.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#the-ide_configpy-module",
        "title": "The ide_config.py module",
        "section": "The ide_config.py module",
        "text": "The ide_config.py module\nide_config.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#summary",
        "title": "The ide_config.py module > Summary",
        "section": "Summary",
        "text": "get_stubs_location\nFind the ansys-mechanical-stubs installation location in site-packages.\nget_stubs_versions\nRetrieve the revision numbers in ansys-mechanical-stubs.\ncli\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs.\nSummary\nget_stubs_location\nget_stubs_versions\ncli"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#description",
        "title": "The ide_config.py module > Description",
        "section": "Description",
        "text": "Convenience CLI to run mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#module-detail",
        "title": "The ide_config.py module > Module detail",
        "section": "Module detail",
        "text": "Find the ansys-mechanical-stubs installation location in site-packages.\nThe path to the ansys-mechanical-stubs installation in site-packages.\nRetrieve the revision numbers in ansys-mechanical-stubs.\nThe path to the ansys-mechanical-stubs installation in site-packages.\nThe list containing minimum and maximum versions in the ansys-mechanical-stubs package.\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs.\nThe IDE to set up autocomplete settings. By default, it’s vscode.\nThe type of settings to update. Either “user” or “workspace” in VS Code.\nBy default, it’s user.\nThe Mechanical revision number. For example, “251”.\nIf unspecified, it finds the default Mechanical version from ansys-tools-path.\nModule detail\npathlib.Path\npython:list\nvscode\nuser"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#ide_config.get_stubs_location",
        "title": "The ide_config.py module > Module detail > get_stubs_location",
        "section": "Module detail > get_stubs_location",
        "text": "ide_config.get_stubs_location()\n\nFind the ansys-mechanical-stubs installation location in site-packages.\n\nReturns\n\npathlib.Path\n\nThe path to the ansys-mechanical-stubs installation in site-packages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#ide_config.get_stubs_versions",
        "title": "The ide_config.py module > Module detail > get_stubs_versions",
        "section": "Module detail > get_stubs_versions",
        "text": "ide_config.get_stubs_versions(stubs_location: pathlib.Path)\n\nRetrieve the revision numbers in ansys-mechanical-stubs.\n\nParameters\n\npathlib.Path\n\nThe path to the ansys-mechanical-stubs installation in site-packages.\n\nReturns\n\npython:list\n\nThe list containing minimum and maximum versions in the ansys-mechanical-stubs package.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/ide_config/index",
        "href": "api/ansys/mechanical/core/ide_config/index.html#ide_config.cli",
        "title": "The ide_config.py module > Module detail > cli",
        "section": "Module detail > cli",
        "text": "ide_config.cli(ide: str, target: str, revision: int) -> None\n\nCLI tool to update settings.json files for autocomplete with ansys-mechanical-stubs.\n\nParameters\n\nide: str\n\nThe IDE to set up autocomplete settings. By default, it’s vscode.\n\ntarget: str\n\nThe type of settings to update. Either “user” or “workspace” in VS Code.\nBy default, it’s user.\n\nrevision: int\n\nThe Mechanical revision number. For example, “251”.\nIf unspecified, it finds the default Mechanical version from ansys-tools-path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide_embedding/libraries",
        "href": "user_guide_embedding/libraries.html#libraries",
        "title": "Libraries",
        "section": "Libraries",
        "text": "This is an experimental feature. Some of these libraries may not work.\nMost of Mechanical’s scripting APIs are implemented in C#. However, there are a small number\nof Python modules that are distributed with the installation of Mechanical that can be used\nfrom within the Mechanical Scripting Pane. These modules are not available for use from an\nembedded instance of Mechanical in Python because Python does not know where to find them.\nBut, in order to use these modules, you need to use the experimental function\nadd_mechanical_python_libraries to help Python locate them and make it possible to import\nthem. In addition, it is necessary to first initialize the embedded instance of Mechanical\nbecause these libraries may expect the .NET Common Language Runtime to be initialized as well\nas for the appropriate C# libraries to be loaded.\nTo use the above function, run the following:\nUsing version as argument to add_mechanical_python_libraries() is deprecated.\nLibraries\nadd_mechanical_python_libraries\nadd_mechanical_python_libraries()"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#backgroundapp",
        "title": "BackgroundApp",
        "section": "BackgroundApp",
        "text": "Background App.\nBackgroundApp\nBackgroundApp"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#ansys.mechanical.core.embedding.background.BackgroundApp",
        "title": "BackgroundApp > BackgroundApp > BackgroundApp",
        "section": "BackgroundApp > BackgroundApp",
        "text": "class ansys.mechanical.core.embedding.background.BackgroundApp(**kwargs)\n\nBackground App.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#overview",
        "title": "BackgroundApp > Overview",
        "section": "Overview",
        "text": "post\nPost callable method to the background app thread.\ntry_post\nTry post callable method to the background app thread.\nstop\nStop the background app thread.\napp\nGet the App instance of the background thread.\nOverview\npost\ntry_post\nstop\napp"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#import-detail",
        "title": "BackgroundApp > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.background import BackgroundApp\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#property-detail",
        "title": "BackgroundApp > Property detail",
        "section": "Property detail",
        "text": "Get the App instance of the background thread.\nIt is not meant to be used aside from passing to methods using post.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#BackgroundApp.app",
        "title": "BackgroundApp > Property detail > app",
        "section": "Property detail > app",
        "text": "property BackgroundApp.app: ansys.mechanical.core.App\n\nGet the App instance of the background thread.\n\nIt is not meant to be used aside from passing to methods using post.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#method-detail",
        "title": "BackgroundApp > Method detail",
        "section": "Method detail",
        "text": "Post callable method to the background app thread.\nTry post callable method to the background app thread.\nStop the background app thread.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#BackgroundApp.post",
        "title": "BackgroundApp > Method detail > post",
        "section": "Method detail > post",
        "text": "BackgroundApp.post(callable: Callable)\n\nPost callable method to the background app thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#BackgroundApp.try_post",
        "title": "BackgroundApp > Method detail > try_post",
        "section": "Method detail > try_post",
        "text": "BackgroundApp.try_post(callable: Callable)\n\nTry post callable method to the background app thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/BackgroundApp",
        "href": "api/ansys/mechanical/core/embedding/background/BackgroundApp.html#BackgroundApp.stop",
        "title": "BackgroundApp > Method detail > stop",
        "section": "Method detail > stop",
        "text": "BackgroundApp.stop() -> None\n\nStop the background app thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#the-downloadspy-module",
        "title": "The downloads.py module",
        "section": "The downloads.py module",
        "text": "The downloads.py module\ndownloads.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#summary",
        "title": "The downloads.py module > Summary",
        "section": "Summary",
        "text": "download_file\nDownload a file from PyAnsys examples Github repo.\ndelete_downloads\nDelete all downloaded examples to free space or update the files.\nSummary\ndownload_file\ndelete_downloads"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#description",
        "title": "The downloads.py module > Description",
        "section": "Description",
        "text": "Functions to download sample datasets from the PyAnsys data repository.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#module-detail",
        "title": "The downloads.py module > Module detail",
        "section": "Module detail",
        "text": "Download a file from PyAnsys examples Github repo.\nName of the file to download\nPath under the PyAnsys Github examples repo\nOptional destination to download the directory to\nFlag to force download even if the file exists in cache\nTuple containing filepath to be used and the local filepath of the downloaded directory\nThe two are different in case of containers.\nDownload a file from the server\nDelete all downloaded examples to free space or update the files.\nTrue if delete_downlaods succeeds, False otherwise.\nDelete all downloaded examples\nModule detail\nTuple\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#downloads.download_file",
        "title": "The downloads.py module > Module detail > download_file",
        "section": "Module detail > download_file",
        "text": "downloads.download_file(filename: str, *directory: str, destination: str | None = None, force: bool = False)\n\nDownload a file from PyAnsys examples Github repo.\n\nParameters\n\nfilename: str\n\nName of the file to download\n\ndirectory: tuple[str]\n\nPath under the PyAnsys Github examples repo\n\ndestination: Optional[str]\n\nOptional destination to download the directory to\n\nforce: bool\n\nFlag to force download even if the file exists in cache\n\nReturns\n\nTuple[python:str, python:str]\n\nTuple containing filepath to be used and the local filepath of the downloaded directory\nThe two are different in case of containers.\n\nExamples\n\nDownload a file from the server\n\n>>> from ansys.mechanical.core import examples\n>>> filename = examples.download_file('example_01_geometry.agdb', 'pymechanical', '00_basic')\n>>> filename\n'C:/Users/user/AppData/Local/ansys_mechanical_core/ansys_mechanical_core/examples/example_01_geometry.agdb'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/downloads/index",
        "href": "api/ansys/mechanical/core/examples/downloads/index.html#downloads.delete_downloads",
        "title": "The downloads.py module > Module detail > delete_downloads",
        "section": "Module detail > delete_downloads",
        "text": "downloads.delete_downloads() -> bool\n\nDelete all downloaded examples to free space or update the files.\n\nReturns\n\nbool\n\nTrue if delete_downlaods succeeds, False otherwise.\n\nExamples\n\nDelete all downloaded examples\n\n>>> from ansys.mechanical.core import examples\n>>> return_value = examples.delete_downloads()\n>>> return_value\n'True'\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#mechanicallauncher",
        "title": "MechanicalLauncher",
        "section": "MechanicalLauncher",
        "text": "Launches Mechanical in batch or UI mode.\nMechanicalLauncher\nMechanicalLauncher"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#ansys.mechanical.core.launcher.MechanicalLauncher",
        "title": "MechanicalLauncher > MechanicalLauncher > MechanicalLauncher",
        "section": "MechanicalLauncher > MechanicalLauncher",
        "text": "class ansys.mechanical.core.launcher.MechanicalLauncher(batch, port, exe_path, additional_args=None, additional_envs=None, verbose=False)\n\nLaunches Mechanical in batch or UI mode.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#overview",
        "title": "MechanicalLauncher > Overview",
        "section": "Overview",
        "text": "launch\nLaunch Mechanical with the gRPC server.\nbatch\nport\nexe_path\nadditional_args\nadditional_envs\nverbose\nverify_path_exists\nThrow an exception if the given exe_path does not exist.\nOverview\nlaunch\nbatch\nport\nexe_path\nadditional_args\nadditional_envs\nverbose\nverify_path_exists"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#import-detail",
        "title": "MechanicalLauncher > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.launcher import MechanicalLauncher\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#attribute-detail",
        "title": "MechanicalLauncher > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.batch",
        "title": "MechanicalLauncher > Attribute detail > batch",
        "section": "Attribute detail > batch",
        "text": "MechanicalLauncher.batch\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.port",
        "title": "MechanicalLauncher > Attribute detail > port",
        "section": "Attribute detail > port",
        "text": "MechanicalLauncher.port\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.exe_path",
        "title": "MechanicalLauncher > Attribute detail > exe_path",
        "section": "Attribute detail > exe_path",
        "text": "MechanicalLauncher.exe_path\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.additional_args",
        "title": "MechanicalLauncher > Attribute detail > additional_args",
        "section": "Attribute detail > additional_args",
        "text": "MechanicalLauncher.additional_args = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.additional_envs",
        "title": "MechanicalLauncher > Attribute detail > additional_envs",
        "section": "Attribute detail > additional_envs",
        "text": "MechanicalLauncher.additional_envs = None\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.verbose",
        "title": "MechanicalLauncher > Attribute detail > verbose",
        "section": "Attribute detail > verbose",
        "text": "MechanicalLauncher.verbose = False\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#method-detail",
        "title": "MechanicalLauncher > Method detail",
        "section": "Method detail",
        "text": "Launch Mechanical with the gRPC server.\nThrow an exception if the given exe_path does not exist.\nPath to verify.\nMethod detail\npython:str"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.launch",
        "title": "MechanicalLauncher > Method detail > launch",
        "section": "Method detail > launch",
        "text": "MechanicalLauncher.launch()\n\nLaunch Mechanical with the gRPC server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/launcher/MechanicalLauncher",
        "href": "api/ansys/mechanical/core/launcher/MechanicalLauncher.html#MechanicalLauncher.verify_path_exists",
        "title": "MechanicalLauncher > Method detail > verify_path_exists",
        "section": "Method detail > verify_path_exists",
        "text": "static MechanicalLauncher.verify_path_exists(exe_path)\n\nThrow an exception if the given exe_path does not exist.\n\nParameters\n\nexe_path\n\npython:str\n\nPath to verify.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/index.html#the-serverpy-module",
        "title": "The server.py module",
        "section": "The server.py module",
        "text": "The server.py module\nserver.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/index.html#summary",
        "title": "The server.py module > Summary",
        "section": "Summary",
        "text": "MechanicalService\nStarts Mechanical app services.\nMechanicalEmbeddedServer\nStart rpc server.\nDefaultServiceMethods\nDefault service methods for MechanicalEmbeddedServer.\nMechanicalDefaultServer\nDefault server with default service methods.\nPYMECHANICAL_DEFAULT_RPC_PORT\nSummary\nMechanicalService\nMechanicalEmbeddedServer\nDefaultServiceMethods\nMechanicalDefaultServer\nPYMECHANICAL_DEFAULT_RPC_PORT"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/index.html#description",
        "title": "The server.py module > Description",
        "section": "Description",
        "text": "Remote Procedure Call (RPC) server.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/index.html#module-detail",
        "title": "The server.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/index.html#server.PYMECHANICAL_DEFAULT_RPC_PORT",
        "title": "The server.py module > Module detail > PYMECHANICAL_DEFAULT_RPC_PORT",
        "section": "Module detail > PYMECHANICAL_DEFAULT_RPC_PORT",
        "text": "server.PYMECHANICAL_DEFAULT_RPC_PORT = 20000\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#remote_method",
        "title": "remote_method",
        "section": "remote_method",
        "text": "Decorator for passing remote methods.\nremote_method\nremote_method"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#ansys.mechanical.core.embedding.rpc.utils.remote_method",
        "title": "remote_method > remote_method > remote_method",
        "section": "remote_method > remote_method",
        "text": "class ansys.mechanical.core.embedding.rpc.utils.remote_method(func)\n\nDecorator for passing remote methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#overview",
        "title": "remote_method > Overview",
        "section": "Overview",
        "text": "__call__\nCall the stored function with provided arguments.\n__call_method__\nCall the stored function with the instance and provided arguments.\n__get__\nReturn a partially applied method.\nOverview\n__call__\n__call_method__\n__get__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#import-detail",
        "title": "remote_method > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.utils import remote_method\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#method-detail",
        "title": "remote_method > Method detail",
        "section": "Method detail",
        "text": "Call the stored function with provided arguments.\nCall the stored function with the instance and provided arguments.\nReturn a partially applied method.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#remote_method.__call__",
        "title": "remote_method > Method detail > __call__",
        "section": "Method detail > __call__",
        "text": "remote_method.__call__(*args, **kwargs)\n\nCall the stored function with provided arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#remote_method.__call_method__",
        "title": "remote_method > Method detail > __call_method__",
        "section": "Method detail > __call_method__",
        "text": "remote_method.__call_method__(instance, *args, **kwargs)\n\nCall the stored function with the instance and provided arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/remote_method.html#remote_method.__get__",
        "title": "remote_method > Method detail > __get__",
        "section": "Method detail > __get__",
        "text": "remote_method.__get__(obj, objtype)\n\nReturn a partially applied method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app_libraries/index",
        "href": "api/ansys/mechanical/core/embedding/app_libraries/index.html#the-app_librariespy-module",
        "title": "The app_libraries.py module",
        "section": "The app_libraries.py module",
        "text": "The app_libraries.py module\napp_libraries.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app_libraries/index",
        "href": "api/ansys/mechanical/core/embedding/app_libraries/index.html#summary",
        "title": "The app_libraries.py module > Summary",
        "section": "Summary",
        "text": "add_mechanical_python_libraries\nAdd the Mechanical libraries path to sys.path.\nSummary\nadd_mechanical_python_libraries"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app_libraries/index",
        "href": "api/ansys/mechanical/core/embedding/app_libraries/index.html#description",
        "title": "The app_libraries.py module > Description",
        "section": "Description",
        "text": "System to add python libraries shipped with mechanical to the path.\nMechanical ships some pure Python modules that can be imported within\nMechanical’s console window. These modules are located in\n/path/to/Ansys Inc/vNnn/Addins/ACT/libraries/Mechanical\nFor example, the following files can be found there:\nansys.py\nchart.py\ncomhelper.py\ndialogs.py\nengineeringdata.py\ngraphics.py\nmaterials.py\nmechanical.py\nunits.py\nwbjn.py\nSome (but not all) of these are usable from within an embedded instance\nof Mechanical in Python.\nThis module provides a method to add that path to sys.path so that they\ncan be imported with the import statement.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app_libraries/index",
        "href": "api/ansys/mechanical/core/embedding/app_libraries/index.html#module-detail",
        "title": "The app_libraries.py module > Module detail",
        "section": "Module detail",
        "text": "Add the Mechanical libraries path to sys.path.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app_libraries/index",
        "href": "api/ansys/mechanical/core/embedding/app_libraries/index.html#app_libraries.add_mechanical_python_libraries",
        "title": "The app_libraries.py module > Module detail > add_mechanical_python_libraries",
        "section": "Module detail > add_mechanical_python_libraries",
        "text": "app_libraries.add_mechanical_python_libraries(app_or_version)\n\nAdd the Mechanical libraries path to sys.path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys.mechanical.core endpoints, their capabilities, and how\nto interact with them programmatically.\nAdditionally, see the API references for ansys-tools-path here .\nAPI reference\nansys-tools-path"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#the-utilspy-module",
        "title": "The utils.py module",
        "section": "The utils.py module",
        "text": "The utils.py module\nutils.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#summary",
        "title": "The utils.py module > Summary",
        "section": "Summary",
        "text": "remote_method\nDecorator for passing remote methods.\nMethodType\nEnum for method or property types.\ntry_get_remote_method\nTry to get a remote method.\ntry_get_remote_property\nTry to get a remote property.\nget_remote_methods\nYield names and methods of an object’s remote methods.\nSummary\nremote_method\nMethodType\ntry_get_remote_method\ntry_get_remote_property\nget_remote_methods"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#description",
        "title": "The utils.py module > Description",
        "section": "Description",
        "text": "Utilities necessary for remote calls.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#module-detail",
        "title": "The utils.py module > Module detail",
        "section": "Module detail",
        "text": "Try to get a remote method.\nTry to get a remote property.\nYield names and methods of an object’s remote methods.\nA remote method is identified by the presence of an attribute _is_remote set to True.\nThe object to inspect for remote methods.\nA tuple containing the method name and the method itself\nfor each remote method found in the object\nModule detail\nGenerator\nTuple\npython:str\nCallable\npython:None\npython:None"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#utils.try_get_remote_method",
        "title": "The utils.py module > Module detail > try_get_remote_method",
        "section": "Module detail > try_get_remote_method",
        "text": "utils.try_get_remote_method(methodname: str, obj: Any) -> Tuple[str, Callable]\n\nTry to get a remote method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#utils.try_get_remote_property",
        "title": "The utils.py module > Module detail > try_get_remote_property",
        "section": "Module detail > try_get_remote_property",
        "text": "utils.try_get_remote_property(attrname: str, obj: Any) -> Tuple[str, property]\n\nTry to get a remote property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/utils/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/utils/index.html#utils.get_remote_methods",
        "title": "The utils.py module > Module detail > get_remote_methods",
        "section": "Module detail > get_remote_methods",
        "text": "utils.get_remote_methods(obj) -> Generator[Tuple[str, Callable, MethodType], None, None]\n\nYield names and methods of an object’s remote methods.\n\nA remote method is identified by the presence of an attribute _is_remote set to True.\n\nParameters\n\nobj: Any\n\nThe object to inspect for remote methods.\n\nYields\n\nGenerator[Tuple[python:str, Callable], python:None, python:None]\n\nA tuple containing the method name and the method itself\nfor each remote method found in the object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/index",
        "href": "api/ansys/mechanical/core/examples/index.html#the-examples-package",
        "title": "The examples package",
        "section": "The examples package",
        "text": "The examples package\nexamples"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/index",
        "href": "api/ansys/mechanical/core/examples/index.html#summary",
        "title": "The examples package > Summary",
        "section": "Summary",
        "text": "downloads\nFunctions to download sample datasets from the PyAnsys data repository.\nSummary\ndownloads"
    },
    {
        "objectID": "api/ansys/mechanical/core/examples/index",
        "href": "api/ansys/mechanical/core/examples/index.html#description",
        "title": "The examples package > Description",
        "section": "Description",
        "text": "Initialize the package level imports.\nDescription"
    },
    {
        "objectID": "examples/gallery_examples/sg_execution_times",
        "href": "examples/gallery_examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples/gallery_examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "user_guide_scripting/threading",
        "href": "user_guide_scripting/threading.html#threading",
        "title": "Threading",
        "section": "Threading",
        "text": "Threading"
    },
    {
        "objectID": "user_guide_scripting/threading",
        "href": "user_guide_scripting/threading.html#concurrency-and-threads",
        "title": "Threading > Concurrency and threads",
        "section": "Concurrency and threads",
        "text": "The intent is not to provide an extensive explanation of concurrency and threads but\nrather to lay the groundwork for specific concurrency considerations for Mechanical’s\nscripting API. Some simplifications are employed for this purpose.\nCPUs can execute multiple subroutines of a program concurrently. One popular model\nfor this concurrency is called threading. There are other possible models, such\nas co-routines.\nA thread is a CPU virtualization of a CPU core. Traditionally, a computer can have\nmultiple CPUs, each executing multiple programs concurrently. Using clever scheduling,\na CPU can simulate more cores than it actually has. A thread is an abstraction around\neither a CPU core executing a program or a virtual CPU core executing a program. Within\na single process, there can be multiple threads running, and these threads can be\nexecuting in a single core or multiple cores.\nIn a traditional computer instruction set architecture, memory is a store of data that\nstores the program itself and data used by the program. CPUs contain a small amount of\nmemory that can be used to run a program, but often times an external memory store,\ntypically using RAM, is used by the program. Frequently, when running a program, the\nCPU needs to fetch data from RAM or store data back into RAM.\nCPUs operate at the speed of electrons and can often do trillions of operations per\nsecond. If there is only one program running on a CPU and a private section of memory\nthat the program needs, it can shuttle data to and from that memory extremely quickly.\nWhen there are multiple programs or threads running on a CPU, things can get tricker.\nConsider a (contrived) example with a simple program that increments an integer:\nIf i is a 32-bit integer, it is represented in binary. For example, the number 11\nis 00000000 00000000 00000000 00001011, and the number 12 is 00000000 00000000 00000000 00001100.\nTo change a value from 11 to 12, a total of three bits must flip between 0 and 1.\nIt is possible for a CPU to perform that operation with three independent bit flip instructions.\nNow consider that two concurrently running threads are both trying to increment this integer\nat roughly the same time, at the time scale of CPUs. The first thread flips one of\nthe bits, making the binary value 00000000 00000000 00000000 00001111, which represents the\nnumber 15. The second thread sees that binary amount and interprets the operation to be\nincrementing from 15 to 16, or from 00000000 00000000 00000000 00001111 to\n00000000 00000000 00000000 00010000, which is performed using 5 bit flips. So one thread\nflips the latter 3 bits, and the other thread flips the latter 5 bits. This might result in the\noutcome 00000000 00000000 00000000 00010111, which represents the number 21, a value\ncertainly not two increments on the number 11. Depending on the interpretation of that integer\nvalue by the program, the behavior of the program might do literally anything, with erratic,\nrandom, and often difficult to reproduce (let alone fix) bugs.\nConcurrency and threads\ni\n00000000 00000000 00000000 00001011\n00000000 00000000 00000000 00001100\n00000000 00000000 00000000 00001111\n00000000 00000000 00000000 00001111\n00000000 00000000 00000000 00010000\n00000000 00000000 00000000 00010111"
    },
    {
        "objectID": "user_guide_scripting/threading",
        "href": "user_guide_scripting/threading.html#race-condition",
        "title": "Threading > Race condition",
        "section": "Race condition",
        "text": "This preceding situation is called a race condition, where concurrent programs are incorrectly\naccessing or mutating the same memory in such a way that leads to surprising consequences. They may\nseem rare. However, remember that when a CPU situation has a probability of one in a million, it is\nlikely to occur hundreds of times per second. If it has a much smaller probability than that, it can\noccur once every few days or once every few weeks. In the Therac-25 radiation machine, a race\ncondition actually led to three deaths and more debilitating injuries.\nRace condition"
    },
    {
        "objectID": "user_guide_scripting/threading",
        "href": "user_guide_scripting/threading.html#mitigation-strategies",
        "title": "Threading > Mitigation strategies",
        "section": "Mitigation strategies",
        "text": "There are a number of strategies that software engineers use to benefit from the enhanced\nperformance of concurrent programs without suffering from race conditions:\nData copies: Algorithms operate on private copies of data, rather than shared memory.\nThread-compatible data structures: These data structures are designed to allow for\nconcurrent read-only access of data but not concurrent write access to data.\nThread-safe data structures: These data structures allow both concurrent read and write\naccess to data.\nTask posting: All calls to a set of functions implicitly schedule the function to run on a\ndedicated thread, allowing  two calls to any of these functions to run concurrently.\nAdopting any of these strategies comes with a tradeoff. Namely, these strategies typically\nask the CPU to do additional work in form of memory walls, mutexes, and other low-level\nCPU-intrinsic functions. Or, they require the program to do additional work in scheduling\ntasks. Usually, these are performance pessimizations for the 99% of cases where\nconcurrency is not needed. As such, adopting these strategies causes performance\nproblems for the typical user.\nMitigation strategies"
    },
    {
        "objectID": "user_guide_scripting/threading",
        "href": "user_guide_scripting/threading.html#mechanicals-threading-model",
        "title": "Threading > Mechanical’s threading model",
        "section": "Mechanical’s threading model",
        "text": "Mechanical is a large-scale application with multiple concurrent threads running at\nany one time. However, it exhibits thread affinity, where a single thread is privileged above\nall others with respect to data access and mutation. If the user interface (UI) is running,\nthis thread is typically called the UI thread, and in batch mode, it is typically called the\nmain thread. Some of the data structures used by Mechanical’s code are thread-compatible.\nSome of the APIs use task posting. However, in the general case, using any Mechanical\nAPI on a non-privileged thread carries a risk of race conditions. It is difficult to quantify\nthe risk or to distinguish which operations are most likely to be vulnerable to them due to\nthe large scale of the Mechanical application’s code.\nAs such, Mechanical APIs MUST only be run on the UI thread or main thread, in interactive and batch\nmode respectively. For PyMechanical, this means the following:\nFor an embedded instance, all scripting APIs are executed on the Python thread that constructed\nthe instance of Mechanical.\nFor a remote session, the Python code that is sent to the server does not contain threading\nconstructs that try to run APIs in a background thread.\nGiven the preceding restrictions, it is possible to offload some work to a background\nthread, as long as that thread does not access Mechanical’s scripting API.\nMechanical’s threading model"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#the-ansysmechanicalcore-library",
        "title": "The ansys.mechanical.core library",
        "section": "The ansys.mechanical.core library",
        "text": "The ansys.mechanical.core library\nansys.mechanical.core"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#summary",
        "title": "The ansys.mechanical.core library > Summary",
        "section": "Summary",
        "text": "embedding\nImports for the embedding sub-package.\nexamples\nInitialize the package level imports.\nerrors\nPyMechanical-specific errors.\nfeature_flags\nMechanical beta feature flags.\nide_config\nConvenience CLI to run mechanical.\nlauncher\nLaunch Mechanical in batch or UI mode.\nlogging\nLogging module.\nmechanical\nConnect to Mechanical gRPC server and issues commands.\nmisc\nContain miscellaneous functions and methods at the module level.\npool\nThis module is for threaded implementations of the Mechanical interface.\nrun\nConvenience CLI to run mechanical.\nUSER_DATA_PATH\nUser data directory.\nEXAMPLES_PATH\nExamples path.\nLOG\nCreate logger for package level use.\nHAS_EMBEDDING\nWhether or not Mechanical embedding is being used.\nLOCAL_PORTS\nManage the package level ports.\nBUILDING_GALLERY\nWhether or not to build gallery examples.\nSummary\nembedding\nexamples\nerrors\nfeature_flags\nide_config\nlauncher\nlogging\nmechanical\nmisc\npool\nrun\nUSER_DATA_PATH\nEXAMPLES_PATH\nLOG\nHAS_EMBEDDING\nLOCAL_PORTS\nBUILDING_GALLERY"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#description",
        "title": "The ansys.mechanical.core library > Description",
        "section": "Description",
        "text": "Initialize the package level imports.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#module-detail",
        "title": "The ansys.mechanical.core library > Module detail",
        "section": "Module detail",
        "text": "User data directory.\nExamples path.\nCreate logger for package level use.\nWhether or not Mechanical embedding is being used.\nManage the package level ports.\nWhether or not to build gallery examples.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.USER_DATA_PATH",
        "title": "The ansys.mechanical.core library > Module detail > USER_DATA_PATH",
        "section": "Module detail > USER_DATA_PATH",
        "text": "core.USER_DATA_PATH = b'.'\n\nUser data directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.EXAMPLES_PATH",
        "title": "The ansys.mechanical.core library > Module detail > EXAMPLES_PATH",
        "section": "Module detail > EXAMPLES_PATH",
        "text": "core.EXAMPLES_PATH\n\nExamples path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.LOG",
        "title": "The ansys.mechanical.core library > Module detail > LOG",
        "section": "Module detail > LOG",
        "text": "core.LOG\n\nCreate logger for package level use.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.HAS_EMBEDDING",
        "title": "The ansys.mechanical.core library > Module detail > HAS_EMBEDDING",
        "section": "Module detail > HAS_EMBEDDING",
        "text": "core.HAS_EMBEDDING = True\n\nWhether or not Mechanical embedding is being used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.LOCAL_PORTS",
        "title": "The ansys.mechanical.core library > Module detail > LOCAL_PORTS",
        "section": "Module detail > LOCAL_PORTS",
        "text": "core.LOCAL_PORTS = []\n\nManage the package level ports.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/index",
        "href": "api/ansys/mechanical/core/index.html#core.BUILDING_GALLERY",
        "title": "The ansys.mechanical.core library > Module detail > BUILDING_GALLERY",
        "section": "Module detail > BUILDING_GALLERY",
        "text": "core.BUILDING_GALLERY = False\n\nWhether or not to build gallery examples.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.find_mechanical",
        "href": "api/_autosummary/ansys.tools.path.find_mechanical.html#find_mechanical",
        "title": "find_mechanical",
        "section": "find_mechanical",
        "text": "Search for the Mechanical path in the standard installation location.\nFull path to the executable file for the latest Mechanical version.\nVersion in the float format. For example, 23.1 for 2023 R1.\nIf no version has be found, version is set to “”\nUnion[Tuple[str, float], Tuple[Literal[''], Literal['']]]\nOn Windows:\nOn Linux:\nfind_mechanical\npython:str\npython:float\npython:str\n23.1\nUnion\nTuple\nstr\nfloat\nTuple\nLiteral\n''\nLiteral\n''"
    },
    {
        "objectID": "api/_autosummary/ansys.tools.path.find_mechanical",
        "href": "api/_autosummary/ansys.tools.path.find_mechanical.html#ansys.tools.path.find_mechanical",
        "title": "find_mechanical > find_mechanical > find_mechanical",
        "section": "find_mechanical > find_mechanical",
        "text": "ansys.tools.path.find_mechanical(version=None, supported_versions={191: '19.1', 192: '19.2', 193: '19.3', 194: '19.4', 195: '19.5', 201: '2020R1', 202: '2020R2', 211: '2021R1', 212: '2021R2', 221: '2022R1', 222: '2022R2', 231: '2023R1', 232: '2023R2', 241: '2024R1', 242: '2024R2', 251: '2025R1', 252: '2025R2'})\n\nSearch for the Mechanical path in the standard installation location.\n\nReturns\n\nmechanical_path\n\npython:str\n\nFull path to the executable file for the latest Mechanical version.\n\nversion\n\npython:float | python:str\n\nVersion in the float format. For example, 23.1 for 2023 R1.\nIf no version has be found, version is set to “”\n\nReturn type\n\nUnion[Tuple[str, float], Tuple[Literal[''], Literal['']]]\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import find_mechanical\n>>> find_mechanical()\n('C:/Program Files/ANSYS Inc/v231/aisol/bin/winx64/AnsysWBU.exe', 23.1)\n\nOn Linux:\n\n>>> find_mechanical()\n('/usr/ansys_inc/v231/aisol/.workbench', 23.1)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#the-apppy-module",
        "title": "The app.py module",
        "section": "The app.py module",
        "text": "The app.py module\napp.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#summary",
        "title": "The app.py module > Summary",
        "section": "Summary",
        "text": "GetterWrapper\nWrapper class around an attribute of an object.\nApp\nMechanical embedding Application.\nis_initialized\nCheck if the app has been initialized.\nHAS_ANSYS_VIZ\nWhether or not PyVista exists.\nINSTANCES\nList of instances.\nSummary\nGetterWrapper\nApp\nis_initialized\nHAS_ANSYS_VIZ\nINSTANCES"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#description",
        "title": "The app.py module > Description",
        "section": "Description",
        "text": "Main application class for embedded Mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#module-detail",
        "title": "The app.py module > Module detail",
        "section": "Module detail",
        "text": "Check if the app has been initialized.\nWhether or not PyVista exists.\nList of instances.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#app.is_initialized",
        "title": "The app.py module > Module detail > is_initialized",
        "section": "Module detail > is_initialized",
        "text": "app.is_initialized()\n\nCheck if the app has been initialized.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#app.HAS_ANSYS_VIZ",
        "title": "The app.py module > Module detail > HAS_ANSYS_VIZ",
        "section": "Module detail > HAS_ANSYS_VIZ",
        "text": "app.HAS_ANSYS_VIZ = True\n\nWhether or not PyVista exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/index",
        "href": "api/ansys/mechanical/core/embedding/app/index.html#app.INSTANCES",
        "title": "The app.py module > Module detail > INSTANCES",
        "section": "Module detail > INSTANCES",
        "text": "app.INSTANCES = []\n\nList of instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/index",
        "href": "api/ansys/mechanical/core/embedding/appdata/index.html#the-appdatapy-module",
        "title": "The appdata.py module",
        "section": "The appdata.py module",
        "text": "The appdata.py module\nappdata.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/index",
        "href": "api/ansys/mechanical/core/embedding/appdata/index.html#summary",
        "title": "The appdata.py module > Summary",
        "section": "Summary",
        "text": "UniqueUserProfile\nCreate Unique User Profile (for AppData).\nSummary\nUniqueUserProfile"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/appdata/index",
        "href": "api/ansys/mechanical/core/embedding/appdata/index.html#description",
        "title": "The appdata.py module > Description",
        "section": "Description",
        "text": "Temporary Appdata for Ansys Mechanical.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#the-initializerpy-module",
        "title": "The initializer.py module",
        "section": "The initializer.py module",
        "text": "The initializer.py module\ninitializer.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#summary",
        "title": "The initializer.py module > Summary",
        "section": "Summary",
        "text": "initialize\nInitialize Mechanical embedding.\nINITIALIZED_VERSION\nConstant for the initialized version.\nSUPPORTED_MECHANICAL_EMBEDDING_VERSIONS\nSupported Mechanical embedding versions on Windows.\nSummary\ninitialize\nINITIALIZED_VERSION\nSUPPORTED_MECHANICAL_EMBEDDING_VERSIONS"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#description",
        "title": "The initializer.py module > Description",
        "section": "Description",
        "text": "Initializer for Mechanical embedding. Sets up paths and resolvers.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#module-detail",
        "title": "The initializer.py module > Module detail",
        "section": "Module detail",
        "text": "Initialize Mechanical embedding.\nConstant for the initialized version.\nSupported Mechanical embedding versions on Windows.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#initializer.initialize",
        "title": "The initializer.py module > Module detail > initialize",
        "section": "Module detail > initialize",
        "text": "initializer.initialize(version: int = None)\n\nInitialize Mechanical embedding.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#initializer.INITIALIZED_VERSION",
        "title": "The initializer.py module > Module detail > INITIALIZED_VERSION",
        "section": "Module detail > INITIALIZED_VERSION",
        "text": "initializer.INITIALIZED_VERSION = None\n\nConstant for the initialized version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/initializer/index",
        "href": "api/ansys/mechanical/core/embedding/initializer/index.html#initializer.SUPPORTED_MECHANICAL_EMBEDDING_VERSIONS",
        "title": "The initializer.py module > Module detail > SUPPORTED_MECHANICAL_EMBEDDING_VERSIONS",
        "section": "Module detail > SUPPORTED_MECHANICAL_EMBEDDING_VERSIONS",
        "text": "initializer.SUPPORTED_MECHANICAL_EMBEDDING_VERSIONS\n\nSupported Mechanical embedding versions on Windows.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/VersionError",
        "href": "api/ansys/mechanical/core/errors/VersionError.html#versionerror",
        "title": "VersionError",
        "section": "VersionError",
        "text": "Bases: ValueError\nRaises an error when the version of Mechanical is invalid.\nVersionError\nVersionError\nValueError"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/VersionError",
        "href": "api/ansys/mechanical/core/errors/VersionError.html#ansys.mechanical.core.errors.VersionError",
        "title": "VersionError > VersionError > VersionError",
        "section": "VersionError > VersionError",
        "text": "exception ansys.mechanical.core.errors.VersionError(msg='Invalid Mechanical version')\n\nBases: ValueError\n\nRaises an error when the version of Mechanical is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/errors/VersionError",
        "href": "api/ansys/mechanical/core/errors/VersionError.html#import-detail",
        "title": "VersionError > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.errors import VersionError\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#mechanicalembeddedserver",
        "title": "MechanicalEmbeddedServer",
        "section": "MechanicalEmbeddedServer",
        "text": "Start rpc server.\nMechanicalEmbeddedServer\nMechanicalEmbeddedServer"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#ansys.mechanical.core.embedding.rpc.server.MechanicalEmbeddedServer",
        "title": "MechanicalEmbeddedServer > MechanicalEmbeddedServer > MechanicalEmbeddedServer",
        "section": "MechanicalEmbeddedServer > MechanicalEmbeddedServer",
        "text": "class ansys.mechanical.core.embedding.rpc.server.MechanicalEmbeddedServer(service: Type[rpyc.Service] = MechanicalService, port: int = None, version: int = None, methods: List[Callable] = [], impl=None)\n\nStart rpc server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#overview",
        "title": "MechanicalEmbeddedServer > Overview",
        "section": "Overview",
        "text": "start\nStart server on specified port.\nstop_async\nReturn immediately but will stop the server.\nstop\nStop the server.\nget_free_port\nGet free port.\nOverview\nstart\nstop_async\nstop\nget_free_port"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#import-detail",
        "title": "MechanicalEmbeddedServer > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.server import MechanicalEmbeddedServer\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#method-detail",
        "title": "MechanicalEmbeddedServer > Method detail",
        "section": "Method detail",
        "text": "Get free port.\nIf port is not given, it will find a free port starting from PYMECHANICAL_DEFAULT_RPC_PORT.\nStart server on specified port.\nReturn immediately but will stop the server.\nStop the server.\nMethod detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#MechanicalEmbeddedServer.get_free_port",
        "title": "MechanicalEmbeddedServer > Method detail > get_free_port",
        "section": "Method detail > get_free_port",
        "text": "static MechanicalEmbeddedServer.get_free_port(port=None)\n\nGet free port.\n\nIf port is not given, it will find a free port starting from PYMECHANICAL_DEFAULT_RPC_PORT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#MechanicalEmbeddedServer.start",
        "title": "MechanicalEmbeddedServer > Method detail > start",
        "section": "Method detail > start",
        "text": "MechanicalEmbeddedServer.start() -> None\n\nStart server on specified port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#MechanicalEmbeddedServer.stop_async",
        "title": "MechanicalEmbeddedServer > Method detail > stop_async",
        "section": "Method detail > stop_async",
        "text": "MechanicalEmbeddedServer.stop_async()\n\nReturn immediately but will stop the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalEmbeddedServer.html#MechanicalEmbeddedServer.stop",
        "title": "MechanicalEmbeddedServer > Method detail > stop",
        "section": "Method detail > stop",
        "text": "MechanicalEmbeddedServer.stop() -> None\n\nStop the server.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide_embedding/configuration",
        "href": "user_guide_embedding/configuration.html#addin-configuration",
        "title": "Addin configuration",
        "section": "Addin configuration",
        "text": "There are some configuration options that are respected when loading an embedded instance\nof Mechanical into python.\nThe class Configuration can be\nused to set up Addin configuration. This configuration can be supplied to the constructor\nof the class App.\nFor example, to load an instance of Mechanical using the “Mechanical” configuration name and\nwithout loading any ACT Addins:\nAddin configuration"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the project.\nRelease notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01113---2025-02-07",
        "title": "Release notes > 0.11.13 - 2025-02-07",
        "section": "0.11.13 - 2025-02-07",
        "text": "0.11.13 - 2025-02-07"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#version-011",
        "title": "Release notes > Version 0.11",
        "section": "Version 0.11",
        "text": "Version 0.11"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#whats-new",
        "title": "Release notes > What's New",
        "section": "What's New",
        "text": "Available in v0.11.14 and later\nThe globals parameter of the App class is used to update the global variables. This parameter is optional and interchangeable with app.update_globals(globals()). \n Using the globals parameter: \n \nUsing the update_globals method: \n \nAvailable in v0.11.8 and later\nThe launch_gui() function graphically launches the current state of the embedded instance when the App has been saved. \n The launch_gui() function saves the active .mechdb file and creates a copy of the existing .mechdb file with a temporary name. The temporary .mechdb file is used to launch the GUI. By default, the temporary .mechdb file is deleted after the GUI is closed, but the user can specify whether or not to delete the temporary file. \n Usage: \nAvailable in v0.11.8 and later\nThe ansys-mechanical-ideconfig command prints the settings that are necessary for autocomplete to work with ansys-mechanical-stubs. This command takes in three arguments: --ide vscode, --target user or --target workspace, and --revision <version>. If the revision is not provided, ansys-tools-path will retrieve the Mechanical version from your system. \n Usage: \nTerminal output for Windows user's settings.json file: \nAvailable in v0.11.4 and later\nThe app.plot() function allows you to visualize imported geometry in 3D. This feature is available only from 24R1 or later and requires the ansys-mechanical-core[viz] dependencies to be installed: \n \nUsage: \nAvailable in v0.11.1 and later\nThe app.print_tree() function prints the hierarchical tree representation of the Mechanical project structure and object state. \n Usage: \nOutput for app.print_tree(): \nWhat's New\nglobals\nglobals\nupdate_globals\nlaunch_gui()\n.mechdb\n.mechdb\n.mechdb\n.mechdb\nansys-mechanical-ideconfig\nansys-mechanical-stubs\n--ide vscode\n--target user\n--target workspace\n--revision <version>\nansys-tools-path\napp.plot()\nansys-mechanical-core[viz]\napp.print_tree()\napp.print_tree()"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add CPython feature flag for ansys-mechanical  cli #1049\nRpyc integration #1055\nAdd “what’s new” sections to changelog #1057\nCreate option for PyPIM to be installed separately #1060\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Add explicit interface support #1058\nDisable app poster test #1072\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Clarify support guidelines #1061\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.12 #1050\nBump the doc group with 4 updates #1054\npre-commit automatic update #1056, #1067, #1081\nRaise error if Ansys has no attribute Mechanical #1062\nBump grpcio from 1.69.0 to 1.70.0 in the core group #1063\nBump panel from 1.5.5 to 1.6.0 in the doc group #1064\nUpgrade ansys-pythonnet version #1066\nAdd gitattributes and renormalize files #1069\nBump sphinx-notfound-page from 1.0.4 to 1.1.0 in the doc group #1079\nBump plotly from 5.24.1 to 6.0.0 #1080\nUpgrade ansys-sphinx-theme #1082\nupdate clr loader version #1083\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#test",
        "title": "Release notes > Test",
        "section": "Test",
        "text": "update poster test #1065\nTest"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01112---2025-01-16",
        "title": "Release notes > 0.11.12 - 2025-01-16",
        "section": "0.11.12 - 2025-01-16",
        "text": "0.11.12 - 2025-01-16"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Update enum and globals #1037\nadd poster method that raises an exception #1038\ndocker and ci/cd change for 25R1 #1042\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.11 #1031\nBump the doc group with 2 updates #1036\npre-commit automatic update #1039\nBump ansys-mechanical-stubs from 0.1.5 to 0.1.6 #1044\nUpdate default product version to 25R1 #1045\nBump ansys-mechanical-env version from 0.1.8 to  0.1.9 #1048\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01111---2025-01-08",
        "title": "Release notes > 0.11.11 - 2025-01-08",
        "section": "0.11.11 - 2025-01-08",
        "text": "0.11.11 - 2025-01-08"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add tests for transaction #985\nUpdate private app data creation and add tests #986\nUpdate docstring and App.save_as() #1001\nUpdate object state for print_tree() #1005\nOption to ignore lock file on open #1007\nAdd project directory property #1022\nAdded\nApp.save_as()"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Process return code #1026, #1029\nBackground App initialization #1030\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "Remove f-string without placeholders and specify exception type. #1011\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Update docs with new api #1000\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "Bump codecov/codecov-action from 4 to 5 #983\nupdate CHANGELOG for v0.11.10 #984\nBump ansys-sphinx-theme[autoapi] from 1.2.1 to 1.2.2 in the doc group #988\nBump grpcio from 1.68.0 to 1.68.1 in the core group #990\nBump pytest from 8.3.3 to 8.3.4 in the tests group #991\nBump the doc group with 2 updates #992, #999\npre-commit automatic update #993\nSupport python 3.13 #997\nBump clr-loader from 0.2.6 to 0.2.7.post0 in the core group #1003\nBump matplotlib from 3.9.3 to 3.10.0 in the doc group #1004\nBump the doc group with 3 updates #1008\nBump psutil from 6.1.0 to 6.1.1 #1009\nUpdate license headers for 2025 #1014\nBump ansys-mechanical-stubs to 0.1.5 and add typehint to DataModel #1015\nFollow pythonic standard for comparison to None. #1016\nBump grpcio from 1.68.1 to 1.69.0 in the core group #1020\nBump sphinx-autodoc-typehints from 2.5.0 to 3.0.0 #1021\nUpdate ngihtly for pre-release version #1023\nMaintenance\nansys-mechanical-stubs"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01110---2024-11-18",
        "title": "Release notes > 0.11.10 - 2024-11-18",
        "section": "0.11.10 - 2024-11-18",
        "text": "0.11.10 - 2024-11-18"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Version input type check #979\nAdding new method for connecting to Mechanical instance #980\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Update embedding script tests #974\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "add Mechanical API link to Mechanical Scripting page #972\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.9 #963\nModify how job success is verified for CI/CD #965\nBump mikepenz/action-junit-report from 4 to 5 #966\nBump grpcio from 1.67.0 to 1.67.1 in the core group #967\nBump the doc group with 2 updates #968, #982\nBump pytest-cov from 5.0.0 to 6.0.0 #969\nUpdate docs build action container #971\npre-commit automatic update #977\nBump grpcio from 1.67.1 to 1.68.0 in the core group #981\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0119---2024-10-29",
        "title": "Release notes > 0.11.9 - 2024-10-29",
        "section": "0.11.9 - 2024-10-29",
        "text": "0.11.9 - 2024-10-29"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "add ansys-mechanical-stubs as a dependency #948\nAdd overwrite option for App.save_as() #951\nadd typehints to ExtAPI, Tree, and Graphics #957\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "bandit warnings #950\nstubs CLI test #952\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.8 #946\ncode maintenance #947, #949\nBump the core group with 2 updates #953\nBump ansys-sphinx-theme[autoapi] from 1.1.4 to 1.1.6 in the doc group #954\nBump psutil from 6.0.0 to 6.1.0 #955\nbump ansys-mechanical-stubs to v0.1.4 #956\nBump the doc group with 2 updates #960\nBump usd-core from 24.8 to 24.11 #961\npre-commit automatic update #962\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0118---2024-10-15",
        "title": "Release notes > 0.11.8 - 2024-10-15",
        "section": "0.11.8 - 2024-10-15",
        "text": "0.11.8 - 2024-10-15"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "launch_gui command #882\nAdd method to execute script from file for embedding #902\nadd warning for x11 loaded before init on 25.1+ #909\nansys-mechanical-ideconfig command #935\nAutomatically update pre-commit ci PR with prefix #936\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Update execute_script method #894\nAdapting braking change for upload action #895\nRemove Python class reference. #901\ndocumentation links #911\nThrow value error for unsupported version of Mechanical #917\nUse “lite” CLR host on windows for 251+ #920\nupdate AUTHORS file #929\nWarning for multiple version #942\nFixed\nexecute_script"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "use embedding clr host in version 251 #926\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "remove thispagetitle metatag #897\nDocumentation\nthispagetitle"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "Add vulnerability check #709\nupdate CHANGELOG for v0.11.7 #889\nBump grpcio from 1.66.0 to 1.66.1 in the core group #891\nBump the doc group with 2 updates #892\nBump pytest-print from 1.0.0 to 1.0.1 in the tests group #898\nBump the doc group with 4 updates #899, #907, #916\nDrop python 3.9 #904\nBump pytest from 8.3.2 to 8.3.3 in the tests group #906\nRemove unnecessary dependencies #908\nBump ansys-mechanical-env from 0.1.7 to 0.1.8 in the core group #914\nBump pytest-print from 1.0.1 to 1.0.2 in the tests group #915\nBump grpcio from 1.66.1 to 1.66.2 in the core group #922\nBump panel from 1.5.0 to 1.5.1 in the doc group #923\nUse static search #927\nBump the doc group with 5 updates #933, #943\npre-commit autoupdate #934\nCode maintenance #937\npre-commit automatic update #944\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0117---2024-08-29",
        "title": "Release notes > 0.11.7 - 2024-08-29",
        "section": "0.11.7 - 2024-08-29",
        "text": "0.11.7 - 2024-08-29"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Fix doc layout #888\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.6 #887\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0116---2024-08-28",
        "title": "Release notes > 0.11.6 - 2024-08-28",
        "section": "0.11.6 - 2024-08-28",
        "text": "0.11.6 - 2024-08-28"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "Refactor #878\nMinor changes #885\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "update CHANGELOG for v0.11.5 #872\nBump grpcio from 1.65.4 to 1.65.5 in the core group #875\nBump the doc group with 4 updates #876\nBump grpcio from 1.65.5 to 1.66.0 in the core group #880\nBump ansys-sphinx-theme[autoapi] from 1.0.5 to 1.0.7 in the doc group #881\n[pre-commit.ci] pre-commit autoupdate #884\nMaintenance"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0115---2024-08-13",
        "title": "Release notes > 0.11.5 - 2024-08-13",
        "section": "0.11.5 - 2024-08-13",
        "text": "0.11.5 - 2024-08-13"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "FEAT: Update cheat sheet with quarto #845\nFeat: add a layer to load into an existing stage #857\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Refactor usd export #858\nFIX: App plot None check #860\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "chore: update CHANGELOG for v0.11.4 #856\nMAINT: Cheat sheet #871\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: update ansys-sphinx-theme #863\nMAINT: Bump the doc group across 1 directory with 4 updates #866\nMAINT: Bump ansys/actions from 6 to 7 #868\nMAINT: Bump matplotlib from 3.9.1 to 3.9.1.post1 #869\n[pre-commit.ci] pre-commit autoupdate #870\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0114---2024-08-06",
        "title": "Release notes > 0.11.4 - 2024-08-06",
        "section": "0.11.4 - 2024-08-06",
        "text": "0.11.4 - 2024-08-06"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "DOC: Update known issues and limitations #829\nFeat: Add option for generating docs without examples #830\nFeat: Integrate ansys visualization tool #846\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.11.3 #824\nMaint: Update new labels #836\nMAINT: Update shims.material_import #837\n[pre-commit.ci] pre-commit autoupdate #844\nChanged\nshims.material_import"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Maint: Update qk_07 test #833\nMaint: Update qk07 #848\nuse “OnWorkbenchReady” to update globals #854\nfix: underline issue with changelog.rst section generation #855\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: Bump grpcio from 1.64.1 to 1.65.1 in the core group #826\nMAINT: Bump pytest from 8.2.2 to 8.3.1 in the tests group #827\nMAINT: Bump the doc group with 4 updates #828\nMAINT: Bump pytest from 8.3.1 to 8.3.2 in the tests group #838\nMAINT: Bump plotly from 5.22.0 to 5.23.0 in the doc group #839\nMAINT: Bump usd-core from 24.3 to 24.8 #841\nMAINT: Bump sphinxcontrib-websupport from 1.2.7 to 2.0.0 #842\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "DOC: Add documentation for launch_mechanical #831\nMiscellaneous\nlaunch_mechanical"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#documentation",
        "title": "Release notes > Documentation",
        "section": "Documentation",
        "text": "add background app class #849\nMAINT: Bump grpcio from 1.65.1 to 1.65.4 in the core group #850\nMaint: Update qk5 #852\n[pre-commit.ci] pre-commit autoupdate #853\nDocumentation"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0113---2024-07-19",
        "title": "Release notes > 0.11.3 - 2024-07-19",
        "section": "0.11.3 - 2024-07-19",
        "text": "0.11.3 - 2024-07-19"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "MAINT: Updates for 242 #822\nchore: update CHANGELOG for v0.11.2 #823\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0112---2024-07-19",
        "title": "Release notes > 0.11.2 - 2024-07-19",
        "section": "0.11.2 - 2024-07-19",
        "text": "0.11.2 - 2024-07-19"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "FEAT: Add known issues and limitation section #760\nFEAT: Add test for building gallery #787\nFEAT: Add graphics and globals #790\nfeat: add –script-args argument to ansys-mechanical #802\nFEAT: Update print_tree method #804\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.11.1 #786\n[pre-commit.ci] pre-commit autoupdate #789, #801, #819\nMAINT: Update nightly runs for 251 #803\nMAINT: Refactor CICD #806\nMAINT: Update for 24R2 #810\nMAINT: update for docker files 24R2 #811\nUpdate ACT API Reference Guide link #815\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix sentence in architecture file #800\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: Bump numpy from 1.26.4 to 2.0.0 #773\nMAINT: Bump the doc group with 4 updates #788\nMAINT: Bump the doc group with 2 updates #805\nMAINT: Update dev version of pymechanical #814\nMAINT: Bump sphinx from 7.3.7 to 7.4.4 in the doc group #818\nMAINT: Update pymech-env #821\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "docs: update architecture.rst #796\nfix exception when plotting a model with any line bodies #812\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0111---2024-06-21",
        "title": "Release notes > 0.11.1 - 2024-06-21",
        "section": "0.11.1 - 2024-06-21",
        "text": "0.11.1 - 2024-06-21"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "FEAT: Add an App method to print project tree for embedding scenario #779\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Test specific version #771\nchore: update CHANGELOG for v0.11.0 #777\nchore: bump add-license-headers version to 0.3.2 #782\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix sharing app instances, clarify contract #784\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0110---2024-06-18",
        "title": "Release notes > 0.11.0 - 2024-06-18",
        "section": "0.11.0 - 2024-06-18",
        "text": "0.11.0 - 2024-06-18"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: raise an exception if port or input script aren’t provided in batch mode #753\nfeat: use changelog.rst instead of CHANGELOG.md for release notes #757\nDoc: Add embedding api references #758\nfeat: implement autoapi #761\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.10.11 #749\nMAINT: Delete the apt-get lists after installing packages #750\n[pre-commit.ci] pre-commit autoupdate #774\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "FIX: Modify pre-commit hook #763\nfix lifetime issue #768\nfix pythonnet issue #772\nFix: Remove disable sec check #776\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: Bump the doc group with 4 updates #751\n[pre-commit.ci] pre-commit autoupdate #752\nMAINT: Bump the doc group with 3 updates #755\nMAINT: Update files as per pyansys standards #762\nMAINT: Bump grpcio from 1.64.0 to 1.64.1 in the core group #764\nMAINT: Bump pytest from 8.2.1 to 8.2.2 in the tests group #765\nMAINT: Bump the doc group with 2 updates #766\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "add method to update globals #767\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01011---2024-05-23",
        "title": "Release notes > 0.10.11 - 2024-05-23",
        "section": "0.10.11 - 2024-05-23",
        "text": "0.10.11 - 2024-05-23"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#version-010",
        "title": "Release notes > Version 0.10",
        "section": "Version 0.10",
        "text": "Version 0.10"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: Add tests for animation exports\n#729\nadd feature flags to ansys-mechanical cli\n#735\nfeat: Add test for deprecation warning\n#739\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "chore: update CHANGELOG for v0.10.10\n#716\nMaint: Display image info\n#717\n[pre-commit.ci] pre-commit autoupdate\n#726\nset mono trace env vars before loading mono\n#734\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: merging coverage step in ci_cd\n#720\nfix: Publish coverage for remote connect\n#721\nfix: Restrict protobuf <6\n#722\nFix: add return for poster\n#727\nfix: cli test are not getting coverage\n#737\nfix: adding mechanical libraries\n#740\nfeat: Add more coverage on logging\n#744\nfix: Display image and build info only for scheduled run\n#746\nfix: upload coverage files only for latest stable version on release\nworkflow #748\nFixed\nprotobuf"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: Bump pytest from 8.1.1 to 8.2.0 in the tests group\n#724\nMAINT: Bump the doc group with 3 updates\n#725,\n#743\nMAINT: Bump grpcio from 1.62.2 to 1.63.0 in the core group\n#731\nMAINT: Bump the doc group with 2 updates\n#732\nMAINT: Bump grpcio from 1.63.0 to 1.64.0 in the core group\n#741\nMAINT: Bump pytest from 8.2.0 to 8.2.1 in the tests group\n#742\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "Split pyvista into two methods and remove the stability workaround\nfor 242 #718\nUpdate conf.py\n#723\ncatch the mono version warning\n#733\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#01010---2024-04-23",
        "title": "Release notes > 0.10.10 - 2024-04-23",
        "section": "0.10.10 - 2024-04-23",
        "text": "0.10.10 - 2024-04-23"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add embedding_scripts marker\n#662\nFEAT: Group dependabot alerts\n#666\nadd windows library loader util\n#672\nFeat: Add reports for remote connect tests\n#690\nFeat: Add link check\n#693\nFeat: Add app libraries test\n#696\nFeat: Update get_mechanical_path\n#707\nFeat: mechanical-env check before running embedding\n#708\nfeat: set up doc-deploy-changelog action\n#710\nAdded\nget_mechanical_path\nmechanical-env"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Doc: fix docs and vale warning\n#656\nMaint: post release change log update 10.9\n#665\nMaint: Auto approve and merge dependabot PR\n#674\n[pre-commit.ci] pre-commit autoupdate\n#691,\n#706\nMaint: Add code cov report\n#692\nMaint: Modify nightly run\n#712\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix: Assign ci bot for dependabot PR\n#677\nFix: Add matrix python in embedding test\n#681\nFix: Remove warning message test for remote session launch\n#682\nfix transformation matrix\n#683\nFix: Modify retrieving path of Mechanical in tests\n#688\nwork around instability in 2024R1\n#695\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "MAINT: Bump the doc group with 2 updates\n#668,\n#673\nMAINT: Bump the doc group with 1 update\n#678\nfirst version of 3d visualization with pyvista\n#680\nMAINT: Bump the doc group with 3 updates\n#689\nadd open-usd exporter\n#701\nMAINT: Bump the doc group with 5 updates\n#705,\n#715\nMAINT: Bump grpcio from 1.62.1 to 1.62.2 in the core group\n#713\nMAINT: Bump ansys/actions from 5 to 6\n#714\nDependencies"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "cleanup #702\nupdate graphics based on backend changes\n#711\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0109---2024-03-27",
        "title": "Release notes > 0.10.9 - 2024-03-27",
        "section": "0.10.9 - 2024-03-27",
        "text": "0.10.9 - 2024-03-27"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Block 32 bit python for embedding\n#647\nAdd usage of cli under embedding\n#650\nAdd changelog action\n#653\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fixed make pdf action in doc build\n#652\nUse _run for better i/o in tests\n#655\nFix pdf action\n#664\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump pytest-cov from 4.1.0 to 5.0.0\n#657\nBump ansys-mechanical-env from 0.1.4 to 0.1.5\n#658\nDependencies\npytest-cov\nansys-mechanical-env"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#miscellaneous",
        "title": "Release notes > Miscellaneous",
        "section": "Miscellaneous",
        "text": "DOC: Improve documentation for the embedded instances.\n#663\nMiscellaneous"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0108----2024-03-18",
        "title": "Release notes > 0.10.8 -  2024-03-18",
        "section": "0.10.8 -  2024-03-18",
        "text": "0.10.8 -  2024-03-18"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add poster\n(#642)\nAdd LS Dyna unit test\n(#584)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Add logo for dark theme\n(#601)\nArchitecture doc\n(#612)\nPut remote example before embedding example\n(#621)\nMinor updates to Architecture doc\n(#618)\nAdd MechanicalEnums\n(#626)\nUpdate Release action to use Stable version of Mechanical\n(#628)\nUpdate nightly run image version\n(#636)\nUpdate logo without slash\n(#640)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Update pre-commit\n(#610)\nUpdate vale version to 3.1.0\n(#613)\nUpdate timeout for actions\n(#631)\nUpdate cheat sheet with ansys-sphinx-theme\n(#638)\nChanged\npre-commit"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump ansys-sphinx-theme from 0.13.4 to 0.14.0\n(#608)\nBump plotly from 5.18.0 to 5.20.0\n(#605,\n#644)\nBump pypandoc from 1.12 to 1.13\n(#609)\nBump pytest from 8.0.0 to 8.1.1\n(#606,\n#623,\n#634)\nBump grpcio from 1.60.1 to 1.62.1\n(#620,\n#635)\nBump pandas from 2.2.0 to 2.2.1\n(#619)\nBump matplotlib from 3.8.2 to 3.8.3\n(#607)\nBump ansys-mechanical-env from 0.1.3 to 0.1.4\n(#624)\nBump pyvista from 0.43.3 to 0.43.4\n(#643)\nDependencies\nansys-sphinx-theme\nplotly\npypandoc\npytest\ngrpcio\npandas\nmatplotlib\nansys-mechanical-env\npyvista"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0107---2024-02-13",
        "title": "Release notes > 0.10.7 - 2024-02-13",
        "section": "0.10.7 - 2024-02-13",
        "text": "0.10.7 - 2024-02-13"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Upload 241 docker files\n(#567)\nAdd pre-commit hooks\n(#575)\nAdd Automatic version update for Mechanical scripting external links\n(#585)\nAdd PyMechanical logo\n(#592)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Update getting started page\n(#561)\nUpdate 232 to 241 in docs, docstrings, examples, and tests\n(#566)\nUpdate workflow versions to run 241 and 242\n(#590)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump pyvista from 0.43.1 to 0.43.3\n(#564,\n#598)\nBump sphinxcontrib-websupport from 1.2.6 to 1.2.7\n(#562)\nBump ansys-sphinx-theme from 0.13.0 to 0.13.4\n(#563,\n#586,\n#596)\nBump pandas from 2.1.4 to 2.2.0\n(#571)\nBump sphinxemoji from 0.2.0 to 0.3.1\n(#569)\nBump tj-actions/changed-files from 41 to 42\n(#572)\nBump panel from 1.3.6 to 1.3.8\n(#570,\n#579)\nBump peter-evans/create-or-update-comment from 3 to 4\n(#576)\nBump pytest from 7.4.4 to 8.0.0\n(#577)\nBump sphinx-autodoc-typehints from 1.25.2 to 2.0.0\n(#578,\n#597)\nUpdate pre-commit\n(#580,\n#599)\nBump ansys.mechanical.env from 0.1.2 to 0.1.3\n(#583)\nBump sphinx-autobuild from 2021.3.14 to 2024.2.4\n(#588)\nBump pytest-sphinx from 0.5.0 to 0.6.0\n(#587)\nBump grpcio from 1.60.0 to 1.60.1\n(#589)\nBump numpy from 1.26.3 to 1.26.4\n(#595)\nBump imageio from 2.33.1 to 2.34.0\n(#594)\nBump mikepenz/action-junit-report from 3 to 4\n(#593)\nDependencies\npyvista\nsphinxcontrib-websupport\nansys-sphinx-theme\npandas\nsphinxemoji\ntj-actions/changed-files\npanel\npeter-evans/create-or-update-comment\npytest\nsphinx-autodoc-typehints\npre-commit\nansys.mechanical.env\nsphinx-autobuild\npytest-sphinx\ngrpcio\nnumpy\nimageio\nmikepenz/action-junit-report"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0106---2024-01-11",
        "title": "Release notes > 0.10.6 - 2024-01-11",
        "section": "0.10.6 - 2024-01-11",
        "text": "0.10.6 - 2024-01-11"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add release note configuration\n(#512)\nAdd 242 to scheduled nightly run\n(#519)\nAdd transaction for embedding\n(#542)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix pymeilisearch name typo and favicon\n(#538)\nUpdate the gif to reduce the whitespace\n(#540)\nUpdate ansys/actions to v5\n(#541)\nFix cli find mechanical\n(#550)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Update LICENSE\n(#548)\nUpdate license headers and package versions\n(#556)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump github/codeql-action from 2 to 3\n(#532)\nUpdate pre-commit\n(#537,\n#545,\n#553)\nBump pyvista from 0.43.0 to 0.43.1\n(#536)\nBump panel from 1.3.4 to 1.3.6\n(#535,\n#543)\nBump actions/upload-artifact and\nactions/dwonload-artifactfrom 3 to 4\n(#533)\nBump jupyter-sphinx from 0.4.0 to 0.5.3\n(#547)\nBump tj-actions/changed-files from 40 to 41\n(#544)\nBump pytest from 7.4.3 to 7.4.4\n(#546)\nBump add-license-headers from 0.2.2 to 0.2.4\n(#549)\nBump numpy from 1.26.2 to 1.26.3\n(#551)\nDependencies\ngithub/codeql-action\npre-commit\npyvista\npanel\nactions/upload-artifact\nactions/dwonload-artifact\njupyter-sphinx\ntj-actions/changed-files\npytest\nadd-license-headers\nnumpy"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0105---2023-12-15",
        "title": "Release notes > 0.10.5 - 2023-12-15",
        "section": "0.10.5 - 2023-12-15",
        "text": "0.10.5 - 2023-12-15"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add codeql.yml for security checks\n(#423)\nadd readonly flag and assertion\n(#441)\nAdd PyMeilisearch in documentation\n(#508)\nAdd cheetsheat and improve example visibility\n(#506)\nAdd mechanical-env to workflow\n(#521)\nAdd doc pdf build to workflow\n(#529)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix enum printout\n(#421)\nfix appdata tests\n(#425)\nRun all embedding tests & fix appdata tests\n(#433)\nunset all logging environment variables\n(#434)\npytest –ansys-version dependent on existing install\n(#439)\nFix app.save method for saving already saved project in current\nsession (#453)\nFlexible version for embedding & remote example\n(#459)\nFix obsolete API call in embedding test\n(#456)\nFix ignored env passing to cli\n(#465\nFix private appdata environment variables and folder layout\n(#474)\nFix hanging embedding tests\n(#498)\nFix ansys-mechanical finding path\n(#516)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Update pre-commit\n(#528)\nUpdate python minimum requirement from 3.8 to 3.9\n(#484)\nremove version limit for protobuf\n(#432)\nremove legacy configuration test\n(#436)\nUpdate examples page\n(#450)\nremove unneeded try/except\n(#457)\nUpdated wording for revn-variations section\n(#458)\nUpdate temporary file creation in test_app\n(#466)\nRemove .reuse and LICENSES directories & bump add-license-header\nversion (#496)\nReplace workbench_lite with mechanical-env in the docs\n(#522)\nChanged\npre-commit"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Update pre-commit\n(#431,\n#471,\n#489)\nBump numpydoc from 1.5.0 to 1.6.0\n(#428)\nBump ansys-sphinx-theme from 0.11.2 to 0.12.5\n(#427,\n#463,\n#480,\n#493)\nBump grpcio from 1.58.0 to 1.60.0\n(#429,\n#485,\n#504,\n#527)\nBump actions/checkout from 3 to 4\n(#426)\nBump pyvista from 0.42.2 to 0.43.0\n(#446,\n#526)\nBump ansys-sphinx-theme from 0.12.1 to 0.12.2\n(#447)\nBump stefanzweifel/git-auto-commit-action from 4 to 5\n(#448)\nBump numpy from 1.26.0 to 1.26.2\n(#464,\n#495)\nBump pypandoc from 1.11 to 1.12\n(#470)\nBump imageio from 2.31.5 to 2.33.1\n(#469,\n#487,\n#503,\n#524)\nBump add-license-headers from v0.1.3 to v0.2.0\n(#472)\nBump panel from 1.2.3 to 1.3.4\n(#479,\n#486,\n#510,\n#518)\nBump pytest from 7.4.2 to 7.4.3\n(#482)\nBump tj-actions/changed-files from 39 to 40\n(#477)\nBump plotly from 5.17.0 to 5.18.0\n(#478)\nBump pandas from 2.1.1 to 2.1.4\n(#481,\n#494,\n#525)\nBump matplotlib from 3.8.0 to 3.8.2\n(#488,\n#502)\nBump sphinx-gallery from 0.14.0 to 0.15.0\n(#509)\nBump actions/labeler from 4 to 5\n(#517)\nBump actions/setup-python from 4 to 5\n(#523)\nDependencies\npre-commit\nnumpydoc\nansys-sphinx-theme\ngrpcio\nactions/checkout\npyvista\nansys-sphinx-theme\nstefanzweifel/git-auto-commit-action\nnumpy\npypandoc\nimageio\nadd-license-headers\npanel\npytest\ntj-actions/changed-files\nplotly\npandas\nmatplotlib\nsphinx-gallery\nactions/labeler\nactions/setup-python"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0104---2023-10-06",
        "title": "Release notes > 0.10.4 - 2023-10-06",
        "section": "0.10.4 - 2023-10-06",
        "text": "0.10.4 - 2023-10-06"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Update ansys_mechanical_api from 0.1.0 to 0.1.1\n(#444)\nDependencies\nansys_mechanical_api"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0103---2023-09-26",
        "title": "Release notes > 0.10.3 - 2023-09-26",
        "section": "0.10.3 - 2023-09-26",
        "text": "0.10.3 - 2023-09-26"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Set up daily run for 241 testing and added manual inputs for workflow\ndispatch (#385)\nadd option to include enums in global variables (#394)\nadd experimental libraries method (#395)\nadd nonblocking sleep (#399)\nAdd test case for exporting off screen\nimage(#400)\nWarn for obsolete apis (#409)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix embedded testing for all python version in CI/CD\n(#393)\nfix broken link (#397)\nuse Application.Exit() in 241+ (#396)\nFix stale globals by wrapping them (#398)\nFix API documentation (#411)\ndoc fix (#412)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump sphinx from 7.2.5 to 7.2.6\n(#403)\nBump matplotlib from 3.7.2 to 3.8.0\n(#404\nBump imageio-ffmpeg from 0.4.8 to 0.4.9\n(#405\nBump ansys-sphinx-theme from 0.11.1 to 0.11.2\n(#406)\nBump plotly from 5.16.1 to 5.17.0\n(#407)\nBump docker/login-action from 2 to 3\n(#408)\nBump pyvista from 0.42.1 to 0.42.2\n(#414)\nDependencies\nsphinx\nmatplotlib\nimageio-ffmpeg\nansys-sphinx-theme\nplotly\ndocker/login-action\npyvista"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0102---2023-09-08",
        "title": "Release notes > 0.10.2 - 2023-09-08",
        "section": "0.10.2 - 2023-09-08",
        "text": "0.10.2 - 2023-09-08"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Max parallel 2 for embedding tests - ci_cd.yml (#341)\nNew features for ansys-mechanical console script (#343)\nAdd a “Documentation and issues” section to README and doc landing\npage (#347)\nDependabot changelog automation (#354)\nFollow up of dependabot automated changelog (#359)\nAdd license headers to files in src (#373)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Remove library-namespace from CI/CD (#342)\nBump grpcio from 1.56.2 to 1.57.0 (#349)\nBump plotly from 5.15.0 to 5.16.0 (#348)\nBump sphinxcontrib-websupport from 1.2.4 to 1.2.6 (#350)\nBump ansys-sphinx-theme from 0.10.2 to 0.10.3 (#351)\npre-commit autoupdate\n(#362),\n(#380),\n(#391)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fix private appdata issue (#344)\nFix issues with PyPIM object.inv location (#345)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump plotly from 5.16.0 to 5.16.1\n(#357)\nBump sphinx from 7.1.2 to 7.2.5\n(#358,\n#378)\nBump sphinx-gallery from 0.13.0 to 0.14.0\n(#361)\nBump ansys-sphinx-theme from 0.10.3 to 0.11.1\n(#360,\n#387)\nBump pytest-print from 0.3.3 to 1.0.0\n(#369)\nBump tj-actions/changed-files from 37 to 39\n(#367,\n#386)\nBump imageio from 2.31.1 to 2.31.2\n(#370)\nBump pytest from 7.4.0 to 7.4.2\n(#375,\n#389)\nBump actions/checkout from 3 to 4\n(#379)\nBump imageio from 2.31.2 to 2.31.3\n(#376)\nBump sphinx-notfound-page from 1.0.0rc1 to 1.0.0\n(#374)\nBump pyvista from 0.42.0 to 0.42.1\n(#388)\nDependencies\nplotly\nsphinx\nsphinx-gallery\nansys-sphinx-theme\npytest-print\ntj-actions/changed-files\nimageio\npytest\nactions/checkout\nimageio\nsphinx-notfound-page\npyvista"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0101---2023-08-08",
        "title": "Release notes > 0.10.1 - 2023-08-08",
        "section": "0.10.1 - 2023-08-08",
        "text": "0.10.1 - 2023-08-08"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump ansys-sphinx-theme from 0.10.0 to 0.10.2 (#337)\nUpdate clr-loader dependency (#339)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0100---2023-08-07",
        "title": "Release notes > 0.10.0 - 2023-08-07",
        "section": "0.10.0 - 2023-08-07",
        "text": "0.10.0 - 2023-08-07"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Added warning for ansys-mechanical when provided an input script\n(#319)\nAdd changelog check to CI/CD (#322)\nAdded version check for ansys-mechanical warning message (#323)\nAdded TempPathFactory to test_app_save_open (#332)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Update python minimum requirement from 3.7 to 3.8 (#333)\nMinor private appdata updates (#335)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Broken links (#316)\nRemove project lock file on close (#320)\nFixed warning message for ansys-mechanical (#326)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#093---2023-07-27",
        "title": "Release notes > 0.9.3 - 2023-07-27",
        "section": "0.9.3 - 2023-07-27",
        "text": "0.9.3 - 2023-07-27"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#version-09",
        "title": "Release notes > Version 0.9",
        "section": "Version 0.9",
        "text": "Version 0.9"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add ansys-mechanical console script (#297)\naddin configuration and tests (#308)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump matplotlib from 3.7.1 to 3.7.2 (#294)\nBump pyvista from 0.40.0 to 0.40.1 (#293)\nBump sphinx-autodoc-typehints from 1.23.0 to 1.23.3 (#284)\nBump patch version (#292)\nRemove pkg-resources and importlib_metadata (#300)\nBump grpcio from 1.56.0 to 1.56.2 (#305)\nBump pyvista from 0.40.1 to 0.41.1 (#306)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Update code snippet for accessing project directory. (#295)\nAdded import logging to doc file (#299)\nFix version variable issue running “ansys-mechanical -r {revn} -g”\n(#302)\nUpdate wording in running_mechanical.rst (#303)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#092---2023-07-07",
        "title": "Release notes > 0.9.2 - 2023-07-07",
        "section": "0.9.2 - 2023-07-07",
        "text": "0.9.2 - 2023-07-07"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Added private AppData functionality to embedding (#285)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Updated pythonnet warning message (#286)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump pytest from 7.3.2 to 7.4.0 (#282)\nBump grpcio from 1.54.2 to 1.56.0 (#283)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#091---2023-06-21",
        "title": "Release notes > 0.9.1 - 2023-06-21",
        "section": "0.9.1 - 2023-06-21",
        "text": "0.9.1 - 2023-06-21"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "Add version configuration for embedding tests (#270)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump pytest-print from 0.3.1 to 0.3.2 (#273)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "FIX: Use updated ansys-tools-path to resolve - missing 1 required\npositional argument: ‘exe_loc’ issue (#280)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#090---2023-06-13",
        "title": "Release notes > 0.9.0 - 2023-06-13",
        "section": "0.9.0 - 2023-06-13",
        "text": "0.9.0 - 2023-06-13"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "link to pymechanical remote sessions examples (#252)\nadd doc to run script without embedding (#262)\npre-commit autoupdate (#269)\nAdded"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump ansys-sphinx-theme from 0.9.8 to 0.9.9 (#248)\nBump grpcio from 1.54.0 to 1.54.2 (#249)\nBump sphinx from 6.2.0 to 6.2.1 (#250)\nchange image tag in ci/cd (#254)\nBump pyvista from 0.39.0 to 0.39.1 (#256)\nStandardizing data paths (#257)\nBump imageio from 2.28.1 to 2.30.0 (#258)\nBump pytest-cov from 4.0.0 to 4.1.0 (#259)\nBump imageio from 2.30.0 to 2.31.0 (#264)\nBump pytest from 7.3.1 to 7.3.2 (#267)\nBump plotly from 5.14.1 to 5.15.0 (#268)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "FIX: GitHub organization rename to Ansys (#251)\nfix examples links (#253)\nfix windows pythonnet warning unit tests (#260)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#080---2023-05-12",
        "title": "Release notes > 0.8.0 - 2023-05-12",
        "section": "0.8.0 - 2023-05-12",
        "text": "0.8.0 - 2023-05-12"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#version-08",
        "title": "Release notes > Version 0.8",
        "section": "Version 0.8",
        "text": "Version 0.8"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "changelog (#222)\nadd link to embedding examples (#228)\nAdd close() method to Ansys.Mechanical.Embedding.Application.\nSee (#229)\nAdd check if pythonnet exists in the user environment (#235)\nAdded\nclose()\nAnsys.Mechanical.Embedding.Application"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "cleanup docker ignore file (#206)\nUpdate contributing.rst (#213)\nBump sphinx-autodoc-typehints from 1.22 to 1.23.0 (#215)\nBump pytest from 7.3.0 to 7.3.1 (#216)\nBump sphinx-gallery from 0.12.2 to 0.13.0 (#217)\nBump sphinx-copybutton from 0.5.1 to 0.5.2 (#218)\nBump sphinx-design from 0.3.0 to 0.4.1 (#219)\nRemove python 3.7 (#230)\nUse ansys-tools-path (#231)\nBump sphinx from 6.2.0 to 7.0.0 (#232)\nBump imageio from 2.28.0 to 2.28.1 (#233)\nignore generated .ipynb, .py, .rst, .md5, .png and .pickle\nfiles (#239)\nBump pyvista from 0.38.5 to 0.39.0 (#245)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "FIX: not necessary anymore to update apt-get (#220)\nInclude amd folder for mapdl solver in the docker image. (#200)\nRemove jscript references from tests/ folder (#205)\nFixes the windows executable path for standalone mechanical (#214)\nFIX: run_python_script* return empty string for objects that cannot\nbe returned as string (#224)\ncall new() in the BUILDING_GALLERY constructor of\nAnsys.Mechanical.Embedding.Application (#229)\nfix documentation link (#234)\nchanged python doc url to fix doc pipeline error (#236)\nDocker dependencies to support topo and smart tests (#237)\nFixed\nnew()\nAnsys.Mechanical.Embedding.Application"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#073---2023-04-20",
        "title": "Release notes > 0.7.3 - 2023-04-20",
        "section": "0.7.3 - 2023-04-20",
        "text": "0.7.3 - 2023-04-20"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#version-07",
        "title": "Release notes > Version 0.7",
        "section": "Version 0.7",
        "text": "Version 0.7"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Reuse instance of embedded application when building example gallery\n(#221)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#072---2023-04-13",
        "title": "Release notes > 0.7.2 - 2023-04-13",
        "section": "0.7.2 - 2023-04-13",
        "text": "0.7.2 - 2023-04-13"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#changed",
        "title": "Release notes > Changed",
        "section": "Changed",
        "text": "Bump plotly from 5.14.0 to 5.14.1 (#197)\nBump pytest from 7.2.2 to 7.3.0 (#196)\nBump peter-evans/create-or-update-comment from 2 to 3 (#195)\nBump ansys-sphinx-theme from 0.9.6 to 0.9.7 (#198)\nChanged"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "Fixed documentation for updating global variables (#203)\nRemove references to unsupported legacy jscript APIs (#205)\nClean up docker image (#206, #200)\nFixed"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#071----2023-04-10",
        "title": "Release notes > 0.7.1 -  2023-04-10",
        "section": "0.7.1 -  2023-04-10",
        "text": "First public release of PyMechanical\n0.7.1 -  2023-04-10"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/index",
        "href": "api/ansys/mechanical/core/embedding/background/index.html#the-backgroundpy-module",
        "title": "The background.py module",
        "section": "The background.py module",
        "text": "The background.py module\nbackground.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/index",
        "href": "api/ansys/mechanical/core/embedding/background/index.html#summary",
        "title": "The background.py module > Summary",
        "section": "Summary",
        "text": "BackgroundApp\nBackground App.\nSummary\nBackgroundApp"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/background/index",
        "href": "api/ansys/mechanical/core/embedding/background/index.html#description",
        "title": "The background.py module > Description",
        "section": "Description",
        "text": "Class for running Mechanical on a background thread.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#standardsinks",
        "title": "StandardSinks",
        "section": "StandardSinks",
        "text": "Provides built-in sinks.\nStandardSinks\nStandardSinks"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#ansys.mechanical.core.embedding.logger.sinks.StandardSinks",
        "title": "StandardSinks > StandardSinks > StandardSinks",
        "section": "StandardSinks > StandardSinks",
        "text": "class ansys.mechanical.core.embedding.logger.sinks.StandardSinks\n\nProvides built-in sinks.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#overview",
        "title": "StandardSinks > Overview",
        "section": "Overview",
        "text": "STANDARD_LOG_FILE\nCONSOLE\nWINDOWS_DEBUGGER\nWINDOWS_ERROR_MESSAGE_BOX\nWINDOWS_FATAL_MESSAGE_BOX\nOverview\nSTANDARD_LOG_FILE\nCONSOLE\nWINDOWS_DEBUGGER\nWINDOWS_ERROR_MESSAGE_BOX\nWINDOWS_FATAL_MESSAGE_BOX"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#import-detail",
        "title": "StandardSinks > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.logger.sinks import StandardSinks\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#attribute-detail",
        "title": "StandardSinks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#StandardSinks.STANDARD_LOG_FILE",
        "title": "StandardSinks > Attribute detail > STANDARD_LOG_FILE",
        "section": "Attribute detail > STANDARD_LOG_FILE",
        "text": "StandardSinks.STANDARD_LOG_FILE = 0\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#StandardSinks.CONSOLE",
        "title": "StandardSinks > Attribute detail > CONSOLE",
        "section": "Attribute detail > CONSOLE",
        "text": "StandardSinks.CONSOLE = 1\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#StandardSinks.WINDOWS_DEBUGGER",
        "title": "StandardSinks > Attribute detail > WINDOWS_DEBUGGER",
        "section": "Attribute detail > WINDOWS_DEBUGGER",
        "text": "StandardSinks.WINDOWS_DEBUGGER = 2\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#StandardSinks.WINDOWS_ERROR_MESSAGE_BOX",
        "title": "StandardSinks > Attribute detail > WINDOWS_ERROR_MESSAGE_BOX",
        "section": "Attribute detail > WINDOWS_ERROR_MESSAGE_BOX",
        "text": "StandardSinks.WINDOWS_ERROR_MESSAGE_BOX = 3\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks",
        "href": "api/ansys/mechanical/core/embedding/logger/sinks/StandardSinks.html#StandardSinks.WINDOWS_FATAL_MESSAGE_BOX",
        "title": "StandardSinks > Attribute detail > WINDOWS_FATAL_MESSAGE_BOX",
        "section": "Attribute detail > WINDOWS_FATAL_MESSAGE_BOX",
        "text": "StandardSinks.WINDOWS_FATAL_MESSAGE_BOX = 4\n\n"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#app",
        "title": "App",
        "section": "App",
        "text": "Mechanical embedding Application.\nPath to a mechanical database file (.mechdat or .mechdb).\nVersion number of the Mechanical application.\nSetting for a temporary AppData directory. Default is False.\nEnables running parallel instances of Mechanical.\nGlobal variables to be updated. For example, globals().\nReplaces “app.update_globals(globals())”.\nConfiguration for addins. By default “Mechanical” is used and ACT Addins are disabled.\nWhether to copy the user profile when private_appdata is True. Default is True.\nCreate App with Mechanical project file and version:\nDisable copying the user profile when private appdata is enabled\nUpdate the global variables with globals\nCreate App with “Mechanical” configuration and no ACT Addins\nApp\nApp\npython:str\noptional\npython:int\noptional\noptional\npython:dict\noptional\nAddinConfiguration\noptional\noptional"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#ansys.mechanical.core.embedding.app.App",
        "title": "App > App > App",
        "section": "App > App",
        "text": "class ansys.mechanical.core.embedding.app.App(db_file=None, private_appdata=False, **kwargs)\n\nMechanical embedding Application.\n\nParameters\n\ndb_file\n\npython:str, optional\n\nPath to a mechanical database file (.mechdat or .mechdb).\n\nversion\n\npython:int, optional\n\nVersion number of the Mechanical application.\n\nprivate_appdata\n\nbool, optional\n\nSetting for a temporary AppData directory. Default is False.\nEnables running parallel instances of Mechanical.\n\nglobals\n\npython:dict, optional\n\nGlobal variables to be updated. For example, globals().\nReplaces “app.update_globals(globals())”.\n\nconfig\n\nAddinConfiguration, optional\n\nConfiguration for addins. By default “Mechanical” is used and ACT Addins are disabled.\n\ncopy_profile\n\nbool, optional\n\nWhether to copy the user profile when private_appdata is True. Default is True.\n\nExamples\n\nCreate App with Mechanical project file and version:\n\n>>> from ansys.mechanical.core import App\n>>> app = App(db_file=\"path/to/file.mechdat\", version=251)\n\nDisable copying the user profile when private appdata is enabled\n\n>>> app = App(private_appdata=True, copy_profile=False)\n\nUpdate the global variables with globals\n\n>>> app = App(globals=globals())\n\nCreate App with “Mechanical” configuration and no ACT Addins\n\n>>> from ansys.mechanical.core.embedding import AddinConfiguration\n>>> from ansys.mechanical.core import App\n>>> config = AddinConfiguration(\"Mechanical\")\n>>> config.no_act_addins = True\n>>> app = App(config=config)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#overview",
        "title": "App > Overview",
        "section": "Overview",
        "text": "open\nOpen the db file.\nsave\nSave the project.\nsave_as\nSave the project as a new file.\nlaunch_gui\nLaunch the GUI.\nnew\nClear to a new application.\nclose\nClose the active project.\nexit\nExit the application.\nexecute_script\nExecute the given script with the internal IronPython engine.\nexecute_script_from_file\nExecute the given script from file with the internal IronPython engine.\nplotter\nReturn ansys.tools.visualization_interface.Plotter object.\nplot\nVisualize the model in 3d.\nupdate_globals\nUpdate global variables.\nprint_tree\nPrint the hierarchical tree representation of the Mechanical project structure.\nposter\nReturns an instance of Poster.\nDataModel\nReturn the DataModel.\nExtAPI\nReturn the ExtAPI object.\nTree\nReturn the Tree object.\nModel\nReturn the Model object.\nGraphics\nReturn the Graphics object.\nreadonly\nReturn whether the Mechanical object is read-only.\nversion\nReturns the version of the app.\nproject_directory\nReturns the current project directory.\nmessages\nLazy-load the MessageManager.\n__repr__\nGet the product info.\n__enter__\nEnter the scope.\n__exit__\nExit the scope.\nOverview\nopen\nsave\nsave_as\nlaunch_gui\nnew\nclose\nexit\nexecute_script\nexecute_script_from_file\nplotter\nansys.tools.visualization_interface.Plotter\nplot\nupdate_globals\nprint_tree\nposter\nDataModel\nExtAPI\nTree\nModel\nGraphics\nreadonly\nversion\nproject_directory\nmessages\n__repr__\n__enter__\n__exit__"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#import-detail",
        "title": "App > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.app import App\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#property-detail",
        "title": "App > Property detail",
        "section": "Property detail",
        "text": "Returns an instance of Poster.\nReturn the DataModel.\nReturn the ExtAPI object.\nReturn the Tree object.\nReturn the Model object.\nReturn the Graphics object.\nReturn whether the Mechanical object is read-only.\nReturns the version of the app.\nReturns the current project directory.\nLazy-load the MessageManager.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.poster",
        "title": "App > Property detail > poster",
        "section": "Property detail > poster",
        "text": "property App.poster: ansys.mechanical.core.embedding.poster.Poster\n\nReturns an instance of Poster.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.DataModel",
        "title": "App > Property detail > DataModel",
        "section": "Property detail > DataModel",
        "text": "property App.DataModel: Ansys.Mechanical.DataModel.Interfaces.DataModelObject\n\nReturn the DataModel.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.ExtAPI",
        "title": "App > Property detail > ExtAPI",
        "section": "Property detail > ExtAPI",
        "text": "property App.ExtAPI: Ansys.ACT.Interfaces.Mechanical.IMechanicalExtAPI\n\nReturn the ExtAPI object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.Tree",
        "title": "App > Property detail > Tree",
        "section": "Property detail > Tree",
        "text": "property App.Tree: Ansys.ACT.Automation.Mechanical.Tree\n\nReturn the Tree object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.Model",
        "title": "App > Property detail > Model",
        "section": "Property detail > Model",
        "text": "property App.Model: Ansys.ACT.Automation.Mechanical.Model\n\nReturn the Model object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.Graphics",
        "title": "App > Property detail > Graphics",
        "section": "Property detail > Graphics",
        "text": "property App.Graphics: Ansys.ACT.Common.Graphics.MechanicalGraphicsWrapper\n\nReturn the Graphics object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.readonly",
        "title": "App > Property detail > readonly",
        "section": "Property detail > readonly",
        "text": "property App.readonly\n\nReturn whether the Mechanical object is read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.version",
        "title": "App > Property detail > version",
        "section": "Property detail > version",
        "text": "property App.version\n\nReturns the version of the app.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.project_directory",
        "title": "App > Property detail > project_directory",
        "section": "Property detail > project_directory",
        "text": "property App.project_directory\n\nReturns the current project directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.messages",
        "title": "App > Property detail > messages",
        "section": "Property detail > messages",
        "text": "property App.messages\n\nLazy-load the MessageManager.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#method-detail",
        "title": "App > Method detail",
        "section": "Method detail",
        "text": "Get the product info.\nEnter the scope.\nExit the scope.\nOpen the db file.\nPath to a Mechanical database file (.mechdat or .mechdb).\nWhether or not to remove the lock file if it exists before opening the project file.\nSave the project.\nSave the project as a new file.\nIf the overwrite flag is enabled, the current saved file is replaced with the new file.\nThe path where the file needs to be saved.\nWhether the file should be overwritten if it already exists (default is False).\nIf the file already exists at the specified path and overwrite is False.\nFor version 232, if overwrite is True, the existing file and its associated directory\n(if any) will be removed before saving the new file.\nLaunch the GUI.\nClear to a new application.\nClose the active project.\nExit the application.\nExecute the given script with the internal IronPython engine.\nExecute the given script from file with the internal IronPython engine.\nReturn ansys.tools.visualization_interface.Plotter object.\nVisualize the model in 3d.\nRequires installation using the viz option. E.g.\npip install ansys-mechanical-core[viz]\nUpdate global variables.\nWhen scripting inside Mechanical, the Mechanical UI automatically\nsets global variables in Python. PyMechanical cannot do that automatically,\nbut this method can be used.\nBy default, all enums will be imported too. To avoid including enums, set\nthe enums argument to False.\nPrint the hierarchical tree representation of the Mechanical project structure.\nThe starting object of the tree.\nThe maximum number of lines to print. Default is 80. If set to -1, no limit is applied.\nIf the node does not have the required attributes.\nMethod detail\npython:str\noptional\npython:str\noptional\nException\nansys.tools.visualization_interface.Plotter\nAttributeError"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.__repr__",
        "title": "App > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "App.__repr__()\n\nGet the product info.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.__enter__",
        "title": "App > Method detail > __enter__",
        "section": "Method detail > __enter__",
        "text": "App.__enter__()\n\nEnter the scope.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.__exit__",
        "title": "App > Method detail > __exit__",
        "section": "Method detail > __exit__",
        "text": "App.__exit__(exc_type, exc_val, exc_tb)\n\nExit the scope.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.open",
        "title": "App > Method detail > open",
        "section": "Method detail > open",
        "text": "App.open(db_file, remove_lock=False)\n\nOpen the db file.\n\nParameters\n\ndb_file\n\npython:str\n\nPath to a Mechanical database file (.mechdat or .mechdb).\n\nremove_lock\n\nbool, optional\n\nWhether or not to remove the lock file if it exists before opening the project file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.save",
        "title": "App > Method detail > save",
        "section": "Method detail > save",
        "text": "App.save(path=None)\n\nSave the project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.save_as",
        "title": "App > Method detail > save_as",
        "section": "Method detail > save_as",
        "text": "App.save_as(path: str, overwrite: bool = False)\n\nSave the project as a new file.\n\nIf the overwrite flag is enabled, the current saved file is replaced with the new file.\n\nParameters\n\npath\n\npython:str\n\nThe path where the file needs to be saved.\n\noverwrite\n\nbool, optional\n\nWhether the file should be overwritten if it already exists (default is False).\n\nRaises\n\nException\n\nIf the file already exists at the specified path and overwrite is False.\n\nNotes\n\nFor version 232, if overwrite is True, the existing file and its associated directory\n(if any) will be removed before saving the new file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.launch_gui",
        "title": "App > Method detail > launch_gui",
        "section": "Method detail > launch_gui",
        "text": "App.launch_gui(delete_tmp_on_close: bool = True, dry_run: bool = False)\n\nLaunch the GUI.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.new",
        "title": "App > Method detail > new",
        "section": "Method detail > new",
        "text": "App.new()\n\nClear to a new application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.close",
        "title": "App > Method detail > close",
        "section": "Method detail > close",
        "text": "App.close()\n\nClose the active project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.exit",
        "title": "App > Method detail > exit",
        "section": "Method detail > exit",
        "text": "App.exit()\n\nExit the application.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.execute_script",
        "title": "App > Method detail > execute_script",
        "section": "Method detail > execute_script",
        "text": "App.execute_script(script: str) -> Any\n\nExecute the given script with the internal IronPython engine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.execute_script_from_file",
        "title": "App > Method detail > execute_script_from_file",
        "section": "Method detail > execute_script_from_file",
        "text": "App.execute_script_from_file(file_path=None)\n\nExecute the given script from file with the internal IronPython engine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.plotter",
        "title": "App > Method detail > plotter",
        "section": "Method detail > plotter",
        "text": "App.plotter() -> None\n\nReturn ansys.tools.visualization_interface.Plotter object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.plot",
        "title": "App > Method detail > plot",
        "section": "Method detail > plot",
        "text": "App.plot() -> None\n\nVisualize the model in 3d.\n\nRequires installation using the viz option. E.g.\npip install ansys-mechanical-core[viz]\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App()\n>>> app.open(\"path/to/file.mechdat\")\n>>> app.plot()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.update_globals",
        "title": "App > Method detail > update_globals",
        "section": "Method detail > update_globals",
        "text": "App.update_globals(globals_dict: Dict[str, Any], enums: bool = True) -> None\n\nUpdate global variables.\n\nWhen scripting inside Mechanical, the Mechanical UI automatically\nsets global variables in Python. PyMechanical cannot do that automatically,\nbut this method can be used.\n\nBy default, all enums will be imported too. To avoid including enums, set\nthe enums argument to False.\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App()\n>>> app.update_globals(globals())\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/app/App",
        "href": "api/ansys/mechanical/core/embedding/app/App.html#App.print_tree",
        "title": "App > Method detail > print_tree",
        "section": "Method detail > print_tree",
        "text": "App.print_tree(node=None, max_lines=80, lines_count=0, indentation='')\n\nPrint the hierarchical tree representation of the Mechanical project structure.\n\nParameters\n\nnode: DataModel object, optional\n\nThe starting object of the tree.\n\nmax_lines: int, optional\n\nThe maximum number of lines to print. Default is 80. If set to -1, no limit is applied.\n\nRaises\n\nAttributeError\n\nIf the node does not have the required attributes.\n\nExamples\n\n>>> from ansys.mechanical.core import App\n>>> app = App(globals=globals())\n>>> app.print_tree()\n... ├── Project\n... |  ├── Model\n... |  |  ├── Geometry Imports (⚡︎)\n... |  |  ├── Geometry (?)\n... |  |  ├── Materials (✓)\n... |  |  ├── Coordinate Systems (✓)\n... |  |  |  ├── Global Coordinate System (✓)\n... |  |  ├── Remote Points (✓)\n... |  |  ├── Mesh (?)\n\n>>> app.print_tree(Model, 3)\n... ├── Model\n... |  ├── Geometry Imports (⚡︎)\n... |  ├── Geometry (?)\n... ... truncating after 3 lines\n\n>>> app.print_tree(max_lines=2)\n... ├── Project\n... |  ├── Model\n... ... truncating after 2 lines\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/index.html#the-rpc-package",
        "title": "The rpc package",
        "section": "The rpc package",
        "text": "The rpc package\nrpc"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/index.html#summary",
        "title": "The rpc package > Summary",
        "section": "Summary",
        "text": "client\nClient for Mechanical services.\nserver\nRemote Procedure Call (RPC) server.\nutils\nUtilities necessary for remote calls.\nSummary\nclient\nserver\nutils"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/index",
        "href": "api/ansys/mechanical/core/embedding/rpc/index.html#description",
        "title": "The rpc package > Description",
        "section": "Description",
        "text": "RPC and Mechanical service implementation.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer.html#mechanicaldefaultserver",
        "title": "MechanicalDefaultServer",
        "section": "MechanicalDefaultServer",
        "text": "Bases: MechanicalEmbeddedServer\nDefault server with default service methods.\nMechanicalDefaultServer\nMechanicalDefaultServer\nMechanicalEmbeddedServer"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer.html#ansys.mechanical.core.embedding.rpc.server.MechanicalDefaultServer",
        "title": "MechanicalDefaultServer > MechanicalDefaultServer > MechanicalDefaultServer",
        "section": "MechanicalDefaultServer > MechanicalDefaultServer",
        "text": "class ansys.mechanical.core.embedding.rpc.server.MechanicalDefaultServer(**kwargs)\n\nBases: MechanicalEmbeddedServer\n\nDefault server with default service methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer",
        "href": "api/ansys/mechanical/core/embedding/rpc/server/MechanicalDefaultServer.html#import-detail",
        "title": "MechanicalDefaultServer > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.embedding.rpc.server import MechanicalDefaultServer\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#localmechanicalpool",
        "title": "LocalMechanicalPool",
        "section": "LocalMechanicalPool",
        "text": "Create a pool of Mechanical instances.\nNumber of Mechanical instances to create in the pool.\nWhether to wait for the pool to be initialized. The default is\nTrue. When False, the pool starts in the background, in\nwhich case all resources might not be immediately available.\nStarting port for the instances. The default is 10000.\nWhether to show a progress bar when starting the pool. The default\nis True, but the progress bar is not shown when wait=False.\nWhether to restart any failed instances in the pool. The default is\nTrue.\nAdditional keyword arguments. For a list of all keyword\narguments, use the ansys.mechanical.core.launch_mechanical()\nfunction. If the exec_file keyword argument is found, it is used to\nstart instances. PyPIM is used to create instances if the following\nconditions are met:\nPyPIM is configured.\nversion is specified.\nexec_file is not specified.\nCreate a pool of 10 Mechanical instances.\nOn Windows, create a pool while specifying the Mechanical executable file.\nOn Linux, create a pool while specifying the Mechanical executable file.\nIn the PyPIM environment, create a pool.\nLocalMechanicalPool\nLocalMechanicalPool\npython:int\noptional\nTrue\nFalse\npython:int\noptional\n10000\noptional\nTrue\nwait=False\noptional\nTrue\npython:dict\noptional\nansys.mechanical.core.launch_mechanical()\nexec_file\nversion\nexec_file"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#ansys.mechanical.core.pool.LocalMechanicalPool",
        "title": "LocalMechanicalPool > LocalMechanicalPool > LocalMechanicalPool",
        "section": "LocalMechanicalPool > LocalMechanicalPool",
        "text": "class ansys.mechanical.core.pool.LocalMechanicalPool(n_instances, wait=True, port=MECHANICAL_DEFAULT_PORT, progress_bar=True, restart_failed=True, **kwargs)\n\nCreate a pool of Mechanical instances.\n\nParameters\n\nn_instance\n\npython:int\n\nNumber of Mechanical instances to create in the pool.\n\nwait\n\nbool, optional\n\nWhether to wait for the pool to be initialized. The default is\nTrue. When False, the pool starts in the background, in\nwhich case all resources might not be immediately available.\n\nstarting_port\n\npython:int, optional\n\nStarting port for the instances. The default is 10000.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when starting the pool. The default\nis True, but the progress bar is not shown when wait=False.\n\nrestart_failed\n\nbool, optional\n\nWhether to restart any failed instances in the pool. The default is\nTrue.\n\n**kwargs\n\npython:dict, optional\n\nAdditional keyword arguments. For a list of all keyword\narguments, use the ansys.mechanical.core.launch_mechanical()\nfunction. If the exec_file keyword argument is found, it is used to\nstart instances. PyPIM is used to create instances if the following\nconditions are met:\n\nPyPIM is configured.\n\nversion is specified.\n\nexec_file is not specified.\n\nExamples\n\nCreate a pool of 10 Mechanical instances.\n\n>>> from ansys.mechanical.core import LocalMechanicalPool\n>>> pool = LocalMechanicalPool(10)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nOn Windows, create a pool while specifying the Mechanical executable file.\n\n>>> exec_file = 'C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe'\n>>> pool = LocalMechanicalPool(10, exec_file=exec_file)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nOn Linux, create a pool while specifying the Mechanical executable file.\n\n>>> exec_file = '/ansys_inc/v251/aisol/.workbench'\n>>> pool = LocalMechanicalPool(10, exec_file=exec_file)\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\nIn the PyPIM environment, create a pool.\n\n>>> pool = LocalMechanicalPool(10, version=\"251\")\nCreating Pool: 100%|########| 10/10 [00:01<00:00,  1.43it/s]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#overview",
        "title": "LocalMechanicalPool > Overview",
        "section": "Overview",
        "text": "map\nRun a user-defined function on each Mechanical instance in the pool.\nrun_batch\nRun a batch of input files on the Mechanical instances in the pool.\nnext_available\nWait until a Mechanical instance is available and return this instance.\nexit\nExit all Mechanical instances in the pool.\nports\nGet a list of the ports that are used.\n__del__\nClean up when complete.\n__len__\nGet the number of instances in the pool.\n__getitem__\nGet an instance by an index.\n__iter__\nIterate through active instances.\n__str__\nGet the string representation of this object.\nOverview\nmap\nrun_batch\nnext_available\nexit\nports\n__del__\n__len__\n__getitem__\n__iter__\n__str__"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#import-detail",
        "title": "LocalMechanicalPool > Import detail",
        "section": "Import detail",
        "text": "from ansys.mechanical.core.pool import LocalMechanicalPool\nImport detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#property-detail",
        "title": "LocalMechanicalPool > Property detail",
        "section": "Property detail",
        "text": "Get a list of the ports that are used.\nGet the list of ports used by the pool of Mechanical instances.\nProperty detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.ports",
        "title": "LocalMechanicalPool > Property detail > ports",
        "section": "Property detail > ports",
        "text": "property LocalMechanicalPool.ports\n\nGet a list of the ports that are used.\n\nExamples\n\nGet the list of ports used by the pool of Mechanical instances.\n\n>>> pool.ports\n[10001, 10002]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#method-detail",
        "title": "LocalMechanicalPool > Method detail",
        "section": "Method detail",
        "text": "Run a user-defined function on each Mechanical instance in the pool.\nFunction with mechanical as the first argument. The subsequent\narguments should match the number of items in each iterable (if any).\nAn iterable containing a set of arguments for the function.\nThe default is None, in which case the function runs\nonce on each instance of Mechanical.\nClear Mechanical at the start of execution. The default is\nTrue. Setting this to False might lead to instability.\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\nWhether to close the instances when the function finishes running\non all instances in the pool. The default is False.\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is\nstopped and treated as a failure.\nWhether block execution must wait until the batch process is\ncomplete. The default is True.\nA list containing the return values for the function.\nFailed runs do not return an output. Because return values\nare not necessarily in the same order as the iterable,\nyou might want to add some sort of tracker to the return\nof your function.\nRun several input files while storing the final routine.  Note\nhow the function to map must use mechanical as the first argument.\nThe function can have any number of additional arguments.\nRun a batch of input files on the Mechanical instances in the pool.\nList of input files.\nWhether to clear Mechanical when execution starts. The default is\nTrue. Setting this parameter to False might lead to\ninstability.\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\nWhether to close the instances when running the batch\nof input files is finished. The default is False.\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is stopped\nand treated as a failure.\nWhether block execution must wait until the batch process is complete.\nThe default is True.\nList of text outputs from Mechanical for each batch run. The outputs\nare not necessarily listed in the order of the inputs. Failed runs do\nnot return an output. Because the return outputs are not\nnecessarily in the same order as iterable, you might\nwant to add some sort of tracker or note within the input files.\nRun 20 verification files on the pool.\nWait until a Mechanical instance is available and return this instance.\nWhether to return the index along with the instance. The default\nis False.\nInstance of Mechanical.\nIndex within the pool of Mechanical instances. This index\nis not returned by default.\nClean up when complete.\nExit all Mechanical instances in the pool.\nWhether to wait until all processes close before exiting\nall instances in the pool. The default is False.\nGet the number of instances in the pool.\nGet an instance by an index.\nIterate through active instances.\nGet the string representation of this object.\nMethod detail\nfunction\nmechanical\npython:list\npython:tuple\noptional\nNone\noptional\nTrue\nFalse\noptional\nTrue\nwait=False\noptional\nFalse\npython:float\noptional\nNone\noptional\nTrue\npython:list\nmechanical\npython:list\noptional\nTrue\nFalse\noptional\nTrue\nwait=False\noptional\nFalse\npython:float\noptional\nNone\noptional\nTrue\npython:list\niterable\noptional\nFalse\npymechanical.Mechanical\npython:int\noptional\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.map",
        "title": "LocalMechanicalPool > Method detail > map",
        "section": "Method detail > map",
        "text": "LocalMechanicalPool.map(func, iterable=None, clear_at_start=True, progress_bar=True, close_when_finished=False, timeout=None, wait=True)\n\nRun a user-defined function on each Mechanical instance in the pool.\n\nParameters\n\nfunc\n\nfunction\n\nFunction with mechanical as the first argument. The subsequent\narguments should match the number of items in each iterable (if any).\n\niterable\n\npython:list, python:tuple, optional\n\nAn iterable containing a set of arguments for the function.\nThe default is None, in which case the function runs\nonce on each instance of Mechanical.\n\nclear_at_start\n\nbool, optional\n\nClear Mechanical at the start of execution. The default is\nTrue. Setting this to False might lead to instability.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\n\nclose_when_finished\n\nbool, optional\n\nWhether to close the instances when the function finishes running\non all instances in the pool. The default is False.\n\ntimeout\n\npython:float, optional\n\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is\nstopped and treated as a failure.\n\nwait\n\nbool, optional\n\nWhether block execution must wait until the batch process is\ncomplete. The default is True.\n\nReturns\n\npython:list\n\nA list containing the return values for the function.\nFailed runs do not return an output. Because return values\nare not necessarily in the same order as the iterable,\nyou might want to add some sort of tracker to the return\nof your function.\n\nExamples\n\nRun several input files while storing the final routine.  Note\nhow the function to map must use mechanical as the first argument.\nThe function can have any number of additional arguments.\n\n>>> from ansys.mechanical.core import LocalMechanicalPool\n>>> pool = LocalMechanicalPool(10)\n>>> completed_indices = []\n>>> def function(mechanical, name, script):\n        # name, script = args\n        mechanical.clear()\n        output = mechanical.run_python_script(script)\n        return name, output\n>>> inputs = [(\"first\",\"2+3\"), (\"second\", \"3+4\")]\n>>> output = pool.map(function, inputs, progress_bar=False, wait=True)\n[('first', '5'), ('second', '7')]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.run_batch",
        "title": "LocalMechanicalPool > Method detail > run_batch",
        "section": "Method detail > run_batch",
        "text": "LocalMechanicalPool.run_batch(files, clear_at_start=True, progress_bar=True, close_when_finished=False, timeout=None, wait=True)\n\nRun a batch of input files on the Mechanical instances in the pool.\n\nParameters\n\nfiles\n\npython:list\n\nList of input files.\n\nclear_at_start\n\nbool, optional\n\nWhether to clear Mechanical when execution starts. The default is\nTrue. Setting this parameter to False might lead to\ninstability.\n\nprogress_bar\n\nbool, optional\n\nWhether to show a progress bar when running the batch of input\nfiles. The default is True, but the progress bar is not shown\nwhen wait=False.\n\nclose_when_finished\n\nbool, optional\n\nWhether to close the instances when running the batch\nof input files is finished. The default is False.\n\ntimeout\n\npython:float, optional\n\nMaximum runtime in seconds for each iteration. The default is\nNone, in which case there is no timeout. If you specify a\nvalue, each iteration is allowed to run only this number of\nseconds. Once this value is exceeded, the batch process is stopped\nand treated as a failure.\n\nwait\n\nbool, optional\n\nWhether block execution must wait until the batch process is complete.\nThe default is True.\n\nReturns\n\npython:list\n\nList of text outputs from Mechanical for each batch run. The outputs\nare not necessarily listed in the order of the inputs. Failed runs do\nnot return an output. Because the return outputs are not\nnecessarily in the same order as iterable, you might\nwant to add some sort of tracker or note within the input files.\n\nExamples\n\nRun 20 verification files on the pool.\n\n>>> files = [f\"test{index}.py\" for index in range(1, 21)]\n>>> outputs = pool.run_batch(files)\n>>> len(outputs)\n20\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.next_available",
        "title": "LocalMechanicalPool > Method detail > next_available",
        "section": "Method detail > next_available",
        "text": "LocalMechanicalPool.next_available(return_index=False)\n\nWait until a Mechanical instance is available and return this instance.\n\nParameters\n\nreturn_index\n\nbool, optional\n\nWhether to return the index along with the instance. The default\nis False.\n\nReturns\n\npymechanical.Mechanical\n\nInstance of Mechanical.\n\npython:int\n\nIndex within the pool of Mechanical instances. This index\nis not returned by default.\n\nExamples\n\n>>> mechanical = pool.next_available()\n>>> mechanical\nAnsys Mechanical [Ansys Mechanical Enterprise]\nProduct Version:251\nSoftware build date: 11/27/2024 09:34:44\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.__del__",
        "title": "LocalMechanicalPool > Method detail > __del__",
        "section": "Method detail > __del__",
        "text": "LocalMechanicalPool.__del__()\n\nClean up when complete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.exit",
        "title": "LocalMechanicalPool > Method detail > exit",
        "section": "Method detail > exit",
        "text": "LocalMechanicalPool.exit(block=False)\n\nExit all Mechanical instances in the pool.\n\nParameters\n\nblock\n\nbool, optional\n\nWhether to wait until all processes close before exiting\nall instances in the pool. The default is False.\n\nExamples\n\n>>> pool.exit()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.__len__",
        "title": "LocalMechanicalPool > Method detail > __len__",
        "section": "Method detail > __len__",
        "text": "LocalMechanicalPool.__len__()\n\nGet the number of instances in the pool.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.__getitem__",
        "title": "LocalMechanicalPool > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "LocalMechanicalPool.__getitem__(key)\n\nGet an instance by an index.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.__iter__",
        "title": "LocalMechanicalPool > Method detail > __iter__",
        "section": "Method detail > __iter__",
        "text": "LocalMechanicalPool.__iter__()\n\nIterate through active instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/pool/LocalMechanicalPool",
        "href": "api/ansys/mechanical/core/pool/LocalMechanicalPool.html#LocalMechanicalPool.__str__",
        "title": "LocalMechanicalPool > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "LocalMechanicalPool.__str__()\n\nGet the string representation of this object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/resolver/index",
        "href": "api/ansys/mechanical/core/embedding/resolver/index.html#the-resolverpy-module",
        "title": "The resolver.py module",
        "section": "The resolver.py module",
        "text": "The resolver.py module\nresolver.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/resolver/index",
        "href": "api/ansys/mechanical/core/embedding/resolver/index.html#summary",
        "title": "The resolver.py module > Summary",
        "section": "Summary",
        "text": "resolve\nResolve function for all versions of Ansys Mechanical.\nSummary\nresolve"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/resolver/index",
        "href": "api/ansys/mechanical/core/embedding/resolver/index.html#description",
        "title": "The resolver.py module > Description",
        "section": "Description",
        "text": "This is the .NET assembly resolving for embedding Ansys Mechanical.\nNote that for some Mechanical Addons - additional resolving may be\nnecessary. A resolve handler is shipped with Ansys Mechanical on Windows\nstarting in version 23.1 and on Linux starting in version 23.2\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/resolver/index",
        "href": "api/ansys/mechanical/core/embedding/resolver/index.html#module-detail",
        "title": "The resolver.py module > Module detail",
        "section": "Module detail",
        "text": "Resolve function for all versions of Ansys Mechanical.\nModule detail"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/resolver/index",
        "href": "api/ansys/mechanical/core/embedding/resolver/index.html#resolver.resolve",
        "title": "The resolver.py module > Module detail > resolve",
        "section": "Module detail > resolve",
        "text": "resolver.resolve(version)\n\nResolve function for all versions of Ansys Mechanical.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#the-miscpy-module",
        "title": "The misc.py module",
        "section": "The misc.py module",
        "text": "The misc.py module\nmisc.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#summary",
        "title": "The misc.py module > Summary",
        "section": "Summary",
        "text": "is_windows\nCheck if the host machine is on Windows.\nget_mechanical_bin\nGet the path for the Mechanical executable file based on the release version.\nthreaded\nDecorate a function with this decorator to call it using a thread.\nthreaded_daemon\nDecorate a function with this decorator to call it using a daemon thread.\ncheck_valid_ip\nCheck if the IP address is valid.\ncheck_valid_port\nCheck if the port is valid.\ncheck_valid_start_instance\nCheck if the value obtained from the environmental variable is valid.\nis_float\nCheck if a string can be converted to a float.\nSummary\nis_windows\nget_mechanical_bin\nthreaded\nthreaded_daemon\ncheck_valid_ip\ncheck_valid_port\ncheck_valid_start_instance\nis_float"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#description",
        "title": "The misc.py module > Description",
        "section": "Description",
        "text": "Contain miscellaneous functions and methods at the module level.\nDescription"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#module-detail",
        "title": "The misc.py module > Module detail",
        "section": "Module detail",
        "text": "Check if the host machine is on Windows.\nGet the path for the Mechanical executable file based on the release version.\nMechanical version using the three-digit format. For example, \"251\" for\n2025 R1.\nDecorate a function with this decorator to call it using a thread.\nDecorate a function with this decorator to call it using a daemon thread.\nCheck if the IP address is valid.\nIP address to check.\nCheck if the port is valid.\nPort to check.\nLowest possible value for the port. The default is 1000.\nHighest possible value for the port. The default is 60000.\nCheck if the value obtained from the environmental variable is valid.\nValue obtained from the corresponding environment variable.\nTrue if start_instance is True or \"True\",\nFalse otherwise.\nCheck if a string can be converted to a float.\nString to check.\nTrue when conversion is possible, False otherwise.\nModule detail\nTrue\nif\nthe\nhost\nmachine\nis\non\nWindows\nFalse\n\"251\"\npython:str\npython:int\npython:int\noptional\n1000\npython:int\noptional\n60000\npython:str\nTrue\nstart_instance\nTrue\n\"True\"\nFalse\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.is_windows",
        "title": "The misc.py module > Module detail > is_windows",
        "section": "Module detail > is_windows",
        "text": "misc.is_windows()\n\nCheck if the host machine is on Windows.\n\nReturns\n\nTrue if the host machine is on Windows, False otherwise.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.get_mechanical_bin",
        "title": "The misc.py module > Module detail > get_mechanical_bin",
        "section": "Module detail > get_mechanical_bin",
        "text": "misc.get_mechanical_bin(release_version)\n\nGet the path for the Mechanical executable file based on the release version.\n\nParameters\n\nrelease_version: str\n\nMechanical version using the three-digit format. For example, \"251\" for\n2025 R1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.threaded",
        "title": "The misc.py module > Module detail > threaded",
        "section": "Module detail > threaded",
        "text": "misc.threaded(func)\n\nDecorate a function with this decorator to call it using a thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.threaded_daemon",
        "title": "The misc.py module > Module detail > threaded_daemon",
        "section": "Module detail > threaded_daemon",
        "text": "misc.threaded_daemon(func)\n\nDecorate a function with this decorator to call it using a daemon thread.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.check_valid_ip",
        "title": "The misc.py module > Module detail > check_valid_ip",
        "section": "Module detail > check_valid_ip",
        "text": "misc.check_valid_ip(ip)\n\nCheck if the IP address is valid.\n\nParameters\n\nip\n\npython:str\n\nIP address to check.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.check_valid_port",
        "title": "The misc.py module > Module detail > check_valid_port",
        "section": "Module detail > check_valid_port",
        "text": "misc.check_valid_port(port, lower_bound=1000, high_bound=60000)\n\nCheck if the port is valid.\n\nParameters\n\nport\n\npython:int\n\nPort to check.\n\nlower_bound\n\npython:int, optional\n\nLowest possible value for the port. The default is 1000.\n\nhigh_bound\n\npython:int, optional\n\nHighest possible value for the port. The default is 60000.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.check_valid_start_instance",
        "title": "The misc.py module > Module detail > check_valid_start_instance",
        "section": "Module detail > check_valid_start_instance",
        "text": "misc.check_valid_start_instance(start_instance)\n\nCheck if the value obtained from the environmental variable is valid.\n\nParameters\n\nstart_instance\n\npython:str, bool\n\nValue obtained from the corresponding environment variable.\n\nReturns\n\nbool\n\nTrue if start_instance is True or \"True\",\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/misc/index",
        "href": "api/ansys/mechanical/core/misc/index.html#misc.is_float",
        "title": "The misc.py module > Module detail > is_float",
        "section": "Module detail > is_float",
        "text": "misc.is_float(input_string)\n\nCheck if a string can be converted to a float.\n\nParameters\n\ninput_string\n\npython:str\n\nString to check.\n\nReturns\n\nbool\n\nTrue when conversion is possible, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/global_importer/index",
        "href": "api/ansys/mechanical/core/embedding/global_importer/index.html#the-global_importerpy-module",
        "title": "The global_importer.py module",
        "section": "The global_importer.py module",
        "text": "The global_importer.py module\nglobal_importer.py"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/global_importer/index",
        "href": "api/ansys/mechanical/core/embedding/global_importer/index.html#summary",
        "title": "The global_importer.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/mechanical/core/embedding/global_importer/index",
        "href": "api/ansys/mechanical/core/embedding/global_importer/index.html#description",
        "title": "The global_importer.py module > Description",
        "section": "Description",
        "text": "Import Mechanical globals.\nDescription"
    }
]